{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to SyncStage","text":""},{"location":"#welcome-to-syncstage","title":"Welcome to SyncStage","text":"<p>SyncStage is a patent-pending infrastructure platform that allows any application developer to create a synchronous audio experience within their application.</p> <p>What you need to do is integrate the SyncStage SDK into your application and we handle the rest and deliver you consistent low latency between a set of devices.</p> <p>SING, CELEBRATE. JAM, LEARN, LAUGH, MOURN, WIN, TEACH, LISTEN, PRAY, AND PLAY TOGETHER. THE POSSIBILITIES ARE ENDLESS.</p> <p>Become an Early Access Developer</p>"},{"location":"#promo-video","title":"Promo video","text":""},{"location":"acknowledgements/","title":"Acknowledgements","text":"<p>We'd like to give a shout out to following open source projects that were used in the SDK development:</p>"},{"location":"acknowledgements/#ffmpeg","title":"FFMPEG","text":"<p>A complete, cross-platform solution to record, convert and stream audio and video.</p> <p>The SyncStage Android SDK is dynamically linked with unmodified libraries of FFmpeg licensed under the LGPLv2.1. The source code of these FFmpeg libraries, the compilation instructions, and the LGPL v2.1 license are provided in Github.</p>"},{"location":"acknowledgements/#opus","title":"OPUS","text":"<p>Opus is a totally open, royalty-free, highly versatile audio codec. Opus is unmatched for interactive speech and music transmission over the Internet, but is also intended for storage and streaming applications. It is standardized by the Internet Engineering Task Force (IETF) as RFC 6716 which incorporated technology from Skype\u2019s SILK codec and Xiph.Org\u2019s CELT codec.</p>"},{"location":"acknowledgements/#javaandroid-websocket-client","title":"Java/Android WebSocket Client","text":"<p>A very lightweight WebSocket client library for JVM based clients or Android which aims to implement the WebSocket protocol as defined in RFC 6455. It has no dependencies and the jar file is only 22KB.</p>"},{"location":"architecture-and-glossary/","title":"Architecture and glossary","text":""},{"location":"architecture-and-glossary/#architecture","title":"Architecture","text":""},{"location":"architecture-and-glossary/#glossary","title":"Glossary","text":"<ul> <li>SyncStage SDK - a library that we provide to you to integrate it into your mobile app.</li> <li>Your mobile app - your custom mobile application that integrates SyncStage SDK.</li> <li>SyncStage browser SDK - a typescript / javascript library that we provide to you to integrate it into your web app.</li> <li>Desktop Agent - desktop application running in the background on the computer responsible for low latency audio streaming.</li> <li>Your backend - your server-side services that your mobile or web app is communicating with. It is responsible for managing your users.</li> <li>Your users - end users of your mobile app.</li> <li>Studio Server - a low latency audio streaming server.</li> <li>Session - a virtual room where up to 8 users can connect and enjoy a low-latency experience. One mobile app can join only one session at a time.</li> <li>App user - is an end-user of your mobile application, it is managed by your user pool. App user can become session participant.</li> <li>Organization - stands for your company or other legal entity that will incorporate SyncStage into its products.</li> <li>Project - is an abstraction that encapsulates settings for a particular business case. A Project is related to one organization.</li> <li>Application - is a mobile application that is related to a project. Application is created for a particular platform such as Android / iOS / Unity.</li> <li>SyncStage Secret - is a .plist or .json file containing credentials to provision the SDK. This secret is related to one application. Each application can have one or more secrets, which can be invalidated at any time on developers demand.</li> <li>Region - USA, Asia-Pacific, Europe - regions aggregate zones on a high level, you can assign one or more regions for your projects.</li> <li>Zone - precise location of Studio Server deployment.</li> <li>Developer Console - web application for managing your Organization, Projects, Applications, it provides comprehensive insight into the statistics data and billing.</li> <li>Developer team - developer console users from your organization who have access to your projects and applications.</li> <li>Audio stream - is an audio sent between 2 users of your mobile app.</li> <li>Internal microphone - microphone that is built into your user\u2019s smartphone.</li> <li>Direct monitor - SDK option which allows you to hear yourself on your headphones. It's very useful for jamming and singing use cases when the user wants to hear not only other musicians / backing tracks but also himself.</li> <li>Transmitter stream - is a stream of microphone data that flows from your users' smartphones to the Studio Server.</li> <li>Receiver streams - are incoming streams of all session participants that flow from the Studio Server to your users' smartphones.</li> </ul>"},{"location":"roadmap/","title":"Roadmap","text":"<p>Early Access Launch</p> 2023 July<p>Developer Console and iOS SDK</p> <p>New Platforms</p> 2023 August<p>Android SDK and Web SDK for macOS</p> <p>Windows support</p> 2023 October<p>Preview version of Windows SDK</p>"},{"location":"android/changelog/","title":"Changelog","text":""},{"location":"android/changelog/#0.6.1","title":"0.6.1 April 9, 2024","text":""},{"location":"android/changelog/#modified","title":"Modified","text":"<ul> <li>Enabled network slicing</li> <li>Extended analytics data collected by the SDK (network slicing)</li> <li>Fixed connectivity dot indicator</li> <li>minor improvements in the test application</li> </ul>"},{"location":"android/changelog/#0.6.0","title":"0.6.0 October 24, 2023","text":""},{"location":"android/changelog/#modified_1","title":"Modified","text":"<ul> <li>Modified <code>init</code> method of the <code>SyncStage</code> class</li> </ul>"},{"location":"android/changelog/#0.5.2","title":"0.5.2 September 22, 2023","text":""},{"location":"android/changelog/#added","title":"Added","text":"<ul> <li>Methods for managing latency optimization level</li> </ul>"},{"location":"android/changelog/#fixed","title":"Fixed","text":"<ul> <li>Fixed sampling frequency issues on some devices with Android &lt; 12</li> <li>Improved TCP/UDP switching</li> </ul>"},{"location":"android/changelog/#0.5.1","title":"0.5.1 September 1, 2023","text":""},{"location":"android/changelog/#fixed_1","title":"Fixed","text":"<ul> <li>Fixed crash on latency measurement timeouts</li> </ul>"},{"location":"android/changelog/#0.5.0","title":"0.5.0 August 18, 2023","text":""},{"location":"android/changelog/#added_1","title":"Added","text":"<ul> <li>Session recording</li> </ul>"},{"location":"android/changelog/#changed","title":"Changed","text":"<ul> <li>Improved handover handling</li> </ul>"},{"location":"android/changelog/#0.4.1","title":"0.4.1 August 18, 2023","text":""},{"location":"android/changelog/#changed_1","title":"Changed","text":"<ul> <li>Improved auto input output device switching when headphones are connected / disconnected</li> <li>SyncStage collects analytics data for product improvement</li> </ul>"},{"location":"android/changelog/#0.4.0","title":"0.4.0 July 21, 2023","text":""},{"location":"android/changelog/#added_2","title":"Added","text":"<ul> <li>Security improvements</li> <li>Get best available server</li> <li>Get server instances</li> <li>SyncStage discovery delegate</li> <li>stop() method for disposing all SyncStage background threads</li> </ul>"},{"location":"android/changelog/#changed_2","title":"Changed","text":"<ul> <li>Create session parameters</li> <li>Join session parameters</li> </ul>"},{"location":"android/changelog/#removed","title":"Removed","text":"<ul> <li>Zone list (Replaced by: getServerInstances)</li> </ul>"},{"location":"android/changelog/#0.3.0","title":"0.3.0 May 12, 2023","text":""},{"location":"android/changelog/#fixed_2","title":"Fixed","text":"<ul> <li>Disabling the internet connection during a session leads to an app crash.</li> <li>Losing network coverage results in the app crashing.</li> <li>Users may be removed from a session when the app runs in the background and the screen is locked.</li> </ul>"},{"location":"android/changelog/#0.2.0","title":"0.2.0 April 26, 2023","text":""},{"location":"android/changelog/#added_3","title":"Added","text":"<ul> <li>Toggle direct monitor</li> <li>Get direct monitor volume</li> <li>Get direct monitor state</li> <li>Get internal microphone state</li> <li>Get SDK version</li> </ul>"},{"location":"android/changelog/#changed_3","title":"Changed","text":"<ul> <li>method <code>zonesList</code> is renamed to <code>zoneList</code></li> </ul>"},{"location":"android/changelog/#fixed_3","title":"Fixed","text":"<ul> <li>Internal microphone crashes</li> <li>Crashes of API calls when there is no internet connection</li> </ul>"},{"location":"android/changelog/#0.1.0","title":"0.1.0 January 3, 2023","text":""},{"location":"android/changelog/#added_4","title":"Added","text":"<ul> <li>Create session</li> <li>Join session</li> <li>Leave session</li> <li>Mute streams</li> <li>Change stream volumes</li> <li>Toggle internal microphone</li> <li>Get network measurements</li> </ul>"},{"location":"android/known-issues/","title":"Known issues","text":""},{"location":"android/known-issues/#sdk","title":"SDK","text":"<p>SyncStage SDK <code>0.6.1</code> for Android contains some known issues. However, we are diligently working to resolve them in upcoming releases.</p> <ul> <li>When headphones without a microphone are connected, the internal microphone must be manually enabled.</li> <li>Bluetooth audio devices, e.g. headsets, speakers, are not yet fully supported.</li> </ul>"},{"location":"android/known-issues/#test-app","title":"Test App","text":"<p>Additionally, there are known issues in the SyncStage Test App that are not related to the SDK itself.</p> <ul> <li>State of internal microphone and direct monitor will be not up to date after plugging in / out headphones</li> <li>After a few hours of remaining idle, the background app becomes UNAUTHORIZED. The user needs to either restart the application or return to the welcome screen and navigate through the entire application flow again.</li> </ul>"},{"location":"android/overview/","title":"Overview","text":"<p>SyncStage SDK for Android current version: <code>v0.6.1</code> (View changelog)</p> <p>Install SDK Get an example project</p>"},{"location":"android/overview/#requirements","title":"Requirements","text":""},{"location":"android/overview/#android-version","title":"Android version","text":"<p>The minimum recommended Android version is 12 (Android API &gt;= 31)</p> <p>SyncStage can operate on lower distributions starting from Android 10 (Android API 29) with known limitations:</p> <ul> <li> <p>On some devices the full ultra low latency potential will not be reached.</p> </li> <li> <p>Network type detection does not work correctly.</p> </li> </ul>"},{"location":"android/overview/#cpu-architecture","title":"CPU architecture","text":"<p>SyncStage is compatible with armeabi-v7a and arm64-v8a CPU architectures.</p>"},{"location":"android/overview/#tested-devices","title":"Tested devices","text":"<p>The SyncStage low latency capabilities were tested on a series of physical devices:</p> <ul> <li>Samsung Galaxy S23</li> <li>Samsung Galaxy S22 (different variants)</li> <li>Samsung Galaxy S21 (different variants)</li> <li>Samsung Galaxy S20 (different variants)</li> <li>Samsung Z Fold 2</li> <li>Google Pixel 4a</li> </ul> <p>The list is constantly getting longer. Setting up a SyncStage audio session without verifying the latency was tested on numerous other Android devices.</p>"},{"location":"android/quickstart/","title":"Quickstart","text":""},{"location":"android/quickstart/#before-you-begin","title":"Before you begin","text":"<p>Before you start developing your application with the SyncStage SDK, you need to opt-in to Early Access Developer program and get your SyncStage SDK secrets. Once you have opted-in we will contact you to provide you with your SDK secrets. The SDK secrets are your credentials that authenticates requests associated with your project. </p> <p>Become an Early Access Developer</p>"},{"location":"android/quickstart/#start-with-an-example-project","title":"Start with an example project","text":"<p>The best way to start with SyncStage is by trying out our example project available on GitHub SyncStage Test App for Android.</p> <p>Learn more</p>"},{"location":"android/quickstart/#use-syncstage-sdk-in-your-application","title":"Use SyncStage SDK in your application","text":""},{"location":"android/quickstart/#1-add-package-dependency","title":"1. Add package dependency","text":"<p>In the <code>settings.gradle</code> add SyncStage maven repository under <code>dependencyResolutionManagement</code> block. Please define <code>githubProperties</code> which will be used for package repository authentication.</p> <pre><code>def githubProperties = new Properties()\ngithubProperties.load(new FileInputStream(\"github.properties\"))\n\ndependencyResolutionManagement {\n    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)\n    repositories {\n        google()\n        mavenCentral()\n        maven {\n            url = uri(\"https://maven.pkg.github.com/opensesamemedia/syncstagesdkpackage\")\n            credentials {\n                username = githubProperties['gpr.usr'] ?: System.getenv(\"GPR_USER\")\n                password = githubProperties['gpr.key'] ?: System.getenv(\"GPR_API_KEY\")\n            }\n        }\n    }\n}\n</code></pre> <p>Android studio needs GitHub credentials with <code>read:packages</code> permission to fetch the SDK package.</p> <p>In order to provide GitHub credentials please create a <code>github.properties</code> file in the root directory and paste following code:</p> <pre><code>gpr.usr=\ngpr.key=\n</code></pre> <p>Under <code>gpr.usr</code> please provide you GitHub login, and under <code>gpr.key</code> paste GitHub token with <code>read:packages</code> permission. For information how to generate token please refer here.</p>"},{"location":"android/quickstart/#2-add-the-following-permissions-to-androidmanifestxml","title":"2. Add the following permissions to AndroidManifest.xml","text":"<pre><code>&lt;uses-permission android:name=\"android.permission.RECORD_AUDIO\"/&gt;\n&lt;uses-permission android:name=\"android.permission.INTERNET\" /&gt;\n&lt;uses-permission android:name=\"android.permission.MODIFY_AUDIO_SETTINGS\" /&gt;\n&lt;uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" /&gt;\n&lt;uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\" /&gt;\n&lt;uses-permission android:name=\"android.permission.READ_PHONE_STATE\" /&gt;\n&lt;uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" /&gt;\n</code></pre> <p>Please note that most of those notifications must accepted by user explicitly.</p>"},{"location":"android/quickstart/#3-add-syncstagesecretjson-to-your-android-studio-project-to-the-assets-folder","title":"3. Add SyncStageSecret.json to your Android Studio project to the assets folder","text":"<p>SyncStageSecret.json is assigned to one application. File contains confidential credentials that allow access to your SyncStage resources. </p> <p>Security tip</p> <p>We strongly recommend storing SyncStageSecret.json securely in your backend and provide it as a parameter at SyncStage SDK object instantiation. Having implemented the supply of the SyncStageSecret.json from your protected backend, you can remove the .json from the build.</p>"},{"location":"android/quickstart/#4-integrate-the-syncstage-class-with-your-app","title":"4. Integrate the SyncStage class with your app","text":"<p>Here you can find a list of:</p> <ul> <li>SDK Methods</li> <li>SDK Delegates</li> <li>SDK Error Codes</li> </ul>"},{"location":"android/quickstart/#5-use-syncstage-in-background","title":"5. Use SyncStage in background","text":"<p>To allow SyncStage work in background you need to create a foreground service of <code>microphone</code> type. Service and additional permissions must be added to <code>AndroidManifest.xml</code>.</p> <pre><code>...\n\n    &lt;service\n        android:name=\".YourForegoundServiceName\"\n        android:foregroundServiceType=\"microphone\" \n    /&gt;\n&lt;/application&gt;\n\n&lt;uses-permission android:name=\"android.permission.FOREGROUND_SERVICE\" /&gt;\n&lt;uses-permission android:name=\"android.permission.POST_NOTIFICATIONS\" /&gt;\n</code></pre>"},{"location":"android/quickstart/#6-handle-exiting-application-gracefully","title":"6. Handle exiting application gracefully","text":"<p>Use a method for stopping and cleaning app all the SDK's background tasks. See here) for more details.</p>"},{"location":"android/quickstart/#troubleshooting","title":"Troubleshooting","text":""},{"location":"android/quickstart/#sdk-does-not-work-as-expected-but-the-application-is-building-and-running-what-can-i-do-about-it","title":"SDK does not work as expected, but the application is building and running, what can I do about it?","text":"<p>Some problems might occur if the application user did not grant all required permissions on their device. Before using the SyncStage object, make sure that all of the required permissions are granted.</p>"},{"location":"android/sdk-delegates/","title":"Delegates","text":""},{"location":"android/sdk-delegates/#061","title":"0.6.1","text":"<p>SyncStage class provide two delegates: <code>SyncStageUserDelegate</code> and <code>SyncStageConnectivityDelegate</code> which provide a set of callbacks to inform your application about asynchronous events from the SyncStage. You can define those object and provide to the SyncStage constructor or update public SyncStage properties <code>userDelegate</code> and <code>connectivityDelegate</code> anytime.</p>"},{"location":"android/sdk-delegates/#syncstageuserdelegate","title":"SyncStageUserDelegate","text":"<p>Responsible for getting callbacks about users' state in the session.</p> <pre><code>interface SyncStageUserDelegate {\n    // called when a user joins a session\n    fun userJoined(connection: Connection)\n    // called when a user leaves a session\n    fun userLeft(identifier: String)\n    // called when a user mutes himself\n    fun userMuted(identifier: String)\n    // called when a user unmutes himself\n    fun userUnmuted(identifier: String)\n    // called when session recording started\n    fun sessionRecordingStarted()\n    // called when session recording stopped\n    fun sessionRecordingStopped()\n    // called when the your application lose connectivity with Studio Server, after a while user will be dismissed from the session\n    fun sessionOut()\n}\n</code></pre>"},{"location":"android/sdk-delegates/#syncstageconnectivitydelegate","title":"SyncStageConnectivityDelegate","text":"<p>Responsible for getting callbacks about users' connectivity in the session.</p> <pre><code>interface SyncStageConnectivityDelegate {\n    // called when user loses partial connectivity as a transmitter or when get recover.\n    fun transmitterConnectivityChanged(connected: Boolean)\n    // called when the receiver loses partial connectivity for a specific user or when it recovers\n    fun receiverConnectivityChanged(identifier: String, connected: Boolean)\n}\n</code></pre>"},{"location":"android/sdk-delegates/#syncstagediscoverydelegate","title":"SyncStageDiscoveryDelegate","text":"<p>Responsible for getting callbacks about available zones latency.</p> <pre><code>interface SyncStageDiscoveryDelegate {\n    fun discoveryResults(zones: List&lt;String&gt;)\n    fun discoveryLatencyTestResults(zoneLatencyMap: Map&lt;String, Int&gt;)\n}\n</code></pre> <p>The key of <code>zoneLatencyMap</code> is zoneId, and the value is latency represented in miliseconds.</p>"},{"location":"android/sdk-error-codes/","title":"Error codes","text":""},{"location":"android/sdk-error-codes/#061","title":"0.6.1","text":"<p>Most of the SDK methods return SyncStageSDKErrorCode which can be decoded using following enum class.</p> <pre><code>enum class SyncStageSDKErrorCode(val errorCode: Int) {\n    UNKNOWN_ERROR(-1),\n    OK(0),\n    CONFIGURATION_ERROR(1),\n    API_ERROR(2),\n    API_UNAUTHORIZED(3),\n    AUDIO_STREAMING_ERROR(4),\n    STREAM_DOES_NOT_EXIST(5),\n    BAD_VOLUME_VALUE(6),\n    SESSION_NOT_JOINED(7),\n    AUDIO_SERVER_NOT_REACHABLE(8),\n}\n</code></pre>"},{"location":"android/sdk-methods/","title":"Methods","text":""},{"location":"android/sdk-methods/#061","title":"0.6.1","text":""},{"location":"android/sdk-methods/#general","title":"General","text":""},{"location":"android/sdk-methods/#constructor","title":"Constructor","text":"<pre><code>SyncStage(\n        private val ctx: Context,\n        var userDelegate: SyncStageUserDelegate? = null,\n        var connectivityDelegate: SyncStageConnectivityDelegate? = null\n    )\n</code></pre> <p>Constructor parameters:</p> <ul> <li> <p><code>ctx</code> - Android application context</p> </li> <li> <p><code>userDelegate</code> - delegate object to receive events about users in session state</p> </li> <li> <p><code>connectivityDelegate</code> - delegate object to receive events with information about stream connection to Studio Server state</p> </li> </ul>"},{"location":"android/sdk-methods/#initialize","title":"Initialize","text":"<p>Initializes the SDK SyncStage object.</p> <pre><code>fun init(\n        syncStageSecret: String? = null,\n        onCompleted: (errorCode: SyncStageSDKErrorCode) -&gt; Unit = {},\n    )\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>syncStageSecret</code> - if set to null, SDK will look for the SyncStageSecret.json file</p> </li> <li> <p><code>onCompleted</code> - callback informing about the result of initialization with <code>SyncStageSDKErrorCode</code></p> </li> </ul>"},{"location":"android/sdk-methods/#stop-and-dispose","title":"Stop and dispose","text":"<p>This method stops and cleans up all background tasks SDK performs. </p> <pre><code>fun stop()\n</code></pre> <p>Note</p> <p>It is crucial to call it onDestroy of the Activity where SyncStage has been initialized in.</p> <pre><code>    override fun onDestroy() {\n        if (isFinishing) {\n            syncStage.stop()\n        }\n        super.onDestroy()\n    }\n</code></pre>"},{"location":"android/sdk-methods/#get-syncstage-sdk-version","title":"Get SyncStage SDK version","text":"<p>Gets SyncStage SDK version</p> <pre><code>fun getSDKVersion(): String\n</code></pre>"},{"location":"android/sdk-methods/#get-best-available-server","title":"Get best available server","text":"<p>Get best available server, where a session can be created</p> <pre><code>suspend fun getBestAvailableServer(): Pair&lt;ServerInstance?, SyncStageSDKErrorCode&gt;\n</code></pre>"},{"location":"android/sdk-methods/#get-server-instances","title":"Get server instances","text":"<p>Get server instances so you can select the server that is suitable for your session.</p> <pre><code>suspend fun getServerInstances(): Pair&lt;List&lt;ServerInstance&gt;?, SyncStageSDKErrorCode&gt; \n</code></pre>"},{"location":"android/sdk-methods/#session","title":"Session","text":""},{"location":"android/sdk-methods/#create-a-session","title":"Create a session","text":"<p>Creates a session in a given zone by a given user from your user pool.</p> <pre><code>suspend fun createSession(\n    zoneId: String,\n    studioServerId: String,\n    userId: String\n): Pair&lt;SessionIdentifier?, SyncStageSDKErrorCode&gt;\n</code></pre> <p>Parameters:</p> <ul> <li><code>zoneId</code> - zone in which we want to host our session</li> <li><code>studioServerId</code> - id of the selected studio server</li> <li><code>userId</code> - id of your app user to match the data between SyncStage and your backend</li> </ul>"},{"location":"android/sdk-methods/#join-the-session","title":"Join the session","text":"<p>Joins a particular session identified by <code>sessionCode</code>.</p> <pre><code>suspend fun join(\n    sessionCode: String,\n    userId: String,\n    displayName: String? = null,\n    zoneId: String,\n    studioServerId: String,\n): Pair&lt;Session?, SyncStageSDKErrorCode&gt; \n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>sessionCode</code> - the session code</p> </li> <li> <p><code>userId</code> - id of your app user to match de data between SyncStage and your backend</p> </li> <li> <p><code>displayName</code> - your app user display name</p> </li> <li> <p><code>zoneId</code> - zone in which your session is hosted</p> </li> <li> <p><code>studioServerId</code> - studio server where you are running your session</p> </li> </ul>"},{"location":"android/sdk-methods/#get-session-state","title":"Get session state","text":"<p>Gets state of currently joined session.</p> <pre><code>session(completion: @escaping (Result&lt;Session, SyncStageError&gt;)\n</code></pre> <p>Parameters:</p> <ul> <li><code>completion</code> - returns session state</li> </ul>"},{"location":"android/sdk-methods/#leave-the-session","title":"Leave the session","text":"<p>Leaves currently joined session.</p> <pre><code>suspend fun leave(): SyncStageSDKErrorCode\n</code></pre>"},{"location":"android/sdk-methods/#audio-setup","title":"Audio setup","text":""},{"location":"android/sdk-methods/#mute-unmute-microphone","title":"Mute / unmute microphone","text":"<p>Enables or disables microphone stream.</p> <pre><code>fun toggleMicrophone(mute: Boolean): SyncStageSDKErrorCode \n</code></pre> <p>Parameters:</p> <ul> <li><code>mute</code>- desired state of the mute option</li> </ul>"},{"location":"android/sdk-methods/#is-muted","title":"Is muted","text":"<p>Returns state of microphone stream.</p> <pre><code>fun isMicrophoneMuted(): Boolean\n</code></pre>"},{"location":"android/sdk-methods/#turn-on-of-direct-monitor","title":"Turn on / of direct monitor","text":"<p>Turns on / of direct monitor.</p> <pre><code>fun toggleDirectMonitor(enable: Boolean): SyncStageSDKErrorCode\n</code></pre> <p>Parameters:</p> <ul> <li><code>enable</code>- <code>true</code> for turning on direct monitor</li> </ul>"},{"location":"android/sdk-methods/#get-direct-monitor-volume","title":"Get direct monitor volume","text":"<p>Returns current direct monitor volume.</p> <pre><code>fun getDirectMonitorVolume(): Int\n</code></pre>"},{"location":"android/sdk-methods/#change-direct-monitor-volume","title":"Change direct monitor volume","text":"<p>Changes volume of the direct monitor.</p> <pre><code>fun changeDirectMonitorVolume(volume: Int): SyncStageSDKErrorCode \n</code></pre> <p>Parameters:</p> <ul> <li><code>volume</code>- value from range [0;100]</li> </ul>"},{"location":"android/sdk-methods/#get-direct-monitor-state","title":"Get direct monitor state","text":"<p>Gets direct monitor enabled state</p> <pre><code>fun getDirectMonitorEnabled(): Boolean\n</code></pre>"},{"location":"android/sdk-methods/#turn-on-of-internal-microphone","title":"Turn on / of internal microphone","text":"<p>Turns on / of internal microphone to be used instead of default audio input i.e. headphones mic.</p> <pre><code>fun toggleInternalMic(enable: Boolean): SyncStageSDKErrorCode\n</code></pre> <p>Parameters:</p> <ul> <li><code>enable</code>- <code>true</code> for turning on internal microphone</li> </ul>"},{"location":"android/sdk-methods/#get-internal-microphone-state","title":"Get internal microphone state","text":"<p>Gets internal microphone enabled state</p> <pre><code>fun getInternalMicEnabled(): Boolean\n</code></pre>"},{"location":"android/sdk-methods/#network-measurements","title":"Network measurements","text":""},{"location":"android/sdk-methods/#get-receiver-network-measurements","title":"Get receiver network measurements","text":"<p>Returns Mesurements object with network delay, jitter, and calculated network quality indicators.</p> <pre><code>fun getReceiverMeasurements(identifier: String): Measurements\n</code></pre> <p>Parameters:</p> <ul> <li><code>identifier</code>- receiver's identifier</li> </ul>"},{"location":"android/sdk-methods/#get-transmitter-network-measurements","title":"Get transmitter network measurements","text":"<p>Returns Mesurements object with network delay, jitter, and calculated network quality indicators.</p> <pre><code>fun getTransmitterMeasurements(): Measurements\n</code></pre>"},{"location":"android/sdk-methods/#latency-optimization-level","title":"Latency Optimization Level","text":"<p>Click here to learn more about the Latency Optimization Level.</p>"},{"location":"android/sdk-methods/#change-latency-optimization-level","title":"Change latency Optimization Level","text":"<p>Change the latency optimization level using of the following options:</p> <ul> <li>highQuality</li> <li>optimized</li> <li>bestPerformance</li> <li>ultraFast</li> </ul> <p></p><pre><code>fun changeLatencyOptimizationLevel(value: LatencyOptimizationLevel)\n</code></pre> Parameters: <ul> <li><code>value</code>- latency optimization level value.</li> </ul>"},{"location":"android/sdk-methods/#get-latency-optimization-level","title":"Get Latency Optimization Level","text":"<p>Returns latency optimization level.</p> <pre><code>fun getLatencyOptimizationLevel(): LatencyOptimizationLevel\n</code></pre>"},{"location":"android/sdk-methods/#session-recording","title":"Session recording","text":""},{"location":"android/sdk-methods/#start-recording","title":"Start recording","text":"<pre><code>fun startRecording(): SyncStageSDKErrorCode\n</code></pre>"},{"location":"android/sdk-methods/#stop-recording","title":"Stop recording","text":"<pre><code>fun stopRecording(): SyncStageSDKErrorCode\n</code></pre>"},{"location":"android/test-app/","title":"Test App","text":""},{"location":"android/test-app/#test-app","title":"Test App","text":"<p>The best way to start you journey with SyncStage is by trying out our example project available on GitHub SyncStage Test App for Android. This tutorial shows you how to clone, build, and run the application on your device. The recommended development environment is Android Studio.</p>"},{"location":"android/test-app/#set-up-your-development-project","title":"Set up your development project","text":"<p>Follow these steps to create the Test App project in Android Studio.</p> <ol> <li>Download and install Android Studio.</li> <li>Clone or download the SyncStage Test App for Android repository from GitHub.</li> <li>Import the project:</li> <li>In Android Studio, select File &gt; New &gt; Import Project.</li> <li>Go to the location where you saved the SyncStage Test App for Android repository.</li> <li>Find SyncStage project at this location.</li> <li>Select the project directory, then click Open. Android Studio now builds your project, using the Gradle build tool.</li> </ol>"},{"location":"android/test-app/#get-a-syncstage-sdk-secret","title":"Get a SyncStage SDK secret","text":"<p>To run the SyncStage Test App you need to add a SyncStageSecret.json file to your Android Studio project to the assets folder.</p> <p>Don't know how to get the secret file? See our Quickstart Guide for more details.</p>"},{"location":"android/test-app/#build-and-run-your-app","title":"Build and run your app","text":"<p>To build and run the app:</p> <ol> <li>Connect an Android device to your computer. </li> <li>Follow the provided guidelines to activate developer options on your Android device and configure your system to detect the connected device.</li> <li>In Android Studio, click the Run menu option (or  button)</li> <li>Select a device.</li> <li>Android Studio invokes Gradle to build the app, and then runs it.</li> </ol> <p>Note</p> <p>Android SyncStage SDK is not optimized against x86-64 architecture. Audio transmission might not work correctly in using the virtual device (AVD).</p>"},{"location":"android/test-app/#use-the-app","title":"Use the app","text":""},{"location":"android/test-app/#create-a-session","title":"Create a session","text":"<ol> <li>Provide a nickname, e.g. User-1.</li> <li>Let SyncStage find the best Studio Server location.</li> <li>Click on the New Session button.</li> <li>Share the session code and wait for others to join you.</li> </ol> Provide nickname Automated server discovery Discovery results Create a session Invite others"},{"location":"android/test-app/#join-a-session","title":"Join a session","text":"<ol> <li>Provide a nickname, e.g. User-2.</li> <li>Let SyncStage find the best Studio Server location.</li> <li>Input the session code.</li> <li>Click on the Join button.</li> <li>Now User-1 and User-2 are ready to have a session together!</li> </ol> <p>Note</p> <p>Currently, Studio Server discovery results for users that are joining the session are ignored - they join the session in the same location as the session creator. This is going to change in future releases.</p> Provide nickname Automated server discovery Discovery results Join a session Invite others <p>Currently, SyncStage\u2019s audio pipeline supports sessions with **up to 8 users. **</p>"},{"location":"android/test-app/#other-functionalities","title":"Other functionalities","text":"<p>You can control volume levels of all participants on your end, each app user can mix volumes according to their needs. Anytime you can mute / unmute yourself or simply leave the session.</p>"},{"location":"android/test-app/#enable-crashlytics","title":"Enable crashlytics","text":"<p>You can track any issues in your app with SyncStage SDK using Firebase and crashlytics. In order to enable this feature you need to create a project in Firebase console and add <code>google-services.json</code> credentials to the <code>app/</code> directory and uncomment following lines in <code>app/build.gradle</code> file:</p> <pre><code>...\n//    // TO BE UNCOMMENTED FOR CRASHLYTICS\n//    id 'com.google.gms.google-services'\n//    id 'com.google.firebase.crashlytics'\n...\n//    // TO BE UNCOMMENTED FOR CRASHLYTICS\n//    implementation platform('com.google.firebase:firebase-bom:31.2.2')\n//    implementation 'com.google.firebase:firebase-crashlytics-ktx'\n//    implementation 'com.google.firebase:firebase-analytics-ktx'\n...\n</code></pre>"},{"location":"android/versions/0.4.0/sdk-delegates/","title":"Delegates","text":""},{"location":"android/versions/0.4.0/sdk-delegates/#040","title":"0.4.0","text":"<p>SyncStage class provide two delegates: <code>SyncStageUserDelegate</code> and <code>SyncStageConnectivityDelegate</code> which provide a set of callbacks to inform your application about asynchronous events from the SyncStage. You can define those object and provide to the SyncStage constructor or update public SyncStage properties <code>userDelegate</code> and <code>connectivityDelegate</code> anytime.</p>"},{"location":"android/versions/0.4.0/sdk-delegates/#syncstageuserdelegate","title":"SyncStageUserDelegate","text":"<p>Responsible for getting callbacks about users' state in the session.</p> <pre><code>interface SyncStageUserDelegate {\n    fun userJoined(connection: Connection)\n    fun userLeft(identifier: String)\n    fun userMuted(identifier: String)\n    fun userUnmuted(identifier: String)\n    fun sessionOut()\n}\n</code></pre>"},{"location":"android/versions/0.4.0/sdk-delegates/#syncstageconnectivitydelegate","title":"SyncStageConnectivityDelegate","text":"<p>Responsible for getting callbacks about users' connectivity in the session.</p> <pre><code>interface SyncStageConnectivityDelegate {\n    fun transmitterConnectivityChanged(connected: Boolean)\n    fun receiverConnectivityChanged(identifier: String, connected: Boolean)\n}\n</code></pre>"},{"location":"android/versions/0.4.0/sdk-delegates/#syncstagediscoverydelegate","title":"SyncStageDiscoveryDelegate","text":"<p>Responsible for getting callbacks about available zones latency.</p> <pre><code>interface SyncStageDiscoveryDelegate {\n    fun discoveryResults(zones: List&lt;String&gt;)\n    fun discoveryLatencyTestResults(zoneLatencyMap: Map&lt;String, Int&gt;)\n}\n</code></pre> <p>The key of <code>zoneLatencyMap</code> is zoneId, and the value is latency represented in miliseconds.</p>"},{"location":"android/versions/0.4.0/sdk-error-codes/","title":"Error codes","text":""},{"location":"android/versions/0.4.0/sdk-error-codes/#040","title":"0.4.0","text":"<p>Most of the SDK methods return SyncStageSDKErrorCode which can be decoded using following enum class.</p> <pre><code>enum class SyncStageSDKErrorCode(val errorCode: Int) {\n    UNKNOWN_ERROR(-1),\n    OK(0),\n    CONFIGURATION_ERROR(1),\n    API_ERROR(2),\n    API_UNAUTHORIZED(3),\n    AUDIO_STREAMING_ERROR(4),\n    STREAM_DOES_NOT_EXIST(5),\n    BAD_VOLUME_VALUE(6),\n    SESSION_NOT_JOINED(7),\n    AUDIO_SERVER_NOT_REACHABLE(8),\n}\n</code></pre>"},{"location":"android/versions/0.4.0/sdk-methods/","title":"Methods","text":""},{"location":"android/versions/0.4.0/sdk-methods/#040","title":"0.4.0","text":""},{"location":"android/versions/0.4.0/sdk-methods/#constructor","title":"Constructor","text":"<pre><code>SyncStage(\n        private val ctx: Context,\n        var userDelegate: SyncStageUserDelegate? = null,\n        var connectivityDelegate: SyncStageConnectivityDelegate? = null\n    )\n</code></pre> <p>Constructor parameters:</p> <ul> <li> <p><code>ctx</code> - Android application context</p> </li> <li> <p><code>userDelegate</code> - delegate object to receive events about users in session state</p> </li> <li> <p><code>connectivityDelegate</code> - delegate object to receive events with information about stream connection to Studio Server state</p> </li> </ul>"},{"location":"android/versions/0.4.0/sdk-methods/#initialize","title":"Initialize","text":"<p>Initializes the SDK SyncStage object.</p> <pre><code>fun init(\n        applicationSecretKey: String? = null,\n        onCompleted: (errorCode: SyncStageSDKErrorCode) -&gt; Unit = {},\n    )\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>applicationSecretKey</code> - if set to null, SDK will look for applicationSecretKey in the SyncStageSecret.json file</p> </li> <li> <p><code>onCompleted</code> - callback informing about the result of initialization with <code>SyncStageSDKErrorCode</code></p> </li> </ul>"},{"location":"android/versions/0.4.0/sdk-methods/#get-syncstage-sdk-version","title":"Get SyncStage SDK version","text":"<p>Gets SyncStage SDK version</p> <pre><code>fun getSDKVersion(): String\n</code></pre>"},{"location":"android/versions/0.4.0/sdk-methods/#get-best-available-server","title":"Get best available server","text":"<p>Get best available server, where a session can be created</p> <pre><code>suspend fun getBestAvailableServer(): Pair&lt;ServerInstance?, SyncStageSDKErrorCode&gt;\n</code></pre>"},{"location":"android/versions/0.4.0/sdk-methods/#get-server-instances","title":"Get server instances","text":"<p>Get server instances so you can select the server that is suitable for your session.</p> <pre><code>suspend fun getServerInstances(): Pair&lt;List&lt;ServerInstance&gt;?, SyncStageSDKErrorCode&gt; \n</code></pre>"},{"location":"android/versions/0.4.0/sdk-methods/#create-a-session","title":"Create a session","text":"<p>Creates a session in a given zone by a given user from your user pool.</p> <pre><code>suspend fun createSession(\n    zoneId: String,\n    studioServerId: String,\n    userId: String\n): Pair&lt;SessionIdentifier?, SyncStageSDKErrorCode&gt;\n</code></pre> <p>Parameters:</p> <ul> <li><code>zoneId</code> - zone in which we want to host our session</li> <li><code>studioServerId</code> - id of the selected studio server</li> <li><code>userId</code> - id of your app user to match the data between SyncStage and your backend</li> </ul>"},{"location":"android/versions/0.4.0/sdk-methods/#join-the-session","title":"Join the session","text":"<p>Joins a particular session identified by <code>sessionCode</code>.</p> <pre><code>suspend fun join(\n    sessionCode: String,\n    userId: String,\n    displayName: String? = null,\n    zoneId: String,\n    studioServerId: String,\n): Pair&lt;Session?, SyncStageSDKErrorCode&gt; \n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>sessionCode</code> - the session code</p> </li> <li> <p><code>userId</code> - id of your app user to match de data between SyncStage and your backend</p> </li> <li> <p><code>displayName</code> - your app user display name</p> </li> <li> <p><code>zoneId</code> - zone in which your session is hosted</p> </li> <li> <p><code>studioServerId</code> - studio server where you are running your session</p> </li> </ul>"},{"location":"android/versions/0.4.0/sdk-methods/#get-session-state","title":"Get session state","text":"<p>Gets state of currently joined session.</p> <pre><code>session(completion: @escaping (Result&lt;Session, SyncStageError&gt;)\n</code></pre> <p>Parameters:</p> <ul> <li><code>completion</code> - returns session state</li> </ul>"},{"location":"android/versions/0.4.0/sdk-methods/#leave-the-session","title":"Leave the session","text":"<p>Leaves currently joined session.</p> <pre><code>suspend fun leave(): SyncStageSDKErrorCode\n</code></pre>"},{"location":"android/versions/0.4.0/sdk-methods/#mute-unmute-microphone","title":"Mute / unmute microphone","text":"<p>Enables or disables microphone stream.</p> <pre><code>fun toggleMicrophone(mute: Boolean): SyncStageSDKErrorCode \n</code></pre> <p>Parameters:</p> <ul> <li><code>mute</code>- desired state of the mute option</li> </ul>"},{"location":"android/versions/0.4.0/sdk-methods/#is-muted","title":"Is muted","text":"<p>Returns state of microphone stream.</p> <pre><code>fun isMicrophoneMuted(): Boolean\n</code></pre>"},{"location":"android/versions/0.4.0/sdk-methods/#turn-on-of-direct-monitor","title":"Turn on / of direct monitor","text":"<p>Turns on / of direct monitor.</p> <pre><code>fun toggleDirectMonitor(enable: Boolean): SyncStageSDKErrorCode\n</code></pre> <p>Parameters:</p> <ul> <li><code>enable</code>- <code>true</code> for turning on direct monitor</li> </ul>"},{"location":"android/versions/0.4.0/sdk-methods/#get-direct-monitor-volume","title":"Get direct monitor volume","text":"<p>Returns current direct monitor volume.</p> <pre><code>fun getDirectMonitorVolume(): Int\n</code></pre>"},{"location":"android/versions/0.4.0/sdk-methods/#change-direct-monitor-volume","title":"Change direct monitor volume","text":"<p>Changes volume of the direct monitor.</p> <pre><code>fun changeDirectMonitorVolume(volume: Int): SyncStageSDKErrorCode \n</code></pre> <p>Parameters:</p> <ul> <li><code>volume</code>- value from range [0;100]</li> </ul>"},{"location":"android/versions/0.4.0/sdk-methods/#get-direct-monitor-state","title":"Get direct monitor state","text":"<p>Gets direct monitor enabled state</p> <pre><code>fun getDirectMonitorEnabled(): Boolean\n</code></pre>"},{"location":"android/versions/0.4.0/sdk-methods/#turn-on-of-internal-microphone","title":"Turn on / of internal microphone","text":"<p>Turns on / of internal microphone to be used instead of default audio input i.e. headphones mic.</p> <pre><code>fun toggleInternalMic(enable: Boolean): SyncStageSDKErrorCode\n</code></pre> <p>Parameters:</p> <ul> <li><code>enable</code>- <code>true</code> for turning on internal microphone</li> </ul>"},{"location":"android/versions/0.4.0/sdk-methods/#get-internal-microphone-state","title":"Get internal microphone state","text":"<p>Gets internal microphone enabled state</p> <pre><code>fun getInternalMicEnabled(): Boolean\n</code></pre>"},{"location":"android/versions/0.4.0/sdk-methods/#get-receiver-network-measurements","title":"Get receiver network measurements","text":"<p>Returns Mesurements object with network delay, jitter, and calculated network quality indicators.</p> <pre><code>fun getReceiverMeasurements(identifier: String): Measurements\n</code></pre> <p>Parameters:</p> <ul> <li><code>identifier</code>- receiver's identifier</li> </ul>"},{"location":"android/versions/0.4.0/sdk-methods/#get-transmitter-network-measurements","title":"Get transmitter network measurements","text":"<p>Returns Mesurements object with network delay, jitter, and calculated network quality indicators.</p> <pre><code>fun getTransmitterMeasurements(): Measurements\n</code></pre>"},{"location":"android/versions/0.4.0/sdk-methods/#stop-and-dispose","title":"Stop and dispose","text":"<p>This method stops and cleans up all background tasks SDK performs. </p> <pre><code>fun stop()\n</code></pre> <p>Warning</p> <p>It is crucial to call it onDestroy of the Activity where SyncStage has been initialized in.</p> <pre><code>    override fun onDestroy() {\n        if (isFinishing) {\n            syncStage.stop()\n        }\n        super.onDestroy()\n    }\n</code></pre>"},{"location":"android/versions/0.4.1/sdk-delegates/","title":"Delegates","text":""},{"location":"android/versions/0.4.1/sdk-delegates/#041","title":"0.4.1","text":"<p>SyncStage class provide two delegates: <code>SyncStageUserDelegate</code> and <code>SyncStageConnectivityDelegate</code> which provide a set of callbacks to inform your application about asynchronous events from the SyncStage. You can define those object and provide to the SyncStage constructor or update public SyncStage properties <code>userDelegate</code> and <code>connectivityDelegate</code> anytime.</p>"},{"location":"android/versions/0.4.1/sdk-delegates/#syncstageuserdelegate","title":"SyncStageUserDelegate","text":"<p>Responsible for getting callbacks about users' state in the session.</p> <pre><code>interface SyncStageUserDelegate {\n    fun userJoined(connection: Connection)\n    fun userLeft(identifier: String)\n    fun userMuted(identifier: String)\n    fun userUnmuted(identifier: String)\n    fun sessionOut()\n}\n</code></pre>"},{"location":"android/versions/0.4.1/sdk-delegates/#syncstageconnectivitydelegate","title":"SyncStageConnectivityDelegate","text":"<p>Responsible for getting callbacks about users' connectivity in the session.</p> <pre><code>interface SyncStageConnectivityDelegate {\n    fun transmitterConnectivityChanged(connected: Boolean)\n    fun receiverConnectivityChanged(identifier: String, connected: Boolean)\n}\n</code></pre>"},{"location":"android/versions/0.4.1/sdk-delegates/#syncstagediscoverydelegate","title":"SyncStageDiscoveryDelegate","text":"<p>Responsible for getting callbacks about available zones latency.</p> <pre><code>interface SyncStageDiscoveryDelegate {\n    fun discoveryResults(zones: List&lt;String&gt;)\n    fun discoveryLatencyTestResults(zoneLatencyMap: Map&lt;String, Int&gt;)\n}\n</code></pre> <p>The key of <code>zoneLatencyMap</code> is zoneId, and the value is latency represented in miliseconds.</p>"},{"location":"android/versions/0.4.1/sdk-error-codes/","title":"Error codes","text":""},{"location":"android/versions/0.4.1/sdk-error-codes/#041","title":"0.4.1","text":"<p>Most of the SDK methods return SyncStageSDKErrorCode which can be decoded using following enum class.</p> <pre><code>enum class SyncStageSDKErrorCode(val errorCode: Int) {\n    UNKNOWN_ERROR(-1),\n    OK(0),\n    CONFIGURATION_ERROR(1),\n    API_ERROR(2),\n    API_UNAUTHORIZED(3),\n    AUDIO_STREAMING_ERROR(4),\n    STREAM_DOES_NOT_EXIST(5),\n    BAD_VOLUME_VALUE(6),\n    SESSION_NOT_JOINED(7),\n    AUDIO_SERVER_NOT_REACHABLE(8),\n}\n</code></pre>"},{"location":"android/versions/0.4.1/sdk-methods/","title":"Methods","text":""},{"location":"android/versions/0.4.1/sdk-methods/#041","title":"0.4.1","text":""},{"location":"android/versions/0.4.1/sdk-methods/#constructor","title":"Constructor","text":"<pre><code>SyncStage(\n        private val ctx: Context,\n        var userDelegate: SyncStageUserDelegate? = null,\n        var connectivityDelegate: SyncStageConnectivityDelegate? = null\n    )\n</code></pre> <p>Constructor parameters:</p> <ul> <li> <p><code>ctx</code> - Android application context</p> </li> <li> <p><code>userDelegate</code> - delegate object to receive events about users in session state</p> </li> <li> <p><code>connectivityDelegate</code> - delegate object to receive events with information about stream connection to Studio Server state</p> </li> </ul>"},{"location":"android/versions/0.4.1/sdk-methods/#initialize","title":"Initialize","text":"<p>Initializes the SDK SyncStage object.</p> <pre><code>fun init(\n        applicationSecretKey: String? = null,\n        onCompleted: (errorCode: SyncStageSDKErrorCode) -&gt; Unit = {},\n    )\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>applicationSecretKey</code> - if set to null, SDK will look for applicationSecretKey in the SyncStageSecret.json file</p> </li> <li> <p><code>onCompleted</code> - callback informing about the result of initialization with <code>SyncStageSDKErrorCode</code></p> </li> </ul>"},{"location":"android/versions/0.4.1/sdk-methods/#get-syncstage-sdk-version","title":"Get SyncStage SDK version","text":"<p>Gets SyncStage SDK version</p> <pre><code>fun getSDKVersion(): String\n</code></pre>"},{"location":"android/versions/0.4.1/sdk-methods/#get-best-available-server","title":"Get best available server","text":"<p>Get best available server, where a session can be created</p> <pre><code>suspend fun getBestAvailableServer(): Pair&lt;ServerInstance?, SyncStageSDKErrorCode&gt;\n</code></pre>"},{"location":"android/versions/0.4.1/sdk-methods/#get-server-instances","title":"Get server instances","text":"<p>Get server instances so you can select the server that is suitable for your session.</p> <pre><code>suspend fun getServerInstances(): Pair&lt;List&lt;ServerInstance&gt;?, SyncStageSDKErrorCode&gt; \n</code></pre>"},{"location":"android/versions/0.4.1/sdk-methods/#create-a-session","title":"Create a session","text":"<p>Creates a session in a given zone by a given user from your user pool.</p> <pre><code>suspend fun createSession(\n    zoneId: String,\n    studioServerId: String,\n    userId: String\n): Pair&lt;SessionIdentifier?, SyncStageSDKErrorCode&gt;\n</code></pre> <p>Parameters:</p> <ul> <li><code>zoneId</code> - zone in which we want to host our session</li> <li><code>studioServerId</code> - id of the selected studio server</li> <li><code>userId</code> - id of your app user to match the data between SyncStage and your backend</li> </ul>"},{"location":"android/versions/0.4.1/sdk-methods/#join-the-session","title":"Join the session","text":"<p>Joins a particular session identified by <code>sessionCode</code>.</p> <pre><code>suspend fun join(\n    sessionCode: String,\n    userId: String,\n    displayName: String? = null,\n    zoneId: String,\n    studioServerId: String,\n): Pair&lt;Session?, SyncStageSDKErrorCode&gt; \n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>sessionCode</code> - the session code</p> </li> <li> <p><code>userId</code> - id of your app user to match de data between SyncStage and your backend</p> </li> <li> <p><code>displayName</code> - your app user display name</p> </li> <li> <p><code>zoneId</code> - zone in which your session is hosted</p> </li> <li> <p><code>studioServerId</code> - studio server where you are running your session</p> </li> </ul>"},{"location":"android/versions/0.4.1/sdk-methods/#get-session-state","title":"Get session state","text":"<p>Gets state of currently joined session.</p> <pre><code>session(completion: @escaping (Result&lt;Session, SyncStageError&gt;)\n</code></pre> <p>Parameters:</p> <ul> <li><code>completion</code> - returns session state</li> </ul>"},{"location":"android/versions/0.4.1/sdk-methods/#leave-the-session","title":"Leave the session","text":"<p>Leaves currently joined session.</p> <pre><code>suspend fun leave(): SyncStageSDKErrorCode\n</code></pre>"},{"location":"android/versions/0.4.1/sdk-methods/#mute-unmute-microphone","title":"Mute / unmute microphone","text":"<p>Enables or disables microphone stream.</p> <pre><code>fun toggleMicrophone(mute: Boolean): SyncStageSDKErrorCode \n</code></pre> <p>Parameters:</p> <ul> <li><code>mute</code>- desired state of the mute option</li> </ul>"},{"location":"android/versions/0.4.1/sdk-methods/#is-muted","title":"Is muted","text":"<p>Returns state of microphone stream.</p> <pre><code>fun isMicrophoneMuted(): Boolean\n</code></pre>"},{"location":"android/versions/0.4.1/sdk-methods/#turn-on-of-direct-monitor","title":"Turn on / of direct monitor","text":"<p>Turns on / of direct monitor.</p> <pre><code>fun toggleDirectMonitor(enable: Boolean): SyncStageSDKErrorCode\n</code></pre> <p>Parameters:</p> <ul> <li><code>enable</code>- <code>true</code> for turning on direct monitor</li> </ul>"},{"location":"android/versions/0.4.1/sdk-methods/#get-direct-monitor-volume","title":"Get direct monitor volume","text":"<p>Returns current direct monitor volume.</p> <pre><code>fun getDirectMonitorVolume(): Int\n</code></pre>"},{"location":"android/versions/0.4.1/sdk-methods/#change-direct-monitor-volume","title":"Change direct monitor volume","text":"<p>Changes volume of the direct monitor.</p> <pre><code>fun changeDirectMonitorVolume(volume: Int): SyncStageSDKErrorCode \n</code></pre> <p>Parameters:</p> <ul> <li><code>volume</code>- value from range [0;100]</li> </ul>"},{"location":"android/versions/0.4.1/sdk-methods/#get-direct-monitor-state","title":"Get direct monitor state","text":"<p>Gets direct monitor enabled state</p> <pre><code>fun getDirectMonitorEnabled(): Boolean\n</code></pre>"},{"location":"android/versions/0.4.1/sdk-methods/#turn-on-of-internal-microphone","title":"Turn on / of internal microphone","text":"<p>Turns on / of internal microphone to be used instead of default audio input i.e. headphones mic.</p> <pre><code>fun toggleInternalMic(enable: Boolean): SyncStageSDKErrorCode\n</code></pre> <p>Parameters:</p> <ul> <li><code>enable</code>- <code>true</code> for turning on internal microphone</li> </ul>"},{"location":"android/versions/0.4.1/sdk-methods/#get-internal-microphone-state","title":"Get internal microphone state","text":"<p>Gets internal microphone enabled state</p> <pre><code>fun getInternalMicEnabled(): Boolean\n</code></pre>"},{"location":"android/versions/0.4.1/sdk-methods/#get-receiver-network-measurements","title":"Get receiver network measurements","text":"<p>Returns Mesurements object with network delay, jitter, and calculated network quality indicators.</p> <pre><code>fun getReceiverMeasurements(identifier: String): Measurements\n</code></pre> <p>Parameters:</p> <ul> <li><code>identifier</code>- receiver's identifier</li> </ul>"},{"location":"android/versions/0.4.1/sdk-methods/#get-transmitter-network-measurements","title":"Get transmitter network measurements","text":"<p>Returns Mesurements object with network delay, jitter, and calculated network quality indicators.</p> <pre><code>fun getTransmitterMeasurements(): Measurements\n</code></pre>"},{"location":"android/versions/0.4.1/sdk-methods/#stop-and-dispose","title":"Stop and dispose","text":"<p>This method stops and cleans up all background tasks SDK performs. </p> <pre><code>fun stop()\n</code></pre> <p>Warning</p> <p>It is crucial to call it onDestroy of the Activity where SyncStage has been initialized in.</p> <pre><code>    override fun onDestroy() {\n        if (isFinishing) {\n            syncStage.stop()\n        }\n        super.onDestroy()\n    }\n</code></pre>"},{"location":"android/versions/0.5.0/sdk-delegates/","title":"Delegates","text":""},{"location":"android/versions/0.5.0/sdk-delegates/#050","title":"0.5.0","text":"<p>SyncStage class provide two delegates: <code>SyncStageUserDelegate</code> and <code>SyncStageConnectivityDelegate</code> which provide a set of callbacks to inform your application about asynchronous events from the SyncStage. You can define those object and provide to the SyncStage constructor or update public SyncStage properties <code>userDelegate</code> and <code>connectivityDelegate</code> anytime.</p>"},{"location":"android/versions/0.5.0/sdk-delegates/#syncstageuserdelegate","title":"SyncStageUserDelegate","text":"<p>Responsible for getting callbacks about users' state in the session.</p> <pre><code>interface SyncStageUserDelegate {\n    // called when a user joins a session\n    fun userJoined(connection: Connection)\n    // called when a user leaves a session\n    fun userLeft(identifier: String)\n    // called when a user mutes himself\n    fun userMuted(identifier: String)\n    // called when a user unmutes himself\n    fun userUnmuted(identifier: String)\n    // called when session recording started\n    fun sessionRecordingStarted()\n    // called when session recording stopped\n    fun sessionRecordingStopped()\n    // called when the your application lose connectivity with Studio Server, after a while user will be dismissed from the session\n    fun sessionOut()\n}\n</code></pre>"},{"location":"android/versions/0.5.0/sdk-delegates/#syncstageconnectivitydelegate","title":"SyncStageConnectivityDelegate","text":"<p>Responsible for getting callbacks about users' connectivity in the session.</p> <pre><code>interface SyncStageConnectivityDelegate {\n    // called when user loses partial connectivity as a transmitter or when get recover.\n    fun transmitterConnectivityChanged(connected: Boolean)\n    // called when the receiver loses partial connectivity for a specific user or when it recovers\n    fun receiverConnectivityChanged(identifier: String, connected: Boolean)\n}\n</code></pre>"},{"location":"android/versions/0.5.0/sdk-delegates/#syncstagediscoverydelegate","title":"SyncStageDiscoveryDelegate","text":"<p>Responsible for getting callbacks about available zones latency.</p> <pre><code>interface SyncStageDiscoveryDelegate {\n    fun discoveryResults(zones: List&lt;String&gt;)\n    fun discoveryLatencyTestResults(zoneLatencyMap: Map&lt;String, Int&gt;)\n}\n</code></pre> <p>The key of <code>zoneLatencyMap</code> is zoneId, and the value is latency represented in miliseconds.</p>"},{"location":"android/versions/0.5.0/sdk-error-codes/","title":"Error codes","text":""},{"location":"android/versions/0.5.0/sdk-error-codes/#050","title":"0.5.0","text":"<p>Most of the SDK methods return SyncStageSDKErrorCode which can be decoded using following enum class.</p> <pre><code>enum class SyncStageSDKErrorCode(val errorCode: Int) {\n    UNKNOWN_ERROR(-1),\n    OK(0),\n    CONFIGURATION_ERROR(1),\n    API_ERROR(2),\n    API_UNAUTHORIZED(3),\n    AUDIO_STREAMING_ERROR(4),\n    STREAM_DOES_NOT_EXIST(5),\n    BAD_VOLUME_VALUE(6),\n    SESSION_NOT_JOINED(7),\n    AUDIO_SERVER_NOT_REACHABLE(8),\n}\n</code></pre>"},{"location":"android/versions/0.5.0/sdk-methods/","title":"Methods","text":""},{"location":"android/versions/0.5.0/sdk-methods/#050","title":"0.5.0","text":""},{"location":"android/versions/0.5.0/sdk-methods/#general","title":"General","text":""},{"location":"android/versions/0.5.0/sdk-methods/#constructor","title":"Constructor","text":"<pre><code>SyncStage(\n        private val ctx: Context,\n        var userDelegate: SyncStageUserDelegate? = null,\n        var connectivityDelegate: SyncStageConnectivityDelegate? = null\n    )\n</code></pre> <p>Constructor parameters:</p> <ul> <li> <p><code>ctx</code> - Android application context</p> </li> <li> <p><code>userDelegate</code> - delegate object to receive events about users in session state</p> </li> <li> <p><code>connectivityDelegate</code> - delegate object to receive events with information about stream connection to Studio Server state</p> </li> </ul>"},{"location":"android/versions/0.5.0/sdk-methods/#initialize","title":"Initialize","text":"<p>Initializes the SDK SyncStage object.</p> <pre><code>fun init(\n        applicationSecretKey: String? = null,\n        onCompleted: (errorCode: SyncStageSDKErrorCode) -&gt; Unit = {},\n    )\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>applicationSecretKey</code> - if set to null, SDK will look for applicationSecretKey in the SyncStageSecret.json file</p> </li> <li> <p><code>onCompleted</code> - callback informing about the result of initialization with <code>SyncStageSDKErrorCode</code></p> </li> </ul>"},{"location":"android/versions/0.5.0/sdk-methods/#stop-and-dispose","title":"Stop and dispose","text":"<p>This method stops and cleans up all background tasks SDK performs. </p> <pre><code>fun stop()\n</code></pre> <p>Note</p> <p>It is crucial to call it onDestroy of the Activity where SyncStage has been initialized in.</p> <pre><code>    override fun onDestroy() {\n        if (isFinishing) {\n            syncStage.stop()\n        }\n        super.onDestroy()\n    }\n</code></pre>"},{"location":"android/versions/0.5.0/sdk-methods/#get-syncstage-sdk-version","title":"Get SyncStage SDK version","text":"<p>Gets SyncStage SDK version</p> <pre><code>fun getSDKVersion(): String\n</code></pre>"},{"location":"android/versions/0.5.0/sdk-methods/#get-best-available-server","title":"Get best available server","text":"<p>Get best available server, where a session can be created</p> <pre><code>suspend fun getBestAvailableServer(): Pair&lt;ServerInstance?, SyncStageSDKErrorCode&gt;\n</code></pre>"},{"location":"android/versions/0.5.0/sdk-methods/#get-server-instances","title":"Get server instances","text":"<p>Get server instances so you can select the server that is suitable for your session.</p> <pre><code>suspend fun getServerInstances(): Pair&lt;List&lt;ServerInstance&gt;?, SyncStageSDKErrorCode&gt; \n</code></pre>"},{"location":"android/versions/0.5.0/sdk-methods/#session","title":"Session","text":""},{"location":"android/versions/0.5.0/sdk-methods/#create-a-session","title":"Create a session","text":"<p>Creates a session in a given zone by a given user from your user pool.</p> <pre><code>suspend fun createSession(\n    zoneId: String,\n    studioServerId: String,\n    userId: String\n): Pair&lt;SessionIdentifier?, SyncStageSDKErrorCode&gt;\n</code></pre> <p>Parameters:</p> <ul> <li><code>zoneId</code> - zone in which we want to host our session</li> <li><code>studioServerId</code> - id of the selected studio server</li> <li><code>userId</code> - id of your app user to match the data between SyncStage and your backend</li> </ul>"},{"location":"android/versions/0.5.0/sdk-methods/#join-the-session","title":"Join the session","text":"<p>Joins a particular session identified by <code>sessionCode</code>.</p> <pre><code>suspend fun join(\n    sessionCode: String,\n    userId: String,\n    displayName: String? = null,\n    zoneId: String,\n    studioServerId: String,\n): Pair&lt;Session?, SyncStageSDKErrorCode&gt; \n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>sessionCode</code> - the session code</p> </li> <li> <p><code>userId</code> - id of your app user to match de data between SyncStage and your backend</p> </li> <li> <p><code>displayName</code> - your app user display name</p> </li> <li> <p><code>zoneId</code> - zone in which your session is hosted</p> </li> <li> <p><code>studioServerId</code> - studio server where you are running your session</p> </li> </ul>"},{"location":"android/versions/0.5.0/sdk-methods/#get-session-state","title":"Get session state","text":"<p>Gets state of currently joined session.</p> <pre><code>session(completion: @escaping (Result&lt;Session, SyncStageError&gt;)\n</code></pre> <p>Parameters:</p> <ul> <li><code>completion</code> - returns session state</li> </ul>"},{"location":"android/versions/0.5.0/sdk-methods/#leave-the-session","title":"Leave the session","text":"<p>Leaves currently joined session.</p> <pre><code>suspend fun leave(): SyncStageSDKErrorCode\n</code></pre>"},{"location":"android/versions/0.5.0/sdk-methods/#audio-setup","title":"Audio setup","text":""},{"location":"android/versions/0.5.0/sdk-methods/#mute-unmute-microphone","title":"Mute / unmute microphone","text":"<p>Enables or disables microphone stream.</p> <pre><code>fun toggleMicrophone(mute: Boolean): SyncStageSDKErrorCode \n</code></pre> <p>Parameters:</p> <ul> <li><code>mute</code>- desired state of the mute option</li> </ul>"},{"location":"android/versions/0.5.0/sdk-methods/#is-muted","title":"Is muted","text":"<p>Returns state of microphone stream.</p> <pre><code>fun isMicrophoneMuted(): Boolean\n</code></pre>"},{"location":"android/versions/0.5.0/sdk-methods/#turn-on-of-direct-monitor","title":"Turn on / of direct monitor","text":"<p>Turns on / of direct monitor.</p> <pre><code>fun toggleDirectMonitor(enable: Boolean): SyncStageSDKErrorCode\n</code></pre> <p>Parameters:</p> <ul> <li><code>enable</code>- <code>true</code> for turning on direct monitor</li> </ul>"},{"location":"android/versions/0.5.0/sdk-methods/#get-direct-monitor-volume","title":"Get direct monitor volume","text":"<p>Returns current direct monitor volume.</p> <pre><code>fun getDirectMonitorVolume(): Int\n</code></pre>"},{"location":"android/versions/0.5.0/sdk-methods/#change-direct-monitor-volume","title":"Change direct monitor volume","text":"<p>Changes volume of the direct monitor.</p> <pre><code>fun changeDirectMonitorVolume(volume: Int): SyncStageSDKErrorCode \n</code></pre> <p>Parameters:</p> <ul> <li><code>volume</code>- value from range [0;100]</li> </ul>"},{"location":"android/versions/0.5.0/sdk-methods/#get-direct-monitor-state","title":"Get direct monitor state","text":"<p>Gets direct monitor enabled state</p> <pre><code>fun getDirectMonitorEnabled(): Boolean\n</code></pre>"},{"location":"android/versions/0.5.0/sdk-methods/#turn-on-of-internal-microphone","title":"Turn on / of internal microphone","text":"<p>Turns on / of internal microphone to be used instead of default audio input i.e. headphones mic.</p> <pre><code>fun toggleInternalMic(enable: Boolean): SyncStageSDKErrorCode\n</code></pre> <p>Parameters:</p> <ul> <li><code>enable</code>- <code>true</code> for turning on internal microphone</li> </ul>"},{"location":"android/versions/0.5.0/sdk-methods/#get-internal-microphone-state","title":"Get internal microphone state","text":"<p>Gets internal microphone enabled state</p> <pre><code>fun getInternalMicEnabled(): Boolean\n</code></pre>"},{"location":"android/versions/0.5.0/sdk-methods/#network-measurements","title":"Network measurements","text":""},{"location":"android/versions/0.5.0/sdk-methods/#get-receiver-network-measurements","title":"Get receiver network measurements","text":"<p>Returns Mesurements object with network delay, jitter, and calculated network quality indicators.</p> <pre><code>fun getReceiverMeasurements(identifier: String): Measurements\n</code></pre> <p>Parameters:</p> <ul> <li><code>identifier</code>- receiver's identifier</li> </ul>"},{"location":"android/versions/0.5.0/sdk-methods/#get-transmitter-network-measurements","title":"Get transmitter network measurements","text":"<p>Returns Mesurements object with network delay, jitter, and calculated network quality indicators.</p> <pre><code>fun getTransmitterMeasurements(): Measurements\n</code></pre>"},{"location":"android/versions/0.5.0/sdk-methods/#session-recording","title":"Session recording","text":""},{"location":"android/versions/0.5.0/sdk-methods/#start-recording","title":"Start recording","text":"<pre><code>fun startRecording(): SyncStageSDKErrorCode\n</code></pre>"},{"location":"android/versions/0.5.0/sdk-methods/#stop-recording","title":"Stop recording","text":"<pre><code>fun stopRecording(): SyncStageSDKErrorCode\n</code></pre>"},{"location":"android/versions/0.5.1/sdk-delegates/","title":"Delegates","text":""},{"location":"android/versions/0.5.1/sdk-delegates/#051","title":"0.5.1","text":"<p>SyncStage class provide two delegates: <code>SyncStageUserDelegate</code> and <code>SyncStageConnectivityDelegate</code> which provide a set of callbacks to inform your application about asynchronous events from the SyncStage. You can define those object and provide to the SyncStage constructor or update public SyncStage properties <code>userDelegate</code> and <code>connectivityDelegate</code> anytime.</p>"},{"location":"android/versions/0.5.1/sdk-delegates/#syncstageuserdelegate","title":"SyncStageUserDelegate","text":"<p>Responsible for getting callbacks about users' state in the session.</p> <pre><code>interface SyncStageUserDelegate {\n    // called when a user joins a session\n    fun userJoined(connection: Connection)\n    // called when a user leaves a session\n    fun userLeft(identifier: String)\n    // called when a user mutes himself\n    fun userMuted(identifier: String)\n    // called when a user unmutes himself\n    fun userUnmuted(identifier: String)\n    // called when session recording started\n    fun sessionRecordingStarted()\n    // called when session recording stopped\n    fun sessionRecordingStopped()\n    // called when the your application lose connectivity with Studio Server, after a while user will be dismissed from the session\n    fun sessionOut()\n}\n</code></pre>"},{"location":"android/versions/0.5.1/sdk-delegates/#syncstageconnectivitydelegate","title":"SyncStageConnectivityDelegate","text":"<p>Responsible for getting callbacks about users' connectivity in the session.</p> <pre><code>interface SyncStageConnectivityDelegate {\n    // called when user loses partial connectivity as a transmitter or when get recover.\n    fun transmitterConnectivityChanged(connected: Boolean)\n    // called when the receiver loses partial connectivity for a specific user or when it recovers\n    fun receiverConnectivityChanged(identifier: String, connected: Boolean)\n}\n</code></pre>"},{"location":"android/versions/0.5.1/sdk-delegates/#syncstagediscoverydelegate","title":"SyncStageDiscoveryDelegate","text":"<p>Responsible for getting callbacks about available zones latency.</p> <pre><code>interface SyncStageDiscoveryDelegate {\n    fun discoveryResults(zones: List&lt;String&gt;)\n    fun discoveryLatencyTestResults(zoneLatencyMap: Map&lt;String, Int&gt;)\n}\n</code></pre> <p>The key of <code>zoneLatencyMap</code> is zoneId, and the value is latency represented in miliseconds.</p>"},{"location":"android/versions/0.5.1/sdk-error-codes/","title":"Error codes","text":""},{"location":"android/versions/0.5.1/sdk-error-codes/#051","title":"0.5.1","text":"<p>Most of the SDK methods return SyncStageSDKErrorCode which can be decoded using following enum class.</p> <pre><code>enum class SyncStageSDKErrorCode(val errorCode: Int) {\n    UNKNOWN_ERROR(-1),\n    OK(0),\n    CONFIGURATION_ERROR(1),\n    API_ERROR(2),\n    API_UNAUTHORIZED(3),\n    AUDIO_STREAMING_ERROR(4),\n    STREAM_DOES_NOT_EXIST(5),\n    BAD_VOLUME_VALUE(6),\n    SESSION_NOT_JOINED(7),\n    AUDIO_SERVER_NOT_REACHABLE(8),\n}\n</code></pre>"},{"location":"android/versions/0.5.1/sdk-methods/","title":"Methods","text":""},{"location":"android/versions/0.5.1/sdk-methods/#051","title":"0.5.1","text":""},{"location":"android/versions/0.5.1/sdk-methods/#general","title":"General","text":""},{"location":"android/versions/0.5.1/sdk-methods/#constructor","title":"Constructor","text":"<pre><code>SyncStage(\n        private val ctx: Context,\n        var userDelegate: SyncStageUserDelegate? = null,\n        var connectivityDelegate: SyncStageConnectivityDelegate? = null\n    )\n</code></pre> <p>Constructor parameters:</p> <ul> <li> <p><code>ctx</code> - Android application context</p> </li> <li> <p><code>userDelegate</code> - delegate object to receive events about users in session state</p> </li> <li> <p><code>connectivityDelegate</code> - delegate object to receive events with information about stream connection to Studio Server state</p> </li> </ul>"},{"location":"android/versions/0.5.1/sdk-methods/#initialize","title":"Initialize","text":"<p>Initializes the SDK SyncStage object.</p> <pre><code>fun init(\n        applicationSecretKey: String? = null,\n        onCompleted: (errorCode: SyncStageSDKErrorCode) -&gt; Unit = {},\n    )\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>applicationSecretKey</code> - if set to null, SDK will look for applicationSecretKey in the SyncStageSecret.json file</p> </li> <li> <p><code>onCompleted</code> - callback informing about the result of initialization with <code>SyncStageSDKErrorCode</code></p> </li> </ul>"},{"location":"android/versions/0.5.1/sdk-methods/#stop-and-dispose","title":"Stop and dispose","text":"<p>This method stops and cleans up all background tasks SDK performs. </p> <pre><code>fun stop()\n</code></pre> <p>Note</p> <p>It is crucial to call it onDestroy of the Activity where SyncStage has been initialized in.</p> <pre><code>    override fun onDestroy() {\n        if (isFinishing) {\n            syncStage.stop()\n        }\n        super.onDestroy()\n    }\n</code></pre>"},{"location":"android/versions/0.5.1/sdk-methods/#get-syncstage-sdk-version","title":"Get SyncStage SDK version","text":"<p>Gets SyncStage SDK version</p> <pre><code>fun getSDKVersion(): String\n</code></pre>"},{"location":"android/versions/0.5.1/sdk-methods/#get-best-available-server","title":"Get best available server","text":"<p>Get best available server, where a session can be created</p> <pre><code>suspend fun getBestAvailableServer(): Pair&lt;ServerInstance?, SyncStageSDKErrorCode&gt;\n</code></pre>"},{"location":"android/versions/0.5.1/sdk-methods/#get-server-instances","title":"Get server instances","text":"<p>Get server instances so you can select the server that is suitable for your session.</p> <pre><code>suspend fun getServerInstances(): Pair&lt;List&lt;ServerInstance&gt;?, SyncStageSDKErrorCode&gt; \n</code></pre>"},{"location":"android/versions/0.5.1/sdk-methods/#session","title":"Session","text":""},{"location":"android/versions/0.5.1/sdk-methods/#create-a-session","title":"Create a session","text":"<p>Creates a session in a given zone by a given user from your user pool.</p> <pre><code>suspend fun createSession(\n    zoneId: String,\n    studioServerId: String,\n    userId: String\n): Pair&lt;SessionIdentifier?, SyncStageSDKErrorCode&gt;\n</code></pre> <p>Parameters:</p> <ul> <li><code>zoneId</code> - zone in which we want to host our session</li> <li><code>studioServerId</code> - id of the selected studio server</li> <li><code>userId</code> - id of your app user to match the data between SyncStage and your backend</li> </ul>"},{"location":"android/versions/0.5.1/sdk-methods/#join-the-session","title":"Join the session","text":"<p>Joins a particular session identified by <code>sessionCode</code>.</p> <pre><code>suspend fun join(\n    sessionCode: String,\n    userId: String,\n    displayName: String? = null,\n    zoneId: String,\n    studioServerId: String,\n): Pair&lt;Session?, SyncStageSDKErrorCode&gt; \n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>sessionCode</code> - the session code</p> </li> <li> <p><code>userId</code> - id of your app user to match de data between SyncStage and your backend</p> </li> <li> <p><code>displayName</code> - your app user display name</p> </li> <li> <p><code>zoneId</code> - zone in which your session is hosted</p> </li> <li> <p><code>studioServerId</code> - studio server where you are running your session</p> </li> </ul>"},{"location":"android/versions/0.5.1/sdk-methods/#get-session-state","title":"Get session state","text":"<p>Gets state of currently joined session.</p> <pre><code>session(completion: @escaping (Result&lt;Session, SyncStageError&gt;)\n</code></pre> <p>Parameters:</p> <ul> <li><code>completion</code> - returns session state</li> </ul>"},{"location":"android/versions/0.5.1/sdk-methods/#leave-the-session","title":"Leave the session","text":"<p>Leaves currently joined session.</p> <pre><code>suspend fun leave(): SyncStageSDKErrorCode\n</code></pre>"},{"location":"android/versions/0.5.1/sdk-methods/#audio-setup","title":"Audio setup","text":""},{"location":"android/versions/0.5.1/sdk-methods/#mute-unmute-microphone","title":"Mute / unmute microphone","text":"<p>Enables or disables microphone stream.</p> <pre><code>fun toggleMicrophone(mute: Boolean): SyncStageSDKErrorCode \n</code></pre> <p>Parameters:</p> <ul> <li><code>mute</code>- desired state of the mute option</li> </ul>"},{"location":"android/versions/0.5.1/sdk-methods/#is-muted","title":"Is muted","text":"<p>Returns state of microphone stream.</p> <pre><code>fun isMicrophoneMuted(): Boolean\n</code></pre>"},{"location":"android/versions/0.5.1/sdk-methods/#turn-on-of-direct-monitor","title":"Turn on / of direct monitor","text":"<p>Turns on / of direct monitor.</p> <pre><code>fun toggleDirectMonitor(enable: Boolean): SyncStageSDKErrorCode\n</code></pre> <p>Parameters:</p> <ul> <li><code>enable</code>- <code>true</code> for turning on direct monitor</li> </ul>"},{"location":"android/versions/0.5.1/sdk-methods/#get-direct-monitor-volume","title":"Get direct monitor volume","text":"<p>Returns current direct monitor volume.</p> <pre><code>fun getDirectMonitorVolume(): Int\n</code></pre>"},{"location":"android/versions/0.5.1/sdk-methods/#change-direct-monitor-volume","title":"Change direct monitor volume","text":"<p>Changes volume of the direct monitor.</p> <pre><code>fun changeDirectMonitorVolume(volume: Int): SyncStageSDKErrorCode \n</code></pre> <p>Parameters:</p> <ul> <li><code>volume</code>- value from range [0;100]</li> </ul>"},{"location":"android/versions/0.5.1/sdk-methods/#get-direct-monitor-state","title":"Get direct monitor state","text":"<p>Gets direct monitor enabled state</p> <pre><code>fun getDirectMonitorEnabled(): Boolean\n</code></pre>"},{"location":"android/versions/0.5.1/sdk-methods/#turn-on-of-internal-microphone","title":"Turn on / of internal microphone","text":"<p>Turns on / of internal microphone to be used instead of default audio input i.e. headphones mic.</p> <pre><code>fun toggleInternalMic(enable: Boolean): SyncStageSDKErrorCode\n</code></pre> <p>Parameters:</p> <ul> <li><code>enable</code>- <code>true</code> for turning on internal microphone</li> </ul>"},{"location":"android/versions/0.5.1/sdk-methods/#get-internal-microphone-state","title":"Get internal microphone state","text":"<p>Gets internal microphone enabled state</p> <pre><code>fun getInternalMicEnabled(): Boolean\n</code></pre>"},{"location":"android/versions/0.5.1/sdk-methods/#network-measurements","title":"Network measurements","text":""},{"location":"android/versions/0.5.1/sdk-methods/#get-receiver-network-measurements","title":"Get receiver network measurements","text":"<p>Returns Mesurements object with network delay, jitter, and calculated network quality indicators.</p> <pre><code>fun getReceiverMeasurements(identifier: String): Measurements\n</code></pre> <p>Parameters:</p> <ul> <li><code>identifier</code>- receiver's identifier</li> </ul>"},{"location":"android/versions/0.5.1/sdk-methods/#get-transmitter-network-measurements","title":"Get transmitter network measurements","text":"<p>Returns Mesurements object with network delay, jitter, and calculated network quality indicators.</p> <pre><code>fun getTransmitterMeasurements(): Measurements\n</code></pre>"},{"location":"android/versions/0.5.1/sdk-methods/#session-recording","title":"Session recording","text":""},{"location":"android/versions/0.5.1/sdk-methods/#start-recording","title":"Start recording","text":"<pre><code>fun startRecording(): SyncStageSDKErrorCode\n</code></pre>"},{"location":"android/versions/0.5.1/sdk-methods/#stop-recording","title":"Stop recording","text":"<pre><code>fun stopRecording(): SyncStageSDKErrorCode\n</code></pre>"},{"location":"android/versions/0.5.2/sdk-delegates/","title":"Delegates","text":""},{"location":"android/versions/0.5.2/sdk-delegates/#052","title":"0.5.2","text":"<p>SyncStage class provide two delegates: <code>SyncStageUserDelegate</code> and <code>SyncStageConnectivityDelegate</code> which provide a set of callbacks to inform your application about asynchronous events from the SyncStage. You can define those object and provide to the SyncStage constructor or update public SyncStage properties <code>userDelegate</code> and <code>connectivityDelegate</code> anytime.</p>"},{"location":"android/versions/0.5.2/sdk-delegates/#syncstageuserdelegate","title":"SyncStageUserDelegate","text":"<p>Responsible for getting callbacks about users' state in the session.</p> <pre><code>interface SyncStageUserDelegate {\n    // called when a user joins a session\n    fun userJoined(connection: Connection)\n    // called when a user leaves a session\n    fun userLeft(identifier: String)\n    // called when a user mutes himself\n    fun userMuted(identifier: String)\n    // called when a user unmutes himself\n    fun userUnmuted(identifier: String)\n    // called when session recording started\n    fun sessionRecordingStarted()\n    // called when session recording stopped\n    fun sessionRecordingStopped()\n    // called when the your application lose connectivity with Studio Server, after a while user will be dismissed from the session\n    fun sessionOut()\n}\n</code></pre>"},{"location":"android/versions/0.5.2/sdk-delegates/#syncstageconnectivitydelegate","title":"SyncStageConnectivityDelegate","text":"<p>Responsible for getting callbacks about users' connectivity in the session.</p> <pre><code>interface SyncStageConnectivityDelegate {\n    // called when user loses partial connectivity as a transmitter or when get recover.\n    fun transmitterConnectivityChanged(connected: Boolean)\n    // called when the receiver loses partial connectivity for a specific user or when it recovers\n    fun receiverConnectivityChanged(identifier: String, connected: Boolean)\n}\n</code></pre>"},{"location":"android/versions/0.5.2/sdk-delegates/#syncstagediscoverydelegate","title":"SyncStageDiscoveryDelegate","text":"<p>Responsible for getting callbacks about available zones latency.</p> <pre><code>interface SyncStageDiscoveryDelegate {\n    fun discoveryResults(zones: List&lt;String&gt;)\n    fun discoveryLatencyTestResults(zoneLatencyMap: Map&lt;String, Int&gt;)\n}\n</code></pre> <p>The key of <code>zoneLatencyMap</code> is zoneId, and the value is latency represented in miliseconds.</p>"},{"location":"android/versions/0.5.2/sdk-error-codes/","title":"Error codes","text":""},{"location":"android/versions/0.5.2/sdk-error-codes/#052","title":"0.5.2","text":"<p>Most of the SDK methods return SyncStageSDKErrorCode which can be decoded using following enum class.</p> <pre><code>enum class SyncStageSDKErrorCode(val errorCode: Int) {\n    UNKNOWN_ERROR(-1),\n    OK(0),\n    CONFIGURATION_ERROR(1),\n    API_ERROR(2),\n    API_UNAUTHORIZED(3),\n    AUDIO_STREAMING_ERROR(4),\n    STREAM_DOES_NOT_EXIST(5),\n    BAD_VOLUME_VALUE(6),\n    SESSION_NOT_JOINED(7),\n    AUDIO_SERVER_NOT_REACHABLE(8),\n}\n</code></pre>"},{"location":"android/versions/0.5.2/sdk-methods/","title":"Methods","text":""},{"location":"android/versions/0.5.2/sdk-methods/#052","title":"0.5.2","text":""},{"location":"android/versions/0.5.2/sdk-methods/#general","title":"General","text":""},{"location":"android/versions/0.5.2/sdk-methods/#constructor","title":"Constructor","text":"<pre><code>SyncStage(\n        private val ctx: Context,\n        var userDelegate: SyncStageUserDelegate? = null,\n        var connectivityDelegate: SyncStageConnectivityDelegate? = null\n    )\n</code></pre> <p>Constructor parameters:</p> <ul> <li> <p><code>ctx</code> - Android application context</p> </li> <li> <p><code>userDelegate</code> - delegate object to receive events about users in session state</p> </li> <li> <p><code>connectivityDelegate</code> - delegate object to receive events with information about stream connection to Studio Server state</p> </li> </ul>"},{"location":"android/versions/0.5.2/sdk-methods/#initialize","title":"Initialize","text":"<p>Initializes the SDK SyncStage object.</p> <pre><code>fun init(\n        applicationSecretKey: String? = null,\n        onCompleted: (errorCode: SyncStageSDKErrorCode) -&gt; Unit = {},\n    )\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>applicationSecretKey</code> - if set to null, SDK will look for applicationSecretKey in the SyncStageSecret.json file</p> </li> <li> <p><code>onCompleted</code> - callback informing about the result of initialization with <code>SyncStageSDKErrorCode</code></p> </li> </ul>"},{"location":"android/versions/0.5.2/sdk-methods/#stop-and-dispose","title":"Stop and dispose","text":"<p>This method stops and cleans up all background tasks SDK performs. </p> <pre><code>fun stop()\n</code></pre> <p>Note</p> <p>It is crucial to call it onDestroy of the Activity where SyncStage has been initialized in.</p> <pre><code>    override fun onDestroy() {\n        if (isFinishing) {\n            syncStage.stop()\n        }\n        super.onDestroy()\n    }\n</code></pre>"},{"location":"android/versions/0.5.2/sdk-methods/#get-syncstage-sdk-version","title":"Get SyncStage SDK version","text":"<p>Gets SyncStage SDK version</p> <pre><code>fun getSDKVersion(): String\n</code></pre>"},{"location":"android/versions/0.5.2/sdk-methods/#get-best-available-server","title":"Get best available server","text":"<p>Get best available server, where a session can be created</p> <pre><code>suspend fun getBestAvailableServer(): Pair&lt;ServerInstance?, SyncStageSDKErrorCode&gt;\n</code></pre>"},{"location":"android/versions/0.5.2/sdk-methods/#get-server-instances","title":"Get server instances","text":"<p>Get server instances so you can select the server that is suitable for your session.</p> <pre><code>suspend fun getServerInstances(): Pair&lt;List&lt;ServerInstance&gt;?, SyncStageSDKErrorCode&gt; \n</code></pre>"},{"location":"android/versions/0.5.2/sdk-methods/#session","title":"Session","text":""},{"location":"android/versions/0.5.2/sdk-methods/#create-a-session","title":"Create a session","text":"<p>Creates a session in a given zone by a given user from your user pool.</p> <pre><code>suspend fun createSession(\n    zoneId: String,\n    studioServerId: String,\n    userId: String\n): Pair&lt;SessionIdentifier?, SyncStageSDKErrorCode&gt;\n</code></pre> <p>Parameters:</p> <ul> <li><code>zoneId</code> - zone in which we want to host our session</li> <li><code>studioServerId</code> - id of the selected studio server</li> <li><code>userId</code> - id of your app user to match the data between SyncStage and your backend</li> </ul>"},{"location":"android/versions/0.5.2/sdk-methods/#join-the-session","title":"Join the session","text":"<p>Joins a particular session identified by <code>sessionCode</code>.</p> <pre><code>suspend fun join(\n    sessionCode: String,\n    userId: String,\n    displayName: String? = null,\n    zoneId: String,\n    studioServerId: String,\n): Pair&lt;Session?, SyncStageSDKErrorCode&gt; \n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>sessionCode</code> - the session code</p> </li> <li> <p><code>userId</code> - id of your app user to match de data between SyncStage and your backend</p> </li> <li> <p><code>displayName</code> - your app user display name</p> </li> <li> <p><code>zoneId</code> - zone in which your session is hosted</p> </li> <li> <p><code>studioServerId</code> - studio server where you are running your session</p> </li> </ul>"},{"location":"android/versions/0.5.2/sdk-methods/#get-session-state","title":"Get session state","text":"<p>Gets state of currently joined session.</p> <pre><code>session(completion: @escaping (Result&lt;Session, SyncStageError&gt;)\n</code></pre> <p>Parameters:</p> <ul> <li><code>completion</code> - returns session state</li> </ul>"},{"location":"android/versions/0.5.2/sdk-methods/#leave-the-session","title":"Leave the session","text":"<p>Leaves currently joined session.</p> <pre><code>suspend fun leave(): SyncStageSDKErrorCode\n</code></pre>"},{"location":"android/versions/0.5.2/sdk-methods/#audio-setup","title":"Audio setup","text":""},{"location":"android/versions/0.5.2/sdk-methods/#mute-unmute-microphone","title":"Mute / unmute microphone","text":"<p>Enables or disables microphone stream.</p> <pre><code>fun toggleMicrophone(mute: Boolean): SyncStageSDKErrorCode \n</code></pre> <p>Parameters:</p> <ul> <li><code>mute</code>- desired state of the mute option</li> </ul>"},{"location":"android/versions/0.5.2/sdk-methods/#is-muted","title":"Is muted","text":"<p>Returns state of microphone stream.</p> <pre><code>fun isMicrophoneMuted(): Boolean\n</code></pre>"},{"location":"android/versions/0.5.2/sdk-methods/#turn-on-of-direct-monitor","title":"Turn on / of direct monitor","text":"<p>Turns on / of direct monitor.</p> <pre><code>fun toggleDirectMonitor(enable: Boolean): SyncStageSDKErrorCode\n</code></pre> <p>Parameters:</p> <ul> <li><code>enable</code>- <code>true</code> for turning on direct monitor</li> </ul>"},{"location":"android/versions/0.5.2/sdk-methods/#get-direct-monitor-volume","title":"Get direct monitor volume","text":"<p>Returns current direct monitor volume.</p> <pre><code>fun getDirectMonitorVolume(): Int\n</code></pre>"},{"location":"android/versions/0.5.2/sdk-methods/#change-direct-monitor-volume","title":"Change direct monitor volume","text":"<p>Changes volume of the direct monitor.</p> <pre><code>fun changeDirectMonitorVolume(volume: Int): SyncStageSDKErrorCode \n</code></pre> <p>Parameters:</p> <ul> <li><code>volume</code>- value from range [0;100]</li> </ul>"},{"location":"android/versions/0.5.2/sdk-methods/#get-direct-monitor-state","title":"Get direct monitor state","text":"<p>Gets direct monitor enabled state</p> <pre><code>fun getDirectMonitorEnabled(): Boolean\n</code></pre>"},{"location":"android/versions/0.5.2/sdk-methods/#turn-on-of-internal-microphone","title":"Turn on / of internal microphone","text":"<p>Turns on / of internal microphone to be used instead of default audio input i.e. headphones mic.</p> <pre><code>fun toggleInternalMic(enable: Boolean): SyncStageSDKErrorCode\n</code></pre> <p>Parameters:</p> <ul> <li><code>enable</code>- <code>true</code> for turning on internal microphone</li> </ul>"},{"location":"android/versions/0.5.2/sdk-methods/#get-internal-microphone-state","title":"Get internal microphone state","text":"<p>Gets internal microphone enabled state</p> <pre><code>fun getInternalMicEnabled(): Boolean\n</code></pre>"},{"location":"android/versions/0.5.2/sdk-methods/#network-measurements","title":"Network measurements","text":""},{"location":"android/versions/0.5.2/sdk-methods/#get-receiver-network-measurements","title":"Get receiver network measurements","text":"<p>Returns Mesurements object with network delay, jitter, and calculated network quality indicators.</p> <pre><code>fun getReceiverMeasurements(identifier: String): Measurements\n</code></pre> <p>Parameters:</p> <ul> <li><code>identifier</code>- receiver's identifier</li> </ul>"},{"location":"android/versions/0.5.2/sdk-methods/#get-transmitter-network-measurements","title":"Get transmitter network measurements","text":"<p>Returns Mesurements object with network delay, jitter, and calculated network quality indicators.</p> <pre><code>fun getTransmitterMeasurements(): Measurements\n</code></pre>"},{"location":"android/versions/0.5.2/sdk-methods/#latency-optimization-level","title":"Latency Optimization Level","text":"<p>Click here to learn more about the Latency Optimization Level.</p>"},{"location":"android/versions/0.5.2/sdk-methods/#change-latency-optimization-level","title":"Change latency Optimization Level","text":"<p>Change the latency optimization level using of the following options:</p> <ul> <li>highQuality</li> <li>optimized</li> <li>bestPerformance</li> <li>ultraFast</li> </ul> <p></p><pre><code>fun changeLatencyOptimizationLevel(value: LatencyOptimizationLevel)\n</code></pre> Parameters: <ul> <li><code>value</code>- latency optimization level value.</li> </ul>"},{"location":"android/versions/0.5.2/sdk-methods/#get-latency-optimization-level","title":"Get Latency Optimization Level","text":"<p>Returns latency optimization level.</p> <pre><code>fun getLatencyOptimizationLevel(): LatencyOptimizationLevel\n</code></pre>"},{"location":"android/versions/0.5.2/sdk-methods/#session-recording","title":"Session recording","text":""},{"location":"android/versions/0.5.2/sdk-methods/#start-recording","title":"Start recording","text":"<pre><code>fun startRecording(): SyncStageSDKErrorCode\n</code></pre>"},{"location":"android/versions/0.5.2/sdk-methods/#stop-recording","title":"Stop recording","text":"<pre><code>fun stopRecording(): SyncStageSDKErrorCode\n</code></pre>"},{"location":"android/versions/0.6.0/sdk-delegates/","title":"Delegates","text":""},{"location":"android/versions/0.6.0/sdk-delegates/#060","title":"0.6.0","text":"<p>SyncStage class provide two delegates: <code>SyncStageUserDelegate</code> and <code>SyncStageConnectivityDelegate</code> which provide a set of callbacks to inform your application about asynchronous events from the SyncStage. You can define those object and provide to the SyncStage constructor or update public SyncStage properties <code>userDelegate</code> and <code>connectivityDelegate</code> anytime.</p>"},{"location":"android/versions/0.6.0/sdk-delegates/#syncstageuserdelegate","title":"SyncStageUserDelegate","text":"<p>Responsible for getting callbacks about users' state in the session.</p> <pre><code>interface SyncStageUserDelegate {\n    // called when a user joins a session\n    fun userJoined(connection: Connection)\n    // called when a user leaves a session\n    fun userLeft(identifier: String)\n    // called when a user mutes himself\n    fun userMuted(identifier: String)\n    // called when a user unmutes himself\n    fun userUnmuted(identifier: String)\n    // called when session recording started\n    fun sessionRecordingStarted()\n    // called when session recording stopped\n    fun sessionRecordingStopped()\n    // called when the your application lose connectivity with Studio Server, after a while user will be dismissed from the session\n    fun sessionOut()\n}\n</code></pre>"},{"location":"android/versions/0.6.0/sdk-delegates/#syncstageconnectivitydelegate","title":"SyncStageConnectivityDelegate","text":"<p>Responsible for getting callbacks about users' connectivity in the session.</p> <pre><code>interface SyncStageConnectivityDelegate {\n    // called when user loses partial connectivity as a transmitter or when get recover.\n    fun transmitterConnectivityChanged(connected: Boolean)\n    // called when the receiver loses partial connectivity for a specific user or when it recovers\n    fun receiverConnectivityChanged(identifier: String, connected: Boolean)\n}\n</code></pre>"},{"location":"android/versions/0.6.0/sdk-delegates/#syncstagediscoverydelegate","title":"SyncStageDiscoveryDelegate","text":"<p>Responsible for getting callbacks about available zones latency.</p> <pre><code>interface SyncStageDiscoveryDelegate {\n    fun discoveryResults(zones: List&lt;String&gt;)\n    fun discoveryLatencyTestResults(zoneLatencyMap: Map&lt;String, Int&gt;)\n}\n</code></pre> <p>The key of <code>zoneLatencyMap</code> is zoneId, and the value is latency represented in miliseconds.</p>"},{"location":"android/versions/0.6.0/sdk-error-codes/","title":"Error codes","text":""},{"location":"android/versions/0.6.0/sdk-error-codes/#060","title":"0.6.0","text":"<p>Most of the SDK methods return SyncStageSDKErrorCode which can be decoded using following enum class.</p> <pre><code>enum class SyncStageSDKErrorCode(val errorCode: Int) {\n    UNKNOWN_ERROR(-1),\n    OK(0),\n    CONFIGURATION_ERROR(1),\n    API_ERROR(2),\n    API_UNAUTHORIZED(3),\n    AUDIO_STREAMING_ERROR(4),\n    STREAM_DOES_NOT_EXIST(5),\n    BAD_VOLUME_VALUE(6),\n    SESSION_NOT_JOINED(7),\n    AUDIO_SERVER_NOT_REACHABLE(8),\n}\n</code></pre>"},{"location":"android/versions/0.6.0/sdk-methods/","title":"Methods","text":""},{"location":"android/versions/0.6.0/sdk-methods/#060","title":"0.6.0","text":""},{"location":"android/versions/0.6.0/sdk-methods/#general","title":"General","text":""},{"location":"android/versions/0.6.0/sdk-methods/#constructor","title":"Constructor","text":"<pre><code>SyncStage(\n        private val ctx: Context,\n        var userDelegate: SyncStageUserDelegate? = null,\n        var connectivityDelegate: SyncStageConnectivityDelegate? = null\n    )\n</code></pre> <p>Constructor parameters:</p> <ul> <li> <p><code>ctx</code> - Android application context</p> </li> <li> <p><code>userDelegate</code> - delegate object to receive events about users in session state</p> </li> <li> <p><code>connectivityDelegate</code> - delegate object to receive events with information about stream connection to Studio Server state</p> </li> </ul>"},{"location":"android/versions/0.6.0/sdk-methods/#initialize","title":"Initialize","text":"<p>Initializes the SDK SyncStage object.</p> <pre><code>fun init(\n        syncStageSecret: String? = null,\n        onCompleted: (errorCode: SyncStageSDKErrorCode) -&gt; Unit = {},\n    )\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>syncStageSecret</code> - if set to null, SDK will look for the SyncStageSecret.json file</p> </li> <li> <p><code>onCompleted</code> - callback informing about the result of initialization with <code>SyncStageSDKErrorCode</code></p> </li> </ul>"},{"location":"android/versions/0.6.0/sdk-methods/#stop-and-dispose","title":"Stop and dispose","text":"<p>This method stops and cleans up all background tasks SDK performs. </p> <pre><code>fun stop()\n</code></pre> <p>Note</p> <p>It is crucial to call it onDestroy of the Activity where SyncStage has been initialized in.</p> <pre><code>    override fun onDestroy() {\n        if (isFinishing) {\n            syncStage.stop()\n        }\n        super.onDestroy()\n    }\n</code></pre>"},{"location":"android/versions/0.6.0/sdk-methods/#get-syncstage-sdk-version","title":"Get SyncStage SDK version","text":"<p>Gets SyncStage SDK version</p> <pre><code>fun getSDKVersion(): String\n</code></pre>"},{"location":"android/versions/0.6.0/sdk-methods/#get-best-available-server","title":"Get best available server","text":"<p>Get best available server, where a session can be created</p> <pre><code>suspend fun getBestAvailableServer(): Pair&lt;ServerInstance?, SyncStageSDKErrorCode&gt;\n</code></pre>"},{"location":"android/versions/0.6.0/sdk-methods/#get-server-instances","title":"Get server instances","text":"<p>Get server instances so you can select the server that is suitable for your session.</p> <pre><code>suspend fun getServerInstances(): Pair&lt;List&lt;ServerInstance&gt;?, SyncStageSDKErrorCode&gt; \n</code></pre>"},{"location":"android/versions/0.6.0/sdk-methods/#session","title":"Session","text":""},{"location":"android/versions/0.6.0/sdk-methods/#create-a-session","title":"Create a session","text":"<p>Creates a session in a given zone by a given user from your user pool.</p> <pre><code>suspend fun createSession(\n    zoneId: String,\n    studioServerId: String,\n    userId: String\n): Pair&lt;SessionIdentifier?, SyncStageSDKErrorCode&gt;\n</code></pre> <p>Parameters:</p> <ul> <li><code>zoneId</code> - zone in which we want to host our session</li> <li><code>studioServerId</code> - id of the selected studio server</li> <li><code>userId</code> - id of your app user to match the data between SyncStage and your backend</li> </ul>"},{"location":"android/versions/0.6.0/sdk-methods/#join-the-session","title":"Join the session","text":"<p>Joins a particular session identified by <code>sessionCode</code>.</p> <pre><code>suspend fun join(\n    sessionCode: String,\n    userId: String,\n    displayName: String? = null,\n    zoneId: String,\n    studioServerId: String,\n): Pair&lt;Session?, SyncStageSDKErrorCode&gt; \n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>sessionCode</code> - the session code</p> </li> <li> <p><code>userId</code> - id of your app user to match de data between SyncStage and your backend</p> </li> <li> <p><code>displayName</code> - your app user display name</p> </li> <li> <p><code>zoneId</code> - zone in which your session is hosted</p> </li> <li> <p><code>studioServerId</code> - studio server where you are running your session</p> </li> </ul>"},{"location":"android/versions/0.6.0/sdk-methods/#get-session-state","title":"Get session state","text":"<p>Gets state of currently joined session.</p> <pre><code>session(completion: @escaping (Result&lt;Session, SyncStageError&gt;)\n</code></pre> <p>Parameters:</p> <ul> <li><code>completion</code> - returns session state</li> </ul>"},{"location":"android/versions/0.6.0/sdk-methods/#leave-the-session","title":"Leave the session","text":"<p>Leaves currently joined session.</p> <pre><code>suspend fun leave(): SyncStageSDKErrorCode\n</code></pre>"},{"location":"android/versions/0.6.0/sdk-methods/#audio-setup","title":"Audio setup","text":""},{"location":"android/versions/0.6.0/sdk-methods/#mute-unmute-microphone","title":"Mute / unmute microphone","text":"<p>Enables or disables microphone stream.</p> <pre><code>fun toggleMicrophone(mute: Boolean): SyncStageSDKErrorCode \n</code></pre> <p>Parameters:</p> <ul> <li><code>mute</code>- desired state of the mute option</li> </ul>"},{"location":"android/versions/0.6.0/sdk-methods/#is-muted","title":"Is muted","text":"<p>Returns state of microphone stream.</p> <pre><code>fun isMicrophoneMuted(): Boolean\n</code></pre>"},{"location":"android/versions/0.6.0/sdk-methods/#turn-on-of-direct-monitor","title":"Turn on / of direct monitor","text":"<p>Turns on / of direct monitor.</p> <pre><code>fun toggleDirectMonitor(enable: Boolean): SyncStageSDKErrorCode\n</code></pre> <p>Parameters:</p> <ul> <li><code>enable</code>- <code>true</code> for turning on direct monitor</li> </ul>"},{"location":"android/versions/0.6.0/sdk-methods/#get-direct-monitor-volume","title":"Get direct monitor volume","text":"<p>Returns current direct monitor volume.</p> <pre><code>fun getDirectMonitorVolume(): Int\n</code></pre>"},{"location":"android/versions/0.6.0/sdk-methods/#change-direct-monitor-volume","title":"Change direct monitor volume","text":"<p>Changes volume of the direct monitor.</p> <pre><code>fun changeDirectMonitorVolume(volume: Int): SyncStageSDKErrorCode \n</code></pre> <p>Parameters:</p> <ul> <li><code>volume</code>- value from range [0;100]</li> </ul>"},{"location":"android/versions/0.6.0/sdk-methods/#get-direct-monitor-state","title":"Get direct monitor state","text":"<p>Gets direct monitor enabled state</p> <pre><code>fun getDirectMonitorEnabled(): Boolean\n</code></pre>"},{"location":"android/versions/0.6.0/sdk-methods/#turn-on-of-internal-microphone","title":"Turn on / of internal microphone","text":"<p>Turns on / of internal microphone to be used instead of default audio input i.e. headphones mic.</p> <pre><code>fun toggleInternalMic(enable: Boolean): SyncStageSDKErrorCode\n</code></pre> <p>Parameters:</p> <ul> <li><code>enable</code>- <code>true</code> for turning on internal microphone</li> </ul>"},{"location":"android/versions/0.6.0/sdk-methods/#get-internal-microphone-state","title":"Get internal microphone state","text":"<p>Gets internal microphone enabled state</p> <pre><code>fun getInternalMicEnabled(): Boolean\n</code></pre>"},{"location":"android/versions/0.6.0/sdk-methods/#network-measurements","title":"Network measurements","text":""},{"location":"android/versions/0.6.0/sdk-methods/#get-receiver-network-measurements","title":"Get receiver network measurements","text":"<p>Returns Mesurements object with network delay, jitter, and calculated network quality indicators.</p> <pre><code>fun getReceiverMeasurements(identifier: String): Measurements\n</code></pre> <p>Parameters:</p> <ul> <li><code>identifier</code>- receiver's identifier</li> </ul>"},{"location":"android/versions/0.6.0/sdk-methods/#get-transmitter-network-measurements","title":"Get transmitter network measurements","text":"<p>Returns Mesurements object with network delay, jitter, and calculated network quality indicators.</p> <pre><code>fun getTransmitterMeasurements(): Measurements\n</code></pre>"},{"location":"android/versions/0.6.0/sdk-methods/#latency-optimization-level","title":"Latency Optimization Level","text":"<p>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD Click here to learn more about the Latency Optimization Level. ======= Click here to learn more about the Latency Optimization Level.</p> <p>3a79feb8957e84f6ddb648b1a3a280ae9852cc47</p>"},{"location":"android/versions/0.6.0/sdk-methods/#change-latency-optimization-level","title":"Change latency Optimization Level","text":"<p>Change the latency optimization level using of the following options:</p> <ul> <li>highQuality</li> <li>optimized</li> <li>bestPerformance</li> <li>ultraFast</li> </ul> <p></p><pre><code>fun changeLatencyOptimizationLevel(value: LatencyOptimizationLevel)\n</code></pre> Parameters: <ul> <li><code>value</code>- latency optimization level value.</li> </ul>"},{"location":"android/versions/0.6.0/sdk-methods/#get-latency-optimization-level","title":"Get Latency Optimization Level","text":"<p>Returns latency optimization level.</p> <pre><code>fun getLatencyOptimizationLevel(): LatencyOptimizationLevel\n</code></pre>"},{"location":"android/versions/0.6.0/sdk-methods/#session-recording","title":"Session recording","text":""},{"location":"android/versions/0.6.0/sdk-methods/#start-recording","title":"Start recording","text":"<pre><code>fun startRecording(): SyncStageSDKErrorCode\n</code></pre>"},{"location":"android/versions/0.6.0/sdk-methods/#stop-recording","title":"Stop recording","text":"<pre><code>fun stopRecording(): SyncStageSDKErrorCode\n</code></pre>"},{"location":"developer-api/swagger/","title":"APIs","text":""},{"location":"developer-api/swagger/#developer-api","title":"Developer API","text":"<p>For your convenience, we offer a developer API to facilitate backend integration. Below, you will find interactive Swagger documentation that describes the REST API in detail. In order to interact with the API, you are required to request a token that is associated with your organization within SyncStage. It is crucial to securely store this token. The API token grants access to sensitive information such as billing details, recordings, and session management.</p> <p>Firstly, your backend needs to authenticate using the endpoint <code>/developer-api/login</code> and the provided token. The jwt will expire after the duration specified in the <code>expiresIn</code> [seconds] field of the response.</p> <p>After obtaining the <code>/developer-api/login</code> response, your backend should include the JWT token in the <code>Authentication</code> header to execute any other methods.</p> <pre><code>GET /developer/&lt;some-endpoint&gt; HTTP/1.1\nHost: api.syncstage.com\nAuthorization: Bearer &lt;jwt&gt;\n</code></pre> <p></p>"},{"location":"guides/","title":"Guides","text":""},{"location":"guides/#guides","title":"Guides","text":"<ul> <li> <p> Music Collaboration</p> <p>Start using SyncStage Test Application for live music collaboration</p> <p> Getting started</p> </li> </ul>"},{"location":"guides/music-collaboration/","title":"Music Collaboration","text":""},{"location":"guides/music-collaboration/#music-collaboration","title":"Music Collaboration","text":"<p>Welcome to the SyncStage Music Collaboration Guide. This document will help you get started with SyncStage for live music collaboration. Whether you're involved in music education, songwriting sessions, or simply jamming with friends, SyncStage offers unparalleled speed and audio quality to support your needs.</p> <p></p> <p>Here are a few things you need to make your remote music collaboration successful using both the SyncStage Test Application and SyncStage SDK-based Apps.</p>"},{"location":"guides/music-collaboration/#prerequisites","title":"Prerequisites","text":"<p>Before you start, please ensure that you have the SyncStage Test App or another SyncStage SDK-based application installed. </p> <p>If you have it installed already, please proceed to the next step</p> <p>You can install the application by:</p> <ul> <li>Building SyncStage Test Application from Sources</li> <li>Requesting access to the already built application.</li> </ul>"},{"location":"guides/music-collaboration/#building-syncstage-test-application-from-sources","title":"Building SyncStage Test Application from Sources","text":"<ul> <li> <p> Test App for Android</p> <p> Getting started</p> </li> <li> <p> Test App for iOS</p> <p> Getting started</p> </li> <li> <p> Test App for Web</p> <p> Getting started</p> </li> </ul>"},{"location":"guides/music-collaboration/#requesting-access-to-the-already-built-application","title":"Requesting access to the already built application.","text":"<p>Fill out this form to request access to the SyncStage Test Application.</p>"},{"location":"guides/music-collaboration/#audio-setup","title":"Audio Setup","text":"<p>You can start using SyncStage quickly with just you headphones or use an audio interface of your choice. Select your setup to learn more.</p> <ul> <li> <p>Using SyncStage With Just Headphones</p> <p> Picture by Harman International Industries </p> <p> Learn more</p> </li> <li> <p>Use SyncStage With An Audio Interface</p> <p> Picture by Focusrite Audio Engineering Limited </p> <p> Learn more</p> </li> </ul>"},{"location":"guides/music-collaboration/#network-setup","title":"Network Setup","text":"<ul> <li> <p> Importance of Network Latency</p> <p>A fast and stable network is critical for a real-time experience.</p> <p> Learn more</p> </li> <li> <p> Recommended Network Types</p> <p>Remote Music Collaboration might not be possible in certain networks types.</p> <p> Learn more</p> </li> <li> <p> Distance Between Musicians</p> <p>The physical distance between location translates into audio latency.</p> <p> Learn more</p> </li> <li> <p> Latency Optimization Levels</p> <p>SyncStage offers four modes dedicated for different use cases.</p> <p> Learn more</p> </li> </ul>"},{"location":"guides/music-collaboration/acoustic-feedback/","title":"Acoustic Feedback","text":""},{"location":"guides/music-collaboration/acoustic-feedback/#acoustic-feedback","title":"Acoustic Feedback","text":"<p>If you\u2019re testing two smartphones without connected headphones in close proximity, you need to be aware of audio feedback. While the SyncStage platform provides feedback cancellation, isolating the phones from each other by distance will ensure the best experience.</p>"},{"location":"guides/music-collaboration/audio-interfaces/","title":"Audio Interfaces","text":""},{"location":"guides/music-collaboration/audio-interfaces/#audio-interfaces","title":"Audio Interfaces","text":"<p>A good audio interface is key to achieving high sound quality. Fortunately, you can connect the audio interface of your choice to SyncStage.</p> <p>As a general rule, if your smartphone or tablet is compatible with a particular audio interface, SyncStage should be as well.</p> <p>The steps needed to connect the audio interfaces vary between different types of the devices.  Here are two main ones:</p> <ul> <li> <p>Audio Interfaces for Mobile Devices</p> <p> iRig HD 2 or similar Picture by IK Multimedia Production srl </p> <p> Learn more</p> </li> <li> <p>Audio Interfaces for Desktop</p> <p> Focusrite Scarlett or similar Picture by Focusrite Audio Engineering Limited </p> <p> Learn more</p> </li> </ul>"},{"location":"guides/music-collaboration/audio-interfaces/#audio-interfaces-for-mobile-devices","title":"Audio Interfaces for Mobile Devices","text":"<p>SyncStage seamlessly integrates with audio interfaces designed for mobile devices, such as the iRig HD 2 with Lightning or USB-C connectors. These interfaces are user-friendly and have the advantage of drawing power directly from the smartphone or tablet, simplifying the setup process.</p> iRig HD 2  Picture by IK Multimedia Production srl"},{"location":"guides/music-collaboration/audio-interfaces/#steps","title":"Steps","text":"<ol> <li>Connect an audio interface designed for smartphones to your device using either a Lightning or USB-C connector.</li> <li>Launch the SyncStage app.</li> <li>If you want to hear your own audio in real-time, enable the \"Direct Monitor\" option.</li> </ol>"},{"location":"guides/music-collaboration/audio-interfaces/#audio-interfaces-for-desktop","title":"Audio Interfaces For Desktop","text":"<p>Audio interfaces in this category work well with SyncStage for desktop. Using them with a smartphone or tablet is possible but requires additional steps, as they often have high power requirements that cannot be met directly by a mobile device.</p> <p>Here are a few popular examples:</p> Focusrite Scarlett Solo Picture by Focusrite Audio Engineering Limited Zoom UAC-2  Picture by ZOOM CORPORATION"},{"location":"guides/music-collaboration/audio-interfaces/#connecting-desktop-audio-interfaces-to-mobile-devices","title":"Connecting Desktop Audio Interfaces to Mobile Devices","text":"<p>The method to connect your audio interface to your smartphone or tablet depends on the connector type.</p> <ul> <li> <p> USB Type-C</p> <ul> <li>Android devices</li> <li>iPhones 15 and newer</li> <li>iPads </li> </ul> <p> Learn more</p> </li> <li> <p> Lightning</p> <ul> <li>iPhones 14 and older.</li> <li>Older iPads.</li> </ul> <p> Learn more</p> </li> </ul>"},{"location":"guides/music-collaboration/audio-interfaces/#connecting-an-audio-interface-to-a-usb-type-c-device","title":"Connecting an Audio Interface to a USB Type-C Device","text":""},{"location":"guides/music-collaboration/audio-interfaces/#prerequisites","title":"Prerequisites","text":"<ul> <li>USB Type-C Adapter</li> <li>Power Supply</li> </ul>"},{"location":"guides/music-collaboration/audio-interfaces/#steps_1","title":"Steps","text":"<ol> <li>Connect a USB-C power supply to the USB Type-C Adapter.</li> <li>Connect the USB Type-C Adapter to your smartphone or tablet.</li> <li>Connect your audio interface to the USB Type-C Adapter.</li> <li>Connect your instrument to the audio interface.</li> <li>Connect your headphones to the audio interface. Voila! Your setup is complete and ready to use.</li> </ol>"},{"location":"guides/music-collaboration/audio-interfaces/#connecting-an-audio-interface-to-a-lightning-device","title":"Connecting an Audio Interface to a Lightning Device","text":""},{"location":"guides/music-collaboration/audio-interfaces/#prerequisites_1","title":"Prerequisites","text":"<ul> <li>Apple Lightning to USB 3 Camera Adapter</li> <li>USB Type-C * Power Supply</li> </ul>"},{"location":"guides/music-collaboration/audio-interfaces/#steps_2","title":"Steps","text":"<ul> <li> <p>Step 1</p> <p>      Connect a USB-C power supply to the Apple Lightning to USB 3 Camera Adapter.    </p> </li> <li> <p>Step 2</p> <p>      Connect the Apple Lightning to USB 3 Camera Adapter to your iPhone. This should initiate charging.    </p> </li> <li> <p>Step 3</p> <p>      Connect your audio interface to the Apple Lightning to USB 3 Camera Adapter.    </p> </li> <li> <p>Step 4</p> <p>      Ensure the audio interface is receiving power. If not, verify the power supply is connected to a power source. If the issue persists, revisit steps 1 to 3.    </p> </li> <li> <p>Step 5</p> <p>      Connect your instrument to the audio interface.    </p> </li> <li> <p>Step 6</p> <p>      Connect your headphones to the audio interface. Voila! Your setup is complete and ready to use.    </p> </li> </ul> <p>Note</p> <p>Some accessories, including official ones like the Apple Lightning to USB 3 Camera Adapter, may exhibit unexpected behavior due to hardware issues beyond our control. If you encounter issues like an unpowered audio interface or detection failure, please remain patient and follow the instructions meticulously.</p>"},{"location":"guides/music-collaboration/audio-interfaces/#compatibility-table","title":"Compatibility Table","text":"<p>Below is a list of tested devices. If your device is not listed, don't worry. It's very likely that SyncStage will support it.</p> Audio Interface Requires Additional Power Supply For Mobile Devices Recommended Comment iRig HD 2 No iRig No Low audio quality and potential for causing echo iRig 2 No Low audio quality and potential for causing echo Focusrite Scarlett Yes Behringer U-PHORIA UMC22 Yes Behringer U-PHORIA UMC2 Yes Zoom UAC-2 Yes"},{"location":"guides/music-collaboration/distance/","title":"Distance Between Musicians","text":""},{"location":"guides/music-collaboration/distance/#impact-of-the-distance-between-the-musicians-on-network-latency","title":"Impact of The Distance Between The Musicians on Network Latency","text":"<p>As the distance between users increases, so does the network latency, potentially impacting certain types of music collaboration. SyncStage uses a client-server architecture, routing all connections through its servers known as Studio Servers. Therefore, the geographical distance between users and the Studio Server must be considered.</p> Network latency increases with the distance Distance in Kilometers Distance in Miles Network Latency Floor 200 km ~124 mi &gt; 2 ms 500 km ~311 mi &gt; 5 ms 1000 km ~621 mi &gt; 10 ms 2000 km ~1243 mi &gt; 20 ms 5000 km ~3107 mi &gt; 50 ms 10000 km ~6214 mi &gt; 100 ms <p>Note</p> <p>Network latency floor only considers the propagation delay due to the speed of light in the fiber and does not account for other factors that can contribute to latency. In reality, this value can be 2-5 times higher.</p>"},{"location":"guides/music-collaboration/headphones/","title":"Headphones","text":""},{"location":"guides/music-collaboration/headphones/#headphones","title":"Headphones","text":"<p>To start with SyncStage you don\u2019t need to have any audio interface! </p>"},{"location":"guides/music-collaboration/headphones/#steps","title":"Steps","text":"<ol> <li>Connect your wired headphones to your device.</li> <li>Launch SyncStage Test App.</li> <li>Activate the \"Internal Microphone\" or \"Built-in Microphone\" option in the application settings ()</li> <li>If you wish to hear your own audio in real-time, simply enable the \"Direct Monitor\" option.</li> </ol> Application Settings"},{"location":"guides/music-collaboration/headphones/#possible-setups","title":"Possible Setups","text":"<p>The way you connect wired headphones to your smartphone, tablet, or desktop depends on the available connectors. Below are the most common connectors and the recommended ways to connect headphones to a device with each connector.</p>"},{"location":"guides/music-collaboration/headphones/#35-mm-headphone-jack","title":"3.5-mm Headphone Jack","text":"<p>This is the most common option on desktops, tablets, and older smartphones.</p> <ul> <li> Headphones with 3.5-mm Headphone PlugIt\u2019s a recommended setup for smartphones and tablets that have a have a 3.5-mm headphone jack. </li> </ul>"},{"location":"guides/music-collaboration/headphones/#usb-type-c","title":"USB Type-C","text":"<p>USB Type-C is used in most of the modern Android phones, iPhones 15 and newer, and iPads.</p> <ul> <li> <p> Headphones with USB-C ConnectorRecommended for smartphones and tablets with a USB Type-C port. </p> </li> <li> <p> Headphones with USB-C ConnectorAllows you to connect 3.5-mm headphones to a USB-C port. </p> </li> </ul>"},{"location":"guides/music-collaboration/headphones/#apple-lightning","title":"Apple Lightning","text":"<p>Apple Lightning is used in most modern iPhones 14 and older, and older iPads.</p> <ul> <li> <p> Apple EarPods with Lightning ConnectorRecommended for iPhones and iPads with a Lightning port. </p> </li> <li> <p> Lightning to 3.5-mm Headphone Jack AdapterAllows you to connect 3.5-mm headphones to an iPhone or iPad with a Lightning port. </p> </li> </ul>"},{"location":"guides/music-collaboration/headphones/#bluetooth","title":"Bluetooth","text":"<p>We strongly advise against using Bluetooth or any other wireless headphones for music collaboration. Bluetooth technology introduce itself anything between 100 ms and 800 ms of latency.</p>"},{"location":"guides/music-collaboration/headphones/#acknowledgements","title":"Acknowledgements","text":"<p>Graphics by Apple Inc. Click here to learn more about possible audio setups on Apple devices.</p>"},{"location":"guides/music-collaboration/latency-optimization-levels/","title":"Latency Optimization Levels","text":""},{"location":"guides/music-collaboration/latency-optimization-levels/#latency-optimization-levels","title":"Latency Optimization Levels","text":"<p>Each use case has its own latency and quality requirements. For voice communications, clarity is key, whereas sub-100ms latency isn't required. For real-time music collaboration, low and stable latency is paramount. To address the needs of various use cases, SyncStage offers a Latency Optimization Level parameter that allows for a trade-off between latency and network fluctuation resilience. The table below shows the available modes.</p> Level Name Description Use Case Ultra Fast SyncStage focuses on delivering the lowest and most stable latency. Good network conditions required. Jamming, Songwriting Sessions Best Performance SyncStage focuses on delivering low latency. In poor network conditions, audio cracks can occur. Jamming, Songwriting Sessions Optimized Similar to High Quality but slightly more focused on reducing latency. Recording Sessions, Voice Chat High Quality SyncStage tries to maintain the highest possible quality regardless of network fluctuations. Recording Sessions, Voice Chat <p>If your network is very stable, the mode choice doesn't matter much. Feel free to experiment to find what works best for you.</p>"},{"location":"guides/music-collaboration/network-latency/","title":"Network Latency","text":""},{"location":"guides/music-collaboration/network-latency/#importance-of-network-latency","title":"Importance of Network Latency","text":"<p>A fast and stable network is critical for a real-time experience. The faster and more stable the connection, the better the experience.</p> <p>Below is a mapping of network parameters to the expected experience for music jamming, the most demanding use case.</p> Expected Experience Latency Jitter Packet Loss &lt;= 15 ms &lt;= 2.0 ms &lt;= 0.010% 16ms to 25ms 2.1ms to 5.0ms 0.011% to 0.02% 25ms to 35ms 5.1ms to 8.0ms 0.021% to 0.03% &gt; 35ms &gt; 8.0ms &gt; 0.03% <p>Note</p> <p>The final experience may vary for different use cases. Voice communication use cases are much less demanding.</p>"},{"location":"guides/music-collaboration/network-types/","title":"Network Types","text":""},{"location":"guides/music-collaboration/network-types/#recommended-network-types","title":"Recommended Network Types","text":"<p>Recommended</p> <ul> <li>Fixed-line</li> <li>Wi-Fi 6</li> <li>Wi-Fi 5 GHz</li> <li>5G</li> </ul> <p>Not Recommended</p> <ul> <li>Wi-Fi 2.4 GHz</li> <li>LTE</li> </ul>"},{"location":"help/ask-a-question/","title":"Asking a question","text":""},{"location":"help/ask-a-question/#ask-a-question","title":"Ask a question","text":"<p>SyncStage Discord channel will be available soon. Stay tuned!</p>"},{"location":"help/faq/","title":"FAQ","text":""},{"location":"help/faq/#network","title":"Network","text":""},{"location":"help/faq/#can-users-use-syncstage-when-not-connected-to-the-5g-network","title":"Can users use SyncStage when not connected to the 5G network?","text":"<p>Yes, 5G is not required. Users can use any type of internet connection.</p>"},{"location":"help/faq/#nat-issues","title":"NAT issues","text":"<p>SyncStage is UDP-based by default. However, in some networks where UDP connections are not allowed due to firewall or NAT configuration, SyncStage will switch to TCP. This may result in increased audio latency.</p>"},{"location":"help/faq/#sessions","title":"Sessions","text":""},{"location":"help/faq/#what-is-the-accepted-format-for-session-codes","title":"What is the accepted format for session codes?","text":"<p>Session codes consist of 9 letters or digits and are case insensitive. For readability, they are presented in the format <code>xyz-xyz-xyz</code>, but hyphens can be omitted. Therefore, <code>xyzxyzxyz</code> is a valid representation of <code>xyz-xyz-xyz</code>.</p>"},{"location":"help/faq/#how-long-can-a-session-last","title":"How long can a session last?","text":"<p>There are no defined limits regarding on the session length. Nevertheless, a connection of a given user should not last for more than 24h continuously.  There are no defined limits for session length. However, a connection from a user should not last continuously for more than 24 hours.</p>"},{"location":"help/faq/#how-many-users-can-a-session-accommodate","title":"How many users can a session accommodate?","text":"<p>Currently, SyncStage can accommodate up to 8 users in a a session.</p>"},{"location":"help/faq/#costs","title":"Costs","text":""},{"location":"help/faq/#how-does-syncstage-calculate-sdk-usage","title":"How does SyncStage calculate SDK usage?","text":"<p>SyncStage calcutales the number of minutes each user was connected to a session. Developers can track the usage in the Developer Console. </p>"},{"location":"help/faq/#how-do-i-pay-for-syncstage","title":"How do I pay for SyncStage?","text":"<p>During the Early Access Phase, developers will receive monthly invoices. The total amount on the invoice will depend on the usage and the selected plan.</p>"},{"location":"help/report-a-bug/","title":"Reporting a bug","text":"<p>Found a bug? Please report it as an issue direcltly on our GitHub repositories:</p> <ul> <li>Android<ul> <li>SyncStage Test App</li> </ul> </li> <li>iOS<ul> <li>SyncStage Test App</li> <li>SyncStage SDK</li> </ul> </li> <li>Web<ul> <li>SyncStage Test App</li> <li>SyncStage SDK</li> </ul> </li> </ul>"},{"location":"help/report-an-issue-in-docs/","title":"Reporting an issue in docs","text":"<p>Found an issue with docs? Please report it direcltly on our GitHub repository SyncStage Docs</p>"},{"location":"ios/changelog/","title":"Changelog","text":""},{"location":"ios/changelog/#0.7.0","title":"0.7.0 August 23, 2024","text":""},{"location":"ios/changelog/#changed","title":"Changed","text":"<ul> <li>Increased resilience to network latency fluctuations and packet loss.</li> </ul> Warning <p>SyncStage SDK v0.7.0 for iOS is incompatible with the previous SDK versions.</p>"},{"location":"ios/changelog/#0.6.2","title":"0.6.2 May 21, 2024","text":""},{"location":"ios/changelog/#changed_1","title":"Changed","text":"<ul> <li>Extended NAT support for better IPv6 networks handling</li> </ul>"},{"location":"ios/changelog/#0.6.1","title":"0.6.1 April 25, 2024","text":""},{"location":"ios/changelog/#added","title":"Added","text":"<ul> <li>Fixed network latency test to Studio Servers</li> <li>Added Privacy Manifest required by Apple</li> </ul>"},{"location":"ios/changelog/#0.6.0","title":"0.6.0 April 9, 2024","text":""},{"location":"ios/changelog/#added_1","title":"Added","text":"<ul> <li>Added Noise Cancellation</li> </ul>"},{"location":"ios/changelog/#0.5.2","title":"0.5.2 March 19, 2024","text":""},{"location":"ios/changelog/#added_2","title":"Added","text":"<ul> <li>Session code</li> <li>Is Direct Monitor enabled</li> </ul>"},{"location":"ios/changelog/#0.5.1","title":"0.5.1 October 18, 2023","text":""},{"location":"ios/changelog/#added_3","title":"Added","text":"<ul> <li>Session name</li> <li>Session tags</li> <li>Prefer fast routing option</li> </ul>"},{"location":"ios/changelog/#0.5.0","title":"0.5.0 August 14, 2023","text":""},{"location":"ios/changelog/#added_4","title":"Added","text":"<ul> <li>Session recording</li> <li>Analytics</li> </ul>"},{"location":"ios/changelog/#0.4.0","title":"0.4.0 June 27, 2023","text":"<p>SyncStage SDK v0.4.0 for iOS is the first production-ready release!</p>"},{"location":"ios/changelog/#added_5","title":"Added","text":"<ul> <li>Security improvements</li> <li>Get best available server</li> <li>Get server instances</li> <li>Change latency optimization level</li> <li>Get latency optimization level</li> <li>SyncStage discovery delegate</li> </ul>"},{"location":"ios/changelog/#changed_2","title":"Changed","text":"<ul> <li>Create session parameters</li> <li>Join session parameters</li> </ul>"},{"location":"ios/changelog/#removed","title":"Removed","text":"<ul> <li>Zone list (Replaced by: getServerInstances)</li> <li>Change quality coefficient (Replaced by: changeLatencyOptimizationLevel)</li> <li>Get quality coeffient (Replaced by: getLatencyOptimizationLevel)</li> </ul> Warning <p>SyncStage SDK v0.4.0 for iOS is incompatible with the previous SDK versions.</p>"},{"location":"ios/changelog/#0.3.1","title":"0.3.1 April 14, 2023","text":""},{"location":"ios/changelog/#added_6","title":"Added","text":"<ul> <li>Audio quality and latency improvements</li> <li>Change quality coefficient</li> <li>Get quality coefficient</li> </ul>"},{"location":"ios/changelog/#0.3.0","title":"0.3.0 April 2, 2023","text":""},{"location":"ios/changelog/#added_7","title":"Added","text":"<ul> <li>TCP fallback resolving NAT issues</li> <li>Audio quality and latency improvements</li> </ul>"},{"location":"ios/changelog/#0.2.0","title":"0.2.0 December 2, 2022","text":""},{"location":"ios/changelog/#added_8","title":"Added","text":"<ul> <li>Displaying network measurements</li> </ul>"},{"location":"ios/changelog/#changed_3","title":"Changed","text":"<ul> <li>Transmitter identifier is removed from the leave session method.</li> </ul>"},{"location":"ios/changelog/#0.1.0","title":"0.1.0 November 18, 2022","text":""},{"location":"ios/changelog/#added_9","title":"Added","text":"<ul> <li>Create session</li> <li>Join session</li> <li>Leave session</li> <li>Mute streams</li> <li>Change stream volumes</li> </ul>"},{"location":"ios/overview/","title":"Overview","text":"<p>SyncStage SDK for iOS latest version: <code>v0.7.0</code> (View changelog)</p> <p>Install SDK Get an example project</p>"},{"location":"ios/overview/#requirements","title":"Requirements","text":""},{"location":"ios/overview/#ios-version","title":"iOS version","text":"<p>SyncStage SDK can be used in iOS version 14.0 or above.</p>"},{"location":"ios/quickstart/","title":"Quickstart","text":""},{"location":"ios/quickstart/#before-you-begin","title":"Before you begin","text":"<p>Before you start developing your application with the SyncStage SDK, you need to opt-in to Early Access Developer program and get your SyncStage SDK secrets. Once you have opted-in we will contact you to provide you with your SDK secrets. The SDK secrets are your credentials that authenticates requests associated with your project. </p> <p>Become an Early Access Developer</p>"},{"location":"ios/quickstart/#start-with-an-example-project","title":"Start with an example project","text":"<p>The best way to start with SyncStage is by trying out our example project available on GitHub SyncStage Test App on iOS.</p>"},{"location":"ios/quickstart/#use-syncstage-sdk-in-your-application","title":"Use SyncStage SDK in your application","text":""},{"location":"ios/quickstart/#1-add-package-dependency","title":"1. Add package dependency.","text":"<pre><code>dependencies: [\n    .package(url: \"https://github.com/opensesamemedia/SyncStageSwiftPackage.git\", .upToNextMajor(from: \"0.6.2\"))\n]\n</code></pre>"},{"location":"ios/quickstart/#2-add-the-following-permissions-to-infoplist","title":"2. Add the following permissions to info.plist.","text":"<pre><code>Privacy - Microphone Usage Description (Need microphone access for audio recording)\nPrivacy - Camera Usage Description (No need for camera access), required by ffmpeg\nPrivacy - Location When In Use Usage Description, required to get better service results\nPrivacy - Location Default Accuracy Reduced, set it to YES, no need for accurate location.\n</code></pre>"},{"location":"ios/quickstart/#3-enable-background-modes","title":"3. Enable background modes.","text":"<p>SyncStage SDK requires the audio background mode to be enabled to allow streaming, recording in background.</p> <p><code>Audio, AirPlay, Picture in Picture</code></p>"},{"location":"ios/quickstart/#4-add-syncstagesecretplist-to-your-xcode-project-and-make-sure-that-it-is-added-to-the-copy-bundle-resources-in-the-target-build-phases","title":"4. Add SyncStageSecret.plist to your xcode project, and make sure that it is added to the \u201cCopy Bundle Resources\u201d in the target build phases.","text":"<p>SyncStageSecret.plist is assigned to one application. File contains confidential credentials that allow access to your SyncStage resources. </p> <p>Security tip</p> <p>We strongly recommend storing applicationSecretKey securely in your backend and provide it as a parameter at SyncStage SDK object instantiation. Having implemented the supply of the applicationSecretKey from your protected backend, you can remove that parameter from the .plist.</p>"},{"location":"ios/quickstart/#5-integrate-the-syncstage-class-with-your-app","title":"5. Integrate the SyncStage class with your app.","text":"<p>Here you can find a list of:</p> <ul> <li>SDK Methods</li> <li>SDK Delegates</li> </ul>"},{"location":"ios/sdk-delegates/","title":"Delegates","text":""},{"location":"ios/sdk-delegates/#070","title":"0.7.0","text":""},{"location":"ios/sdk-delegates/#syncstage-delegates","title":"SyncStage delegates","text":"<p>SyncStage class provide two delegate:, <code>SyncStageUserDelegate</code> and <code>SyncStageConnectivityDelegate</code> which provide a set of callbacks to inform your application about asynchronous events from the SyncStage.</p>"},{"location":"ios/sdk-delegates/#syncstageuserdelegate","title":"SyncStageUserDelegate","text":"<p>Responsible for getting callbacks about users' state in the session.</p> <pre><code>protocol SyncStageUserDelegate: NSObject {\n    // called when a user joins a session\n    func userJoined(connection: Connection)\n\n    // called when a user leaves a session\n    func userLeft(identifier: String)\n\n    // called when a user mutes himself\n    func userMuted(identifier: String)\n\n    // called when a user unmutes himself\n    func userUnmuted(identifier: String)\n\n    // called when session recording started\n    func sessionRecordingStarted()\n\n    // called when session recording stopped\n    func sessionRecordingStopped()\n\n    // called when the your application lose connectivity with Studio Server, after a while user will be dismissed from the session\n    func sessionOut()\n}\n</code></pre>"},{"location":"ios/sdk-delegates/#syncstageconnectivitydelegate","title":"SyncStageConnectivityDelegate","text":"<p>Responsible for getting callbacks about users' connectivity in the session.</p> <pre><code>protocol SyncStageConnectivityDelegate: NSObject {\n    // called when user loses partial connectivity as a transmitter or when get recover.\n    func transmitterConnectivityChanged(connected: Bool)\n\n    // called when the receiver loses partial connectivity for a specific user or when it recovers\n    func receiverConnectivityChanged(identifier: String, connected: Bool)\n}\n</code></pre>"},{"location":"ios/sdk-delegates/#syncstagediscoverydelegate","title":"SyncStageDiscoveryDelegate","text":"<p>Responsible for getting callbacks about available zones latency.</p> <pre><code>public protocol SyncStageDiscoveryDelegate: NSObject {\n    func discoveryResults(zones: [String])\n    func discoveryLatencyTestResults(results: [ZoneLatency])\n}\n</code></pre>"},{"location":"ios/sdk-error-codes/","title":"Error codes","text":""},{"location":"ios/sdk-error-codes/#070","title":"0.7.0","text":"<p>Most of the SDK methods return SyncStageSDKErrorCode which can be decoded using the following enum.</p> <pre><code>public enum SyncStageErrorCode: Int {\n    case unknownError = -1\n    case ok = 0\n    case configurationError = 1\n    case apiError = 2\n    case streamDoesNotExist = 3\n    case badVolumeValue = 4\n    case noZoneAvailable = 5\n    case noStudioServerAvailable = 6\n}\n</code></pre>"},{"location":"ios/sdk-methods/","title":"Methods","text":""},{"location":"ios/sdk-methods/#070","title":"0.7.0","text":""},{"location":"ios/sdk-methods/#general","title":"General","text":""},{"location":"ios/sdk-methods/#initialize","title":"Initialize","text":"<p>Initializes the SDK SyncStage object.</p> <pre><code>init(\n    applicationSecretId: String? = nil, \n    applicationSecretKey: String? = nil,\n    completion: @escaping (_ error: SyncStageError?) -&gt; Void\n)\n</code></pre> <p>Constructor parameters:</p> <ul> <li> <p><code>applicationSecretId</code> - if set to nil, SDK will look for applicationSecretId in the SyncStageSecret.plist file</p> </li> <li> <p><code>applicationSecretKey</code> - if set to nil, SDK will look for applicationSecretKey in the SyncStageSecret.plist file</p> </li> <li> <p><code>completion</code> - closure informs if setup error occurs</p> </li> </ul> <p></p>"},{"location":"ios/sdk-methods/#get-sdk-version","title":"Get SDK version","text":"<p>Returns SDK version.</p> <pre><code>func getSDKVersion() -&gt; String\n</code></pre> <p></p>"},{"location":"ios/sdk-methods/#get-best-available-server","title":"Get best available server","text":"<p>Get best available server, where a session can be created</p> <pre><code>func getBestAvailableServer(completion: @escaping (Swift.Result&lt;SyncStageSDK.ServerInstance, SyncStageSDK.SyncStageError&gt;) -&gt; Swift.Void)\n</code></pre> <p>Parameters:</p> <ul> <li><code>completion</code> - returns a server instance.</li> </ul> <p></p>"},{"location":"ios/sdk-methods/#get-server-instances","title":"Get server instances","text":"<p>Get server instances so you can select the server that is suitable for your session.</p> <pre><code>func getServerInstances(completion: @escaping (Swift.Result&lt;[SyncStageSDK.ServerInstance], SyncStageSDK.SyncStageError&gt;) -&gt; Swift.Void)\n</code></pre> <p>Parameters:</p> <ul> <li><code>completion</code> - returns a list of servers.</li> </ul> <p></p>"},{"location":"ios/sdk-methods/#session","title":"Session","text":""},{"location":"ios/sdk-methods/#create-a-session","title":"Create a session","text":"<p>Creates a session in a given zone by a given user from your user pool.</p> <pre><code>func createSession(\n    zoneId: String,\n    userId: String,\n    studioServerId: String,\n    completion: @escaping (Result&lt;SessionIdentifier, SyncStageError&gt;) -&gt; Void\n)\n</code></pre> <p>Parameters:</p> <ul> <li><code>zoneId</code> - zone in which we want to host our session</li> <li><code>userId</code> - id of your app user to match the data between SyncStage and your backend</li> <li><code>studioServerId</code> - id of the selected studio server</li> <li><code>preferFastRouting</code> - prefer fast routing allows better network performance</li> <li><code>completion</code> -  if succeeded returns a SessionIdentifier (session Id and session code)</li> </ul> <p></p>"},{"location":"ios/sdk-methods/#join-the-session","title":"Join the session","text":"<p>Joins a particular session identified by <code>sessionCode</code>.</p> <pre><code>func join(\n    sessionCode: String,\n    userId: String,\n    displayName: String? = nil,\n    zoneId: String,\n    studioServerId: String,\n    preferFastRouting: Swift.Bool = false,\n    completion: @escaping (Result&lt;Session, SyncStageError&gt;) -&gt; Void\n)\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>sessionCode</code> - the session code</p> </li> <li> <p><code>userId</code> - id of your app user to match de data between SyncStage and your backend</p> </li> <li> <p><code>displayName</code> - your app user display name</p> </li> <li> <p><code>zoneId</code> - zone in which your session is hosted</p> </li> <li> <p><code>studioServerId</code> - studio server where you are running your session</p> </li> <li> <p><code>completion</code> - if succeeded returns a Session object</p> </li> </ul> <p></p>"},{"location":"ios/sdk-methods/#get-session-state","title":"Get session state","text":"<p>Gets state of currently joined session.</p> <pre><code>func session(completion: @escaping (Result&lt;Session, SyncStageError&gt;)\n</code></pre> <p>Parameters:</p> <ul> <li><code>completion</code> - returns session state</li> </ul> <p></p>"},{"location":"ios/sdk-methods/#leave-the-session","title":"Leave the session","text":"<p>Leaves currently joined session.</p> <pre><code>func leave(completion: @escaping (_ error: SyncStageError?) -&gt; Void)\n</code></pre> <p>Parameters:</p> <ul> <li><code>completion</code> - closure informs if leave session error occurs</li> </ul> <p></p>"},{"location":"ios/sdk-methods/#audio-setup","title":"Audio setup","text":""},{"location":"ios/sdk-methods/#mute-unmute-microphone","title":"Mute / unmute microphone","text":"<p>Enables or disables microphone stream.</p> <pre><code>func toggleMicrophone(mute: Bool)\n</code></pre> <p>Parameters:</p> <ul> <li><code>mute</code>- desired state of the mute option</li> </ul> <p></p>"},{"location":"ios/sdk-methods/#is-muted","title":"Is muted","text":"<p>Returns state of microphone stream.</p> <pre><code>func isMicrophoneMuted() -&gt; Bool\n</code></pre> <p></p>"},{"location":"ios/sdk-methods/#change-receiver-volume","title":"Change receiver volume","text":"<p>Return error code if error occured</p> <pre><code>func changeReceiverVolume(identifier: String, volume: Float) -&gt; SyncStageSDK.SyncStageErrorCode\n</code></pre> <p>Parameters:</p> <ul> <li><code>identifier</code>- Session receiver identifier.</li> <li><code>volume</code>- volume float value between 0 and 100.</li> </ul> <p></p>"},{"location":"ios/sdk-methods/#get-receiver-volume","title":"Get receiver volume","text":"<p>Returns receiver volume float value.</p> <pre><code>func getReceiverVolume(identifier: String) -&gt; Float\n</code></pre> <p>Parameters:</p> <ul> <li><code>identifier</code>- Session receiver identifier.</li> </ul> <p></p>"},{"location":"ios/sdk-methods/#turn-on-off-direct-monitor","title":"Turn on / off direct monitor","text":"<p>Turns on / off direct monitor.</p> <p></p><pre><code>func toggleDirectMonitor(enable: Bool)\n</code></pre> Parameters: <ul> <li><code>enable</code>- <code>true</code> for turning on direct monitor</li> </ul> <p></p>"},{"location":"ios/sdk-methods/#get-direct-monitor-volume-value","title":"Get direct monitor volume value","text":"<p>Returns direct monitor volume float value.</p> <pre><code>func getDirectMonitorVolume() -&gt; Float\n</code></pre> <p></p>"},{"location":"ios/sdk-methods/#change-direct-monitor-volume-value","title":"Change direct monitor volume value","text":"<pre><code>func changeDirectMonitorVolume(volume: Float)\n</code></pre> <p>Parameters:</p> <ul> <li><code>volume</code>- volume float value between 1 and 100.</li> </ul> <p></p>"},{"location":"ios/sdk-methods/#is-direct-monitor-enabled","title":"Is direct monitor enabled","text":"<p>Returns a Bool indicating if the direct monitor is enabled</p> <pre><code>func isDirectMonitorEnabled() -&gt; Bool\n</code></pre> <p></p>"},{"location":"ios/sdk-methods/#turn-on-off-internal-microphone","title":"Turn on / off internal microphone","text":"<p>Turns on / off internal microphone to be used instead of default audio input i.e. headphones mic.</p> <pre><code>func toggleInternalMic(enable: Bool)\n</code></pre> <p>Parameters:</p> <ul> <li><code>enable</code>- <code>true</code> for turning on internal microphone</li> </ul> <p></p>"},{"location":"ios/sdk-methods/#network-measurements","title":"Network measurements","text":""},{"location":"ios/sdk-methods/#get-receiver-measurements","title":"Get receiver measurements","text":"<p>Returns session receiver measurements structure.</p> <pre><code>func getReceiverMeasurements(identifier: String) -&gt; SyncStageSDK.Measurements\n</code></pre> <p>Parameters:</p> <ul> <li><code>identifier</code>- session receiver identifier</li> </ul> <p></p>"},{"location":"ios/sdk-methods/#get-transmitter-measurements","title":"Get transmitter measurements","text":"<p>Returns session transmitter measurements structure.</p> <pre><code>func getTransmitterMeasurements() -&gt; SyncStageSDK.Measurements\n</code></pre> <p>Parameters:</p> <ul> <li><code>identifier</code>- session transmitter identifier.</li> </ul> <p></p>"},{"location":"ios/sdk-methods/#latency-optimization-level","title":"Latency Optimization Level","text":"<p>Click here to learn more about the Latency Optimization Level.</p>"},{"location":"ios/sdk-methods/#change-latency-optimization-level","title":"Change latency Optimization Level","text":"<p>Change the latency optimization level using of the following options:</p> <ul> <li>highQuality</li> <li>optimized</li> <li>bestPerformance</li> <li>ultraFast</li> </ul> <p></p><pre><code>func changeLatencyOptimizationLevel(value: SyncStageSDK.LatencyOptimizationLevel)\n</code></pre> Parameters: <ul> <li><code>value</code>- latency optimization level value.</li> </ul> <p></p>"},{"location":"ios/sdk-methods/#get-latency-optimization-level","title":"Get Latency Optimization Level","text":"<p>Returns latency optimization level.</p> <pre><code>func getLatencyOptimizationLevel() -&gt; SyncStageSDK.LatencyOptimizationLevel\n</code></pre> <p></p>"},{"location":"ios/sdk-methods/#turn-on-off-noise-cancellation","title":"Turn on / off noise cancellation","text":"<p>Turns on / off noise cancellation. This filter is applied on the transmitter (e.g. microphone).</p> <pre><code>func toggleNoiseCancellation(enabled: Bool)\n</code></pre> <p></p>"},{"location":"ios/sdk-methods/#session-recording","title":"Session recording","text":""},{"location":"ios/sdk-methods/#start-recording","title":"Start recording","text":"<pre><code>func startRecording(completion: @escaping (SyncStageError?) -&gt; Void)\n</code></pre> <p>Parameters:</p> <ul> <li><code>completion</code> - closure informs if start session recording error occurs</li> </ul> <p></p>"},{"location":"ios/sdk-methods/#stop-recording","title":"Stop recording","text":"<pre><code>func stopRecording(completion: @escaping (SyncStageError?) -&gt; Void)\n</code></pre> <p>Parameters:</p> <ul> <li><code>completion</code> - closure informs if stop session recording error occurs</li> </ul> <p></p>"},{"location":"ios/test-app/","title":"Test App","text":""},{"location":"ios/test-app/#test-app","title":"Test App","text":"<p>The best way to start your journey with SyncStage is by trying out our example project available on GitHub SyncStage Test App for iOS. This tutorial shows you how to clone, build, and run the application on your device.</p>"},{"location":"ios/test-app/#set-up-your-development-project","title":"Set up your development project","text":"<p>Follow these steps to create the Test App project in Xcode.</p> <ol> <li>Download and install Xcode.</li> <li>Clone or download the SyncStage Test App for iOS repository from GitHub.</li> <li>Open (double-click) the project's project.xcworkspace file to open it in Xcode. You must use the .xcworkspace file to open the project.</li> </ol>"},{"location":"ios/test-app/#get-a-syncstage-sdk-secret","title":"Get a SyncStage SDK secret","text":"<p>To run the SyncStage Test App you need to add a SyncStageSecret.plist to your Xcode project. Make sure that it is added to the \u201cCopy Bundle Resources\u201d in the target build phases.</p> <p>Don't know how to get the secret file? See the Quickstart Guide for more details.</p>"},{"location":"ios/test-app/#build-and-run-the-app","title":"Build and run the app","text":"<p>To build and run the app:</p> <ol> <li>Connect an iOS device to your computer, or select a simulator from the Xcode scheme pop-up menu.</li> <li>In Xcode, click the Product/Run menu option (or  button).</li> <li>Xcode builds the app, and then runs the app on the device or on the simulator.</li> </ol>"},{"location":"ios/test-app/#use-the-app","title":"Use the app","text":""},{"location":"ios/test-app/#create-a-session","title":"Create a session","text":"<ol> <li>Provide a nickname, e.g. User-1.</li> <li>Let SyncStage find the best Studio Server location.</li> <li>Click on the New Session button.</li> <li>Share the session code and wait for others to join you.</li> </ol> Provide nickname Automated server discovery Discovery results Create a session Invite others"},{"location":"ios/test-app/#join-a-session","title":"Join a session","text":"<ol> <li>Provide a nickname, e.g. User-2.</li> <li>Let SyncStage find the best Studio Server location.</li> <li>Input the session code.</li> <li>Click on the Join button.</li> <li>Now User-1 and User-2 are ready to have a session together!</li> </ol> <p>Note</p> <p>Currently, Studio Server discovery results for users that are joining the session are ignored - they join the session in the same location as the session creator. This is going to change in future releases.</p> Provide nickname Automated server discovery Discovery results Join a session Invite others <p>Currently, SyncStage\u2019s audio pipeline supports sessions with up to 8 users.</p>"},{"location":"ios/test-app/#other-functionalities","title":"Other functionalities","text":"<p>You can control volume levels of all participants on your end, each app user can mix volumes according to their needs. Anytime you can mute / unmute yourself or simply leave the session.</p>"},{"location":"ios/versions/0.3.1/sdk-delegates/","title":"Delegates","text":""},{"location":"ios/versions/0.3.1/sdk-delegates/#031","title":"0.3.1","text":""},{"location":"ios/versions/0.3.1/sdk-delegates/#syncstage-delegates","title":"SyncStage delegates","text":"<p>SyncStage class provide two delegate:, <code>SyncStageUserDelegate</code> and <code>SyncStageConnectivityDelegate</code> which provide a set of callbacks to inform your application about asynchronous events from the SyncStage.</p>"},{"location":"ios/versions/0.3.1/sdk-delegates/#syncstageuserdelegate","title":"SyncStageUserDelegate","text":"<p>Responsible for getting callbacks about users' state in the session.</p> <pre><code>protocol SyncStageUserDelegate: NSObject {\n    // called when a user joins a session\n    func userJoined(connection: Connection)\n\n    // called when a user leaves a session\n    func userLeft(identifier: String)\n\n    // called when a user mutes himself\n    func userMuted(identifier: String)\n\n    // called when a user unmutes himself\n    func userUnmuted(identifier: String)\n\n    // called when the your application lose connectivity with Studio Server, after a while user will be dismissed from the session\n    func sessionOut()\n}\n</code></pre>"},{"location":"ios/versions/0.3.1/sdk-delegates/#syncstageconnectivitydelegate","title":"SyncStageConnectivityDelegate","text":"<p>Responsible for getting callbacks about users' connectivity in the session.</p> <pre><code>protocol SyncStageConnectivityDelegate: NSObject {\n    // called when user loses partial connectivity as a transmitter or when get recover.\n    func transmitterConnectivityChanged(connected: Bool)\n\n    // called when the receiver loses partial connectivity for a specific user or when it recovers\n    func receiverConnectivityChanged(identifier: String, connected: Bool)\n}\n</code></pre>"},{"location":"ios/versions/0.3.1/sdk-error-codes/","title":"Error codes","text":""},{"location":"ios/versions/0.3.1/sdk-error-codes/#031","title":"0.3.1","text":"<p>Most of the SDK methods return SyncStageSDKErrorCode which can be decoded using the following enum.</p> <pre><code>public enum SyncStageErrorCode: Int {\n  case unknownError = -1\n  case ok = 0\n  case configurationError = 1\n  case apiError = 2\n  case apiUnauthorized = 3\n  case audioStreamingError = 4\n  case streamDoesNotExist = 5\n  case badVolumeValue = 6\n  case userAlreadyUsed = 7\n  case audioServerNotReachable = 8\n}\n</code></pre>"},{"location":"ios/versions/0.3.1/sdk-methods/","title":"Methods","text":""},{"location":"ios/versions/0.3.1/sdk-methods/#031","title":"0.3.1","text":""},{"location":"ios/versions/0.3.1/sdk-methods/#initialize","title":"Initialize","text":"<p>Initializes the SDK SyncStage object.</p> <pre><code>init(\n    applicationSecretId: String? = nil, \n    applicationSecretKey: String? = nil,\n    completion: @escaping (_ error: SyncStageError?) -&gt; Void\n)\n</code></pre> <p>Constructor parameters:</p> <ul> <li> <p><code>applicationSecretId</code> - if set to nil, SDK will look for applicationSecretId in the SyncStageSecret.plist file</p> </li> <li> <p><code>applicationSecretKey</code> - if set to nil, SDK will look for applicationSecretKey in the SyncStageSecret.plist file</p> </li> <li> <p><code>completion</code> - closure informs if setup error occurs</p> </li> </ul>"},{"location":"ios/versions/0.3.1/sdk-methods/#get-zones-list","title":"Get zones list","text":"<p>Gets available Zones list, where a session can be created</p> <pre><code>zoneList(completion: @escaping (Result&lt;[Zone], Error&gt;)\n</code></pre> <p>Parameters:</p> <ul> <li><code>completion</code> - returns zones list</li> </ul>"},{"location":"ios/versions/0.3.1/sdk-methods/#create-a-session","title":"Create a session","text":"<p>Creates a session in a given zone by a given user from your user pool.</p> <pre><code>createSession(\n    zoneId: String,\n    userId: String,\n    completion: @escaping (Result&lt;SessionIdentifier, SyncStageError&gt;) -&gt; Void\n)\n</code></pre> <p>Parameters:</p> <ul> <li><code>zoneId</code> - zone in which we want to host our session</li> <li><code>userId</code> - id of your app user to match the data between SyncStage and your backend</li> <li><code>completion</code> -  if succeeded returns a SessionIdentifier (session Id and session code)</li> </ul>"},{"location":"ios/versions/0.3.1/sdk-methods/#join-the-session","title":"Join the session","text":"<p>Joins a particular session identified by <code>sessionCode</code>.</p> <pre><code>join(\n    sessionCode: String,\n    userId: String,\n    displayName: String? = nil,\n    latitude: Decimal? = nil,\n    longitude: Decimal? = nil,\n    completion: @escaping (Result&lt;Session, SyncStageError&gt;) -&gt; Void\n)\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>sessionCode</code> - the session code</p> </li> <li> <p><code>userId</code> - id of your app user to match de data between SyncStage and your backend</p> </li> <li> <p><code>displayName</code> - your app user display name</p> </li> <li> <p><code>latitude</code> - current location latitude</p> </li> <li> <p><code>longitude</code> - current location longitude</p> </li> <li> <p><code>completion</code> - if succeeded returns a Session object</p> </li> </ul> <p>Note</p> <p>Latitude and longitude are now optional parameters, in the future releases it will be used to further optimize the latency.</p>"},{"location":"ios/versions/0.3.1/sdk-methods/#get-session-state","title":"Get session state","text":"<p>Gets state of currently joined session.</p> <pre><code>session(completion: @escaping (Result&lt;Session, SyncStageError&gt;)\n</code></pre> <p>Parameters:</p> <ul> <li><code>completion</code> - returns session state</li> </ul>"},{"location":"ios/versions/0.3.1/sdk-methods/#leave-the-session","title":"Leave the session","text":"<p>Leaves currently joined session.</p> <pre><code>leave(completion: @escaping (_ error: SyncStageError?) -&gt; Void)\n</code></pre> <p>Parameters:</p> <ul> <li><code>completion</code> - closure informs if leave session error occurs</li> </ul>"},{"location":"ios/versions/0.3.1/sdk-methods/#mute-unmute-microphone","title":"Mute / unmute microphone","text":"<p>Enables or disables microphone stream.</p> <pre><code>toggleMicrophone(mute: Bool)\n</code></pre> <p>Parameters:</p> <ul> <li><code>mute</code>- desired state of the mute option</li> </ul>"},{"location":"ios/versions/0.3.1/sdk-methods/#is-muted","title":"Is muted","text":"<p>Returns state of microphone stream.</p> <pre><code>isMicrophoneMuted() -&gt; Bool\n</code></pre>"},{"location":"ios/versions/0.3.1/sdk-methods/#change-receiver-volume","title":"Change receiver volume","text":"<p>Return error code if error occured</p> <pre><code>changeReceiverVolume(identifier: String, volume: Float) -&gt; SyncStageSDK.SyncStageErrorCode\n</code></pre> <p>Parameters:</p> <ul> <li><code>identifier</code>- Session receiver identifier.</li> <li><code>volume</code>- volume float value between 0 and 100.</li> </ul>"},{"location":"ios/versions/0.3.1/sdk-methods/#get-receiver-volume","title":"Get receiver volume","text":"<p>Returns receiver volume float value.</p> <pre><code>getReceiverVolume(identifier: String) -&gt; Float\n</code></pre> <p>Parameters:</p> <ul> <li><code>identifier</code>- Session receiver identifier.</li> </ul>"},{"location":"ios/versions/0.3.1/sdk-methods/#turn-on-of-direct-monitor","title":"Turn on / of direct monitor","text":"<p>Turns on / of direct monitor.</p> <p></p><pre><code>toggleDirectMonitor(enable: Bool)\n</code></pre> Parameters: <ul> <li><code>enable</code>- <code>true</code> for turning on direct monitor</li> </ul>"},{"location":"ios/versions/0.3.1/sdk-methods/#get-direct-monitor-volume-value","title":"Get direct monitor volume value","text":"<p>Returns direct monitor volume float value.</p> <pre><code>getDirectMonitorVolume() -&gt; Float\n</code></pre>"},{"location":"ios/versions/0.3.1/sdk-methods/#change-direct-monitor-volume-value","title":"Change direct monitor volume value","text":"<pre><code>changeDirectMonitorVolume(volume: Float)\n</code></pre> <p>Parameters:</p> <ul> <li><code>volume</code>- volume float value between 1 and 100.</li> </ul>"},{"location":"ios/versions/0.3.1/sdk-methods/#turn-on-of-internal-microphone","title":"Turn on / of internal microphone","text":"<p>Turns on / of internal microphone to be used instead of default audio input i.e. headphones mic.</p> <pre><code>toggleInternalMic(enable: Bool)\n</code></pre> <p>Parameters:</p> <ul> <li><code>enable</code>- <code>true</code> for turning on internal microphone</li> </ul>"},{"location":"ios/versions/0.3.1/sdk-methods/#get-receiver-measurements","title":"Get receiver measurements","text":"<p>Retruns session receiver measurements structure.</p> <pre><code>getReceiverMeasurements(identifier: String) -&gt; SyncStageSDK.Measurements\n</code></pre> <p>Parameters:</p> <ul> <li><code>identifier</code>- session receiver identifier</li> </ul>"},{"location":"ios/versions/0.3.1/sdk-methods/#get-transmitter-measurements","title":"Get transmitter measurements","text":"<p>Retruns session transmitter measurements structure.</p> <p></p><pre><code>func getTransmitterMeasurements() -&gt; SyncStageSDK.Measurements\n</code></pre> Parameters: <ul> <li><code>identifier</code>- session transmitter identifier.</li> </ul>"},{"location":"ios/versions/0.3.1/sdk-methods/#change-quality-coefficient","title":"Change quality coefficient","text":"<p>Change quality factor min 0.3 (highest performance) max 10.0 (highest quality) Default 2.0</p> <p></p><pre><code>func changeQualityCoefficient(identifier: String, quality: Double)\n</code></pre> Parameters: <ul> <li><code>identifier</code>- session receiver identifier.</li> <li><code>quality</code>- quality coefficient value.</li> </ul>"},{"location":"ios/versions/0.3.1/sdk-methods/#get-quality-coefficient","title":"Get quality coefficient","text":"<p>Returns quality coefficient.</p> <p></p><pre><code>func getQualityCoefficient(identifier: String) -&gt; Double\n</code></pre> Parameters: <ul> <li><code>identifier</code>- session receiver identifier.</li> </ul>"},{"location":"ios/versions/0.3.1/sdk-methods/#get-sdk-version","title":"Get SDK version","text":"<p>Returns SDK version.</p> <pre><code>getSDKVersion() -&gt; String\n</code></pre>"},{"location":"ios/versions/0.4.0/sdk-delegates/","title":"Delegates","text":""},{"location":"ios/versions/0.4.0/sdk-delegates/#040","title":"0.4.0","text":""},{"location":"ios/versions/0.4.0/sdk-delegates/#syncstage-delegates","title":"SyncStage delegates","text":"<p>SyncStage class provide two delegate:, <code>SyncStageUserDelegate</code> and <code>SyncStageConnectivityDelegate</code> which provide a set of callbacks to inform your application about asynchronous events from the SyncStage.</p>"},{"location":"ios/versions/0.4.0/sdk-delegates/#syncstageuserdelegate","title":"SyncStageUserDelegate","text":"<p>Responsible for getting callbacks about users' state in the session.</p> <pre><code>protocol SyncStageUserDelegate: NSObject {\n    // called when a user joins a session\n    func userJoined(connection: Connection)\n\n    // called when a user leaves a session\n    func userLeft(identifier: String)\n\n    // called when a user mutes himself\n    func userMuted(identifier: String)\n\n    // called when a user unmutes himself\n    func userUnmuted(identifier: String)\n\n    // called when the your application lose connectivity with Studio Server, after a while user will be dismissed from the session\n    func sessionOut()\n}\n</code></pre>"},{"location":"ios/versions/0.4.0/sdk-delegates/#syncstageconnectivitydelegate","title":"SyncStageConnectivityDelegate","text":"<p>Responsible for getting callbacks about users' connectivity in the session.</p> <pre><code>protocol SyncStageConnectivityDelegate: NSObject {\n    // called when user loses partial connectivity as a transmitter or when get recover.\n    func transmitterConnectivityChanged(connected: Bool)\n\n    // called when the receiver loses partial connectivity for a specific user or when it recovers\n    func receiverConnectivityChanged(identifier: String, connected: Bool)\n}\n</code></pre>"},{"location":"ios/versions/0.4.0/sdk-delegates/#syncstagediscoverydelegate","title":"SyncStageDiscoveryDelegate","text":"<p>Responsible for getting callbacks about available zones latency.</p> <pre><code>public protocol SyncStageDiscoveryDelegate: NSObject {\n    func discoveryResults(zones: [String])\n    func discoveryLatencyTestResults(results: [ZoneLatency])\n}\n</code></pre>"},{"location":"ios/versions/0.4.0/sdk-error-codes/","title":"Error codes","text":""},{"location":"ios/versions/0.4.0/sdk-error-codes/#040","title":"0.4.0","text":"<p>Most of the SDK methods return SyncStageSDKErrorCode which can be decoded using the following enum.</p> <pre><code>public enum SyncStageErrorCode: Int {\n    case unknownError = -1\n    case ok = 0\n    case configurationError = 1\n    case apiError = 2\n    case streamDoesNotExist = 3\n    case badVolumeValue = 4\n    case noZoneAvailable = 5\n    case noStudioServerAvailable = 6\n}\n</code></pre>"},{"location":"ios/versions/0.4.0/sdk-methods/","title":"Methods","text":""},{"location":"ios/versions/0.4.0/sdk-methods/#040","title":"0.4.0","text":""},{"location":"ios/versions/0.4.0/sdk-methods/#initialize","title":"Initialize","text":"<p>Initializes the SDK SyncStage object.</p> <pre><code>init(\n    applicationSecretId: String? = nil, \n    applicationSecretKey: String? = nil,\n    completion: @escaping (_ error: SyncStageError?) -&gt; Void\n)\n</code></pre> <p>Constructor parameters:</p> <ul> <li> <p><code>applicationSecretId</code> - if set to nil, SDK will look for applicationSecretId in the SyncStageSecret.plist file</p> </li> <li> <p><code>applicationSecretKey</code> - if set to nil, SDK will look for applicationSecretKey in the SyncStageSecret.plist file</p> </li> <li> <p><code>completion</code> - closure informs if setup error occurs</p> </li> </ul>"},{"location":"ios/versions/0.4.0/sdk-methods/#get-best-available-server","title":"Get best available server","text":"<p>Get best available server, where a session can be created</p> <pre><code>getBestAvailableServer(completion: @escaping (Swift.Result&lt;SyncStageSDK.ServerInstance, SyncStageSDK.SyncStageError&gt;) -&gt; Swift.Void)\n</code></pre> <p>Parameters:</p> <ul> <li><code>completion</code> - returns a server instance.</li> </ul>"},{"location":"ios/versions/0.4.0/sdk-methods/#get-server-instances","title":"Get server instances","text":"<p>Get server instances so you can select the server that is suitable for your session.</p> <pre><code>getServerInstances(completion: @escaping (Swift.Result&lt;[SyncStageSDK.ServerInstance], SyncStageSDK.SyncStageError&gt;) -&gt; Swift.Void)\n</code></pre> <p>Parameters:</p> <ul> <li><code>completion</code> - returns a list of servers.</li> </ul>"},{"location":"ios/versions/0.4.0/sdk-methods/#create-a-session","title":"Create a session","text":"<p>Creates a session in a given zone by a given user from your user pool.</p> <pre><code>createSession(\n    zoneId: String,\n    userId: String,\n    studioServerId: String,\n    completion: @escaping (Result&lt;SessionIdentifier, SyncStageError&gt;) -&gt; Void\n)\n</code></pre> <p>Parameters:</p> <ul> <li><code>zoneId</code> - zone in which we want to host our session</li> <li><code>userId</code> - id of your app user to match the data between SyncStage and your backend</li> <li><code>studioServerId</code> - id of the selected studio server</li> <li><code>completion</code> -  if succeeded returns a SessionIdentifier (session Id and session code)</li> </ul>"},{"location":"ios/versions/0.4.0/sdk-methods/#join-the-session","title":"Join the session","text":"<p>Joins a particular session identified by <code>sessionCode</code>.</p> <pre><code>join(\n    sessionCode: String,\n    userId: String,\n    displayName: String? = nil,\n    zoneId: String,\n    studioServerId: String,\n    completion: @escaping (Result&lt;Session, SyncStageError&gt;) -&gt; Void\n)\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>sessionCode</code> - the session code</p> </li> <li> <p><code>userId</code> - id of your app user to match de data between SyncStage and your backend</p> </li> <li> <p><code>displayName</code> - your app user display name</p> </li> <li> <p><code>zoneId</code> - zone in which your session is hosted</p> </li> <li> <p><code>studioServerId</code> - studio server where you are running your session</p> </li> <li> <p><code>completion</code> - if succeeded returns a Session object</p> </li> </ul>"},{"location":"ios/versions/0.4.0/sdk-methods/#get-session-state","title":"Get session state","text":"<p>Gets state of currently joined session.</p> <pre><code>session(completion: @escaping (Result&lt;Session, SyncStageError&gt;)\n</code></pre> <p>Parameters:</p> <ul> <li><code>completion</code> - returns session state</li> </ul>"},{"location":"ios/versions/0.4.0/sdk-methods/#leave-the-session","title":"Leave the session","text":"<p>Leaves currently joined session.</p> <pre><code>leave(completion: @escaping (_ error: SyncStageError?) -&gt; Void)\n</code></pre> <p>Parameters:</p> <ul> <li><code>completion</code> - closure informs if leave session error occurs</li> </ul>"},{"location":"ios/versions/0.4.0/sdk-methods/#mute-unmute-microphone","title":"Mute / unmute microphone","text":"<p>Enables or disables microphone stream.</p> <pre><code>toggleMicrophone(mute: Bool)\n</code></pre> <p>Parameters:</p> <ul> <li><code>mute</code>- desired state of the mute option</li> </ul>"},{"location":"ios/versions/0.4.0/sdk-methods/#is-muted","title":"Is muted","text":"<p>Returns state of microphone stream.</p> <pre><code>isMicrophoneMuted() -&gt; Bool\n</code></pre>"},{"location":"ios/versions/0.4.0/sdk-methods/#change-receiver-volume","title":"Change receiver volume","text":"<p>Return error code if error occured</p> <pre><code>changeReceiverVolume(identifier: String, volume: Float) -&gt; SyncStageSDK.SyncStageErrorCode\n</code></pre> <p>Parameters:</p> <ul> <li><code>identifier</code>- Session receiver identifier.</li> <li><code>volume</code>- volume float value between 0 and 100.</li> </ul>"},{"location":"ios/versions/0.4.0/sdk-methods/#get-receiver-volume","title":"Get receiver volume","text":"<p>Returns receiver volume float value.</p> <pre><code>getReceiverVolume(identifier: String) -&gt; Float\n</code></pre> <p>Parameters:</p> <ul> <li><code>identifier</code>- Session receiver identifier.</li> </ul>"},{"location":"ios/versions/0.4.0/sdk-methods/#turn-on-of-direct-monitor","title":"Turn on / of direct monitor","text":"<p>Turns on / of direct monitor.</p> <p></p><pre><code>toggleDirectMonitor(enable: Bool)\n</code></pre> Parameters: <ul> <li><code>enable</code>- <code>true</code> for turning on direct monitor</li> </ul>"},{"location":"ios/versions/0.4.0/sdk-methods/#get-direct-monitor-volume-value","title":"Get direct monitor volume value","text":"<p>Returns direct monitor volume float value.</p> <pre><code>getDirectMonitorVolume() -&gt; Float\n</code></pre>"},{"location":"ios/versions/0.4.0/sdk-methods/#change-direct-monitor-volume-value","title":"Change direct monitor volume value","text":"<pre><code>changeDirectMonitorVolume(volume: Float)\n</code></pre> <p>Parameters:</p> <ul> <li><code>volume</code>- volume float value between 1 and 100.</li> </ul>"},{"location":"ios/versions/0.4.0/sdk-methods/#turn-on-of-internal-microphone","title":"Turn on / of internal microphone","text":"<p>Turns on / of internal microphone to be used instead of default audio input i.e. headphones mic.</p> <pre><code>toggleInternalMic(enable: Bool)\n</code></pre> <p>Parameters:</p> <ul> <li><code>enable</code>- <code>true</code> for turning on internal microphone</li> </ul>"},{"location":"ios/versions/0.4.0/sdk-methods/#get-receiver-measurements","title":"Get receiver measurements","text":"<p>Retruns session receiver measurements structure.</p> <pre><code>getReceiverMeasurements(identifier: String) -&gt; SyncStageSDK.Measurements\n</code></pre> <p>Parameters:</p> <ul> <li><code>identifier</code>- session receiver identifier</li> </ul>"},{"location":"ios/versions/0.4.0/sdk-methods/#get-transmitter-measurements","title":"Get transmitter measurements","text":"<p>Retruns session transmitter measurements structure.</p> <p></p><pre><code>func getTransmitterMeasurements() -&gt; SyncStageSDK.Measurements\n</code></pre> Parameters: <ul> <li><code>identifier</code>- session transmitter identifier.</li> </ul>"},{"location":"ios/versions/0.4.0/sdk-methods/#change-latency-optimization-level","title":"Change latency optimization level","text":"<p>Change the latency optimization level using of the following options: Quality, optimized, bestPerformance, ultraFast.</p> <p></p><pre><code>changeLatencyOptimizationLevel(value: SyncStageSDK.LatencyOptimizationLevel)\n</code></pre> Parameters: <ul> <li><code>value</code>- latency optimization level value.</li> </ul>"},{"location":"ios/versions/0.4.0/sdk-methods/#get-latency-optimization-level","title":"Get latency optimization level","text":"<p>Returns latency optimization level.</p> <pre><code>getLatencyOptimizationLevel() -&gt; SyncStageSDK.LatencyOptimizationLevel\n</code></pre>"},{"location":"ios/versions/0.4.0/sdk-methods/#get-sdk-version","title":"Get SDK version","text":"<p>Returns SDK version.</p> <pre><code>getSDKVersion() -&gt; String\n</code></pre>"},{"location":"ios/versions/0.5.0/sdk-delegates/","title":"Delegates","text":""},{"location":"ios/versions/0.5.0/sdk-delegates/#050","title":"0.5.0","text":""},{"location":"ios/versions/0.5.0/sdk-delegates/#syncstage-delegates","title":"SyncStage delegates","text":"<p>SyncStage class provide two delegate:, <code>SyncStageUserDelegate</code> and <code>SyncStageConnectivityDelegate</code> which provide a set of callbacks to inform your application about asynchronous events from the SyncStage.</p>"},{"location":"ios/versions/0.5.0/sdk-delegates/#syncstageuserdelegate","title":"SyncStageUserDelegate","text":"<p>Responsible for getting callbacks about users' state in the session.</p> <pre><code>protocol SyncStageUserDelegate: NSObject {\n    // called when a user joins a session\n    func userJoined(connection: Connection)\n\n    // called when a user leaves a session\n    func userLeft(identifier: String)\n\n    // called when a user mutes himself\n    func userMuted(identifier: String)\n\n    // called when a user unmutes himself\n    func userUnmuted(identifier: String)\n\n    // called when session recording started\n    func sessionRecordingStarted()\n\n    // called when session recording stopped\n    func sessionRecordingStopped()\n\n    // called when the your application lose connectivity with Studio Server, after a while user will be dismissed from the session\n    func sessionOut()\n}\n</code></pre>"},{"location":"ios/versions/0.5.0/sdk-delegates/#syncstageconnectivitydelegate","title":"SyncStageConnectivityDelegate","text":"<p>Responsible for getting callbacks about users' connectivity in the session.</p> <pre><code>protocol SyncStageConnectivityDelegate: NSObject {\n    // called when user loses partial connectivity as a transmitter or when get recover.\n    func transmitterConnectivityChanged(connected: Bool)\n\n    // called when the receiver loses partial connectivity for a specific user or when it recovers\n    func receiverConnectivityChanged(identifier: String, connected: Bool)\n}\n</code></pre>"},{"location":"ios/versions/0.5.0/sdk-delegates/#syncstagediscoverydelegate","title":"SyncStageDiscoveryDelegate","text":"<p>Responsible for getting callbacks about available zones latency.</p> <pre><code>public protocol SyncStageDiscoveryDelegate: NSObject {\n    func discoveryResults(zones: [String])\n    func discoveryLatencyTestResults(results: [ZoneLatency])\n}\n</code></pre>"},{"location":"ios/versions/0.5.0/sdk-error-codes/","title":"Error codes","text":""},{"location":"ios/versions/0.5.0/sdk-error-codes/#050","title":"0.5.0","text":"<p>Most of the SDK methods return SyncStageSDKErrorCode which can be decoded using the following enum.</p> <pre><code>public enum SyncStageErrorCode: Int {\n    case unknownError = -1\n    case ok = 0\n    case configurationError = 1\n    case apiError = 2\n    case streamDoesNotExist = 3\n    case badVolumeValue = 4\n    case noZoneAvailable = 5\n    case noStudioServerAvailable = 6\n}\n</code></pre>"},{"location":"ios/versions/0.5.0/sdk-methods/","title":"Methods","text":""},{"location":"ios/versions/0.5.0/sdk-methods/#050","title":"0.5.0","text":""},{"location":"ios/versions/0.5.0/sdk-methods/#general","title":"General","text":""},{"location":"ios/versions/0.5.0/sdk-methods/#initialize","title":"Initialize","text":"<p>Initializes the SDK SyncStage object.</p> <pre><code>init(\n    applicationSecretId: String? = nil, \n    applicationSecretKey: String? = nil,\n    completion: @escaping (_ error: SyncStageError?) -&gt; Void\n)\n</code></pre> <p>Constructor parameters:</p> <ul> <li> <p><code>applicationSecretId</code> - if set to nil, SDK will look for applicationSecretId in the SyncStageSecret.plist file</p> </li> <li> <p><code>applicationSecretKey</code> - if set to nil, SDK will look for applicationSecretKey in the SyncStageSecret.plist file</p> </li> <li> <p><code>completion</code> - closure informs if setup error occurs</p> </li> </ul>"},{"location":"ios/versions/0.5.0/sdk-methods/#get-sdk-version","title":"Get SDK version","text":"<p>Returns SDK version.</p> <pre><code>func getSDKVersion() -&gt; String\n</code></pre>"},{"location":"ios/versions/0.5.0/sdk-methods/#get-best-available-server","title":"Get best available server","text":"<p>Get best available server, where a session can be created</p> <pre><code>func getBestAvailableServer(completion: @escaping (Swift.Result&lt;SyncStageSDK.ServerInstance, SyncStageSDK.SyncStageError&gt;) -&gt; Swift.Void)\n</code></pre> <p>Parameters:</p> <ul> <li><code>completion</code> - returns a server instance.</li> </ul>"},{"location":"ios/versions/0.5.0/sdk-methods/#get-server-instances","title":"Get server instances","text":"<p>Get server instances so you can select the server that is suitable for your session.</p> <pre><code>func getServerInstances(completion: @escaping (Swift.Result&lt;[SyncStageSDK.ServerInstance], SyncStageSDK.SyncStageError&gt;) -&gt; Swift.Void)\n</code></pre> <p>Parameters:</p> <ul> <li><code>completion</code> - returns a list of servers.</li> </ul>"},{"location":"ios/versions/0.5.0/sdk-methods/#session","title":"Session","text":""},{"location":"ios/versions/0.5.0/sdk-methods/#create-a-session","title":"Create a session","text":"<p>Creates a session in a given zone by a given user from your user pool.</p> <pre><code>func createSession(\n    zoneId: String,\n    userId: String,\n    studioServerId: String,\n    completion: @escaping (Result&lt;SessionIdentifier, SyncStageError&gt;) -&gt; Void\n)\n</code></pre> <p>Parameters:</p> <ul> <li><code>zoneId</code> - zone in which we want to host our session</li> <li><code>userId</code> - id of your app user to match the data between SyncStage and your backend</li> <li><code>studioServerId</code> - id of the selected studio server</li> <li><code>completion</code> -  if succeeded returns a SessionIdentifier (session Id and session code)</li> </ul>"},{"location":"ios/versions/0.5.0/sdk-methods/#join-the-session","title":"Join the session","text":"<p>Joins a particular session identified by <code>sessionCode</code>.</p> <pre><code>func join(\n    sessionCode: String,\n    userId: String,\n    displayName: String? = nil,\n    zoneId: String,\n    studioServerId: String,\n    completion: @escaping (Result&lt;Session, SyncStageError&gt;) -&gt; Void\n)\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>sessionCode</code> - the session code</p> </li> <li> <p><code>userId</code> - id of your app user to match de data between SyncStage and your backend</p> </li> <li> <p><code>displayName</code> - your app user display name</p> </li> <li> <p><code>zoneId</code> - zone in which your session is hosted</p> </li> <li> <p><code>studioServerId</code> - studio server where you are running your session</p> </li> <li> <p><code>completion</code> - if succeeded returns a Session object</p> </li> </ul>"},{"location":"ios/versions/0.5.0/sdk-methods/#get-session-state","title":"Get session state","text":"<p>Gets state of currently joined session.</p> <pre><code>func session(completion: @escaping (Result&lt;Session, SyncStageError&gt;)\n</code></pre> <p>Parameters:</p> <ul> <li><code>completion</code> - returns session state</li> </ul>"},{"location":"ios/versions/0.5.0/sdk-methods/#leave-the-session","title":"Leave the session","text":"<p>Leaves currently joined session.</p> <pre><code>func leave(completion: @escaping (_ error: SyncStageError?) -&gt; Void)\n</code></pre> <p>Parameters:</p> <ul> <li><code>completion</code> - closure informs if leave session error occurs</li> </ul>"},{"location":"ios/versions/0.5.0/sdk-methods/#audio-setup","title":"Audio setup","text":""},{"location":"ios/versions/0.5.0/sdk-methods/#mute-unmute-microphone","title":"Mute / unmute microphone","text":"<p>Enables or disables microphone stream.</p> <pre><code>func toggleMicrophone(mute: Bool)\n</code></pre> <p>Parameters:</p> <ul> <li><code>mute</code>- desired state of the mute option</li> </ul>"},{"location":"ios/versions/0.5.0/sdk-methods/#is-muted","title":"Is muted","text":"<p>Returns state of microphone stream.</p> <pre><code>func isMicrophoneMuted() -&gt; Bool\n</code></pre>"},{"location":"ios/versions/0.5.0/sdk-methods/#change-receiver-volume","title":"Change receiver volume","text":"<p>Return error code if error occured</p> <pre><code>func changeReceiverVolume(identifier: String, volume: Float) -&gt; SyncStageSDK.SyncStageErrorCode\n</code></pre> <p>Parameters:</p> <ul> <li><code>identifier</code>- Session receiver identifier.</li> <li><code>volume</code>- volume float value between 0 and 100.</li> </ul>"},{"location":"ios/versions/0.5.0/sdk-methods/#get-receiver-volume","title":"Get receiver volume","text":"<p>Returns receiver volume float value.</p> <pre><code>func getReceiverVolume(identifier: String) -&gt; Float\n</code></pre> <p>Parameters:</p> <ul> <li><code>identifier</code>- Session receiver identifier.</li> </ul>"},{"location":"ios/versions/0.5.0/sdk-methods/#turn-on-of-direct-monitor","title":"Turn on / of direct monitor","text":"<p>Turns on / of direct monitor.</p> <p></p><pre><code>func toggleDirectMonitor(enable: Bool)\n</code></pre> Parameters: <ul> <li><code>enable</code>- <code>true</code> for turning on direct monitor</li> </ul>"},{"location":"ios/versions/0.5.0/sdk-methods/#get-direct-monitor-volume-value","title":"Get direct monitor volume value","text":"<p>Returns direct monitor volume float value.</p> <pre><code>func getDirectMonitorVolume() -&gt; Float\n</code></pre>"},{"location":"ios/versions/0.5.0/sdk-methods/#change-direct-monitor-volume-value","title":"Change direct monitor volume value","text":"<pre><code>func changeDirectMonitorVolume(volume: Float)\n</code></pre> <p>Parameters:</p> <ul> <li><code>volume</code>- volume float value between 1 and 100.</li> </ul>"},{"location":"ios/versions/0.5.0/sdk-methods/#turn-on-of-internal-microphone","title":"Turn on / of internal microphone","text":"<p>Turns on / of internal microphone to be used instead of default audio input i.e. headphones mic.</p> <pre><code>func toggleInternalMic(enable: Bool)\n</code></pre> <p>Parameters:</p> <ul> <li><code>enable</code>- <code>true</code> for turning on internal microphone</li> </ul>"},{"location":"ios/versions/0.5.0/sdk-methods/#network-measurements","title":"Network measurements","text":""},{"location":"ios/versions/0.5.0/sdk-methods/#get-receiver-measurements","title":"Get receiver measurements","text":"<p>Returns session receiver measurements structure.</p> <pre><code>func getReceiverMeasurements(identifier: String) -&gt; SyncStageSDK.Measurements\n</code></pre> <p>Parameters:</p> <ul> <li><code>identifier</code>- session receiver identifier</li> </ul>"},{"location":"ios/versions/0.5.0/sdk-methods/#get-transmitter-measurements","title":"Get transmitter measurements","text":"<p>Returns session transmitter measurements structure.</p> <pre><code>func getTransmitterMeasurements() -&gt; SyncStageSDK.Measurements\n</code></pre> <p>Parameters:</p> <ul> <li><code>identifier</code>- session transmitter identifier.</li> </ul>"},{"location":"ios/versions/0.5.0/sdk-methods/#latency-optimization-level","title":"Latency Optimization Level","text":"<p>Click here to learn more about the Latency Optimization Level.</p>"},{"location":"ios/versions/0.5.0/sdk-methods/#change-latency-optimization-level","title":"Change latency Optimization Level","text":"<p>Change the latency optimization level using of the following options:</p> <ul> <li>highQuality</li> <li>optimized</li> <li>bestPerformance</li> <li>ultraFast</li> </ul> <p></p><pre><code>func changeLatencyOptimizationLevel(value: SyncStageSDK.LatencyOptimizationLevel)\n</code></pre> Parameters: <ul> <li><code>value</code>- latency optimization level value.</li> </ul>"},{"location":"ios/versions/0.5.0/sdk-methods/#get-latency-optimization-level","title":"Get Latency Optimization Level","text":"<p>Returns latency optimization level.</p> <pre><code>func getLatencyOptimizationLevel() -&gt; SyncStageSDK.LatencyOptimizationLevel\n</code></pre>"},{"location":"ios/versions/0.5.0/sdk-methods/#session-recording","title":"Session recording","text":""},{"location":"ios/versions/0.5.0/sdk-methods/#start-recording","title":"Start recording","text":"<pre><code>func startRecording(completion: @escaping (SyncStageError?) -&gt; Void)\n</code></pre> <p>Parameters:</p> <ul> <li><code>completion</code> - closure informs if start session recording error occurs</li> </ul>"},{"location":"ios/versions/0.5.0/sdk-methods/#stop-recording","title":"Stop recording","text":"<pre><code>func stopRecording(completion: @escaping (SyncStageError?) -&gt; Void)\n</code></pre> <p>Parameters:</p> <ul> <li><code>completion</code> - closure informs if stop session recording error occurs</li> </ul>"},{"location":"ios/versions/0.5.1/sdk-delegates/","title":"Delegates","text":""},{"location":"ios/versions/0.5.1/sdk-delegates/#051","title":"0.5.1","text":""},{"location":"ios/versions/0.5.1/sdk-delegates/#syncstage-delegates","title":"SyncStage delegates","text":"<p>SyncStage class provide two delegate:, <code>SyncStageUserDelegate</code> and <code>SyncStageConnectivityDelegate</code> which provide a set of callbacks to inform your application about asynchronous events from the SyncStage.</p>"},{"location":"ios/versions/0.5.1/sdk-delegates/#syncstageuserdelegate","title":"SyncStageUserDelegate","text":"<p>Responsible for getting callbacks about users' state in the session.</p> <pre><code>protocol SyncStageUserDelegate: NSObject {\n    // called when a user joins a session\n    func userJoined(connection: Connection)\n\n    // called when a user leaves a session\n    func userLeft(identifier: String)\n\n    // called when a user mutes himself\n    func userMuted(identifier: String)\n\n    // called when a user unmutes himself\n    func userUnmuted(identifier: String)\n\n    // called when session recording started\n    func sessionRecordingStarted()\n\n    // called when session recording stopped\n    func sessionRecordingStopped()\n\n    // called when the your application lose connectivity with Studio Server, after a while user will be dismissed from the session\n    func sessionOut()\n}\n</code></pre>"},{"location":"ios/versions/0.5.1/sdk-delegates/#syncstageconnectivitydelegate","title":"SyncStageConnectivityDelegate","text":"<p>Responsible for getting callbacks about users' connectivity in the session.</p> <pre><code>protocol SyncStageConnectivityDelegate: NSObject {\n    // called when user loses partial connectivity as a transmitter or when get recover.\n    func transmitterConnectivityChanged(connected: Bool)\n\n    // called when the receiver loses partial connectivity for a specific user or when it recovers\n    func receiverConnectivityChanged(identifier: String, connected: Bool)\n}\n</code></pre>"},{"location":"ios/versions/0.5.1/sdk-delegates/#syncstagediscoverydelegate","title":"SyncStageDiscoveryDelegate","text":"<p>Responsible for getting callbacks about available zones latency.</p> <pre><code>public protocol SyncStageDiscoveryDelegate: NSObject {\n    func discoveryResults(zones: [String])\n    func discoveryLatencyTestResults(results: [ZoneLatency])\n}\n</code></pre>"},{"location":"ios/versions/0.5.1/sdk-error-codes/","title":"Error codes","text":""},{"location":"ios/versions/0.5.1/sdk-error-codes/#051","title":"0.5.1","text":"<p>Most of the SDK methods return SyncStageSDKErrorCode which can be decoded using the following enum.</p> <pre><code>public enum SyncStageErrorCode: Int {\n    case unknownError = -1\n    case ok = 0\n    case configurationError = 1\n    case apiError = 2\n    case streamDoesNotExist = 3\n    case badVolumeValue = 4\n    case noZoneAvailable = 5\n    case noStudioServerAvailable = 6\n}\n</code></pre>"},{"location":"ios/versions/0.5.1/sdk-methods/","title":"Methods","text":""},{"location":"ios/versions/0.5.1/sdk-methods/#051","title":"0.5.1","text":""},{"location":"ios/versions/0.5.1/sdk-methods/#general","title":"General","text":""},{"location":"ios/versions/0.5.1/sdk-methods/#initialize","title":"Initialize","text":"<p>Initializes the SDK SyncStage object.</p> <pre><code>init(\n    applicationSecretId: String? = nil, \n    applicationSecretKey: String? = nil,\n    completion: @escaping (_ error: SyncStageError?) -&gt; Void\n)\n</code></pre> <p>Constructor parameters:</p> <ul> <li> <p><code>applicationSecretId</code> - if set to nil, SDK will look for applicationSecretId in the SyncStageSecret.plist file</p> </li> <li> <p><code>applicationSecretKey</code> - if set to nil, SDK will look for applicationSecretKey in the SyncStageSecret.plist file</p> </li> <li> <p><code>completion</code> - closure informs if setup error occurs</p> </li> </ul>"},{"location":"ios/versions/0.5.1/sdk-methods/#get-sdk-version","title":"Get SDK version","text":"<p>Returns SDK version.</p> <pre><code>func getSDKVersion() -&gt; String\n</code></pre>"},{"location":"ios/versions/0.5.1/sdk-methods/#get-best-available-server","title":"Get best available server","text":"<p>Get best available server, where a session can be created</p> <pre><code>func getBestAvailableServer(completion: @escaping (Swift.Result&lt;SyncStageSDK.ServerInstance, SyncStageSDK.SyncStageError&gt;) -&gt; Swift.Void)\n</code></pre> <p>Parameters:</p> <ul> <li><code>completion</code> - returns a server instance.</li> </ul>"},{"location":"ios/versions/0.5.1/sdk-methods/#get-server-instances","title":"Get server instances","text":"<p>Get server instances so you can select the server that is suitable for your session.</p> <pre><code>func getServerInstances(completion: @escaping (Swift.Result&lt;[SyncStageSDK.ServerInstance], SyncStageSDK.SyncStageError&gt;) -&gt; Swift.Void)\n</code></pre> <p>Parameters:</p> <ul> <li><code>completion</code> - returns a list of servers.</li> </ul>"},{"location":"ios/versions/0.5.1/sdk-methods/#session","title":"Session","text":""},{"location":"ios/versions/0.5.1/sdk-methods/#create-a-session","title":"Create a session","text":"<p>Creates a session in a given zone by a given user from your user pool.</p> <pre><code>func createSession(\n    zoneId: String,\n    userId: String,\n    studioServerId: String,\n    completion: @escaping (Result&lt;SessionIdentifier, SyncStageError&gt;) -&gt; Void\n)\n</code></pre> <p>Parameters:</p> <ul> <li><code>zoneId</code> - zone in which we want to host our session</li> <li><code>userId</code> - id of your app user to match the data between SyncStage and your backend</li> <li><code>studioServerId</code> - id of the selected studio server</li> <li><code>preferFastRouting</code> - prefer fast routing allows better network performance</li> <li><code>completion</code> -  if succeeded returns a SessionIdentifier (session Id and session code)</li> </ul>"},{"location":"ios/versions/0.5.1/sdk-methods/#join-the-session","title":"Join the session","text":"<p>Joins a particular session identified by <code>sessionCode</code>.</p> <pre><code>func join(\n    sessionCode: String,\n    userId: String,\n    displayName: String? = nil,\n    zoneId: String,\n    studioServerId: String,\n    preferFastRouting: Swift.Bool = false,\n    completion: @escaping (Result&lt;Session, SyncStageError&gt;) -&gt; Void\n)\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>sessionCode</code> - the session code</p> </li> <li> <p><code>userId</code> - id of your app user to match de data between SyncStage and your backend</p> </li> <li> <p><code>displayName</code> - your app user display name</p> </li> <li> <p><code>zoneId</code> - zone in which your session is hosted</p> </li> <li> <p><code>studioServerId</code> - studio server where you are running your session</p> </li> <li> <p><code>completion</code> - if succeeded returns a Session object</p> </li> </ul>"},{"location":"ios/versions/0.5.1/sdk-methods/#get-session-state","title":"Get session state","text":"<p>Gets state of currently joined session.</p> <pre><code>func session(completion: @escaping (Result&lt;Session, SyncStageError&gt;)\n</code></pre> <p>Parameters:</p> <ul> <li><code>completion</code> - returns session state</li> </ul>"},{"location":"ios/versions/0.5.1/sdk-methods/#leave-the-session","title":"Leave the session","text":"<p>Leaves currently joined session.</p> <pre><code>func leave(completion: @escaping (_ error: SyncStageError?) -&gt; Void)\n</code></pre> <p>Parameters:</p> <ul> <li><code>completion</code> - closure informs if leave session error occurs</li> </ul>"},{"location":"ios/versions/0.5.1/sdk-methods/#audio-setup","title":"Audio setup","text":""},{"location":"ios/versions/0.5.1/sdk-methods/#mute-unmute-microphone","title":"Mute / unmute microphone","text":"<p>Enables or disables microphone stream.</p> <pre><code>func toggleMicrophone(mute: Bool)\n</code></pre> <p>Parameters:</p> <ul> <li><code>mute</code>- desired state of the mute option</li> </ul>"},{"location":"ios/versions/0.5.1/sdk-methods/#is-muted","title":"Is muted","text":"<p>Returns state of microphone stream.</p> <pre><code>func isMicrophoneMuted() -&gt; Bool\n</code></pre>"},{"location":"ios/versions/0.5.1/sdk-methods/#change-receiver-volume","title":"Change receiver volume","text":"<p>Return error code if error occured</p> <pre><code>func changeReceiverVolume(identifier: String, volume: Float) -&gt; SyncStageSDK.SyncStageErrorCode\n</code></pre> <p>Parameters:</p> <ul> <li><code>identifier</code>- Session receiver identifier.</li> <li><code>volume</code>- volume float value between 0 and 100.</li> </ul>"},{"location":"ios/versions/0.5.1/sdk-methods/#get-receiver-volume","title":"Get receiver volume","text":"<p>Returns receiver volume float value.</p> <pre><code>func getReceiverVolume(identifier: String) -&gt; Float\n</code></pre> <p>Parameters:</p> <ul> <li><code>identifier</code>- Session receiver identifier.</li> </ul>"},{"location":"ios/versions/0.5.1/sdk-methods/#turn-on-of-direct-monitor","title":"Turn on / of direct monitor","text":"<p>Turns on / of direct monitor.</p> <p></p><pre><code>func toggleDirectMonitor(enable: Bool)\n</code></pre> Parameters: <ul> <li><code>enable</code>- <code>true</code> for turning on direct monitor</li> </ul>"},{"location":"ios/versions/0.5.1/sdk-methods/#get-direct-monitor-volume-value","title":"Get direct monitor volume value","text":"<p>Returns direct monitor volume float value.</p> <pre><code>func getDirectMonitorVolume() -&gt; Float\n</code></pre>"},{"location":"ios/versions/0.5.1/sdk-methods/#change-direct-monitor-volume-value","title":"Change direct monitor volume value","text":"<pre><code>func changeDirectMonitorVolume(volume: Float)\n</code></pre> <p>Parameters:</p> <ul> <li><code>volume</code>- volume float value between 1 and 100.</li> </ul>"},{"location":"ios/versions/0.5.1/sdk-methods/#turn-on-of-internal-microphone","title":"Turn on / of internal microphone","text":"<p>Turns on / of internal microphone to be used instead of default audio input i.e. headphones mic.</p> <pre><code>func toggleInternalMic(enable: Bool)\n</code></pre> <p>Parameters:</p> <ul> <li><code>enable</code>- <code>true</code> for turning on internal microphone</li> </ul>"},{"location":"ios/versions/0.5.1/sdk-methods/#network-measurements","title":"Network measurements","text":""},{"location":"ios/versions/0.5.1/sdk-methods/#get-receiver-measurements","title":"Get receiver measurements","text":"<p>Returns session receiver measurements structure.</p> <pre><code>func getReceiverMeasurements(identifier: String) -&gt; SyncStageSDK.Measurements\n</code></pre> <p>Parameters:</p> <ul> <li><code>identifier</code>- session receiver identifier</li> </ul>"},{"location":"ios/versions/0.5.1/sdk-methods/#get-transmitter-measurements","title":"Get transmitter measurements","text":"<p>Returns session transmitter measurements structure.</p> <pre><code>func getTransmitterMeasurements() -&gt; SyncStageSDK.Measurements\n</code></pre> <p>Parameters:</p> <ul> <li><code>identifier</code>- session transmitter identifier.</li> </ul>"},{"location":"ios/versions/0.5.1/sdk-methods/#latency-optimization-level","title":"Latency Optimization Level","text":"<p>Click here to learn more about the Latency Optimization Level.</p>"},{"location":"ios/versions/0.5.1/sdk-methods/#change-latency-optimization-level","title":"Change latency Optimization Level","text":"<p>Change the latency optimization level using of the following options:</p> <ul> <li>highQuality</li> <li>optimized</li> <li>bestPerformance</li> <li>ultraFast</li> </ul> <p></p><pre><code>func changeLatencyOptimizationLevel(value: SyncStageSDK.LatencyOptimizationLevel)\n</code></pre> Parameters: <ul> <li><code>value</code>- latency optimization level value.</li> </ul>"},{"location":"ios/versions/0.5.1/sdk-methods/#get-latency-optimization-level","title":"Get Latency Optimization Level","text":"<p>Returns latency optimization level.</p> <pre><code>func getLatencyOptimizationLevel() -&gt; SyncStageSDK.LatencyOptimizationLevel\n</code></pre>"},{"location":"ios/versions/0.5.1/sdk-methods/#session-recording","title":"Session recording","text":""},{"location":"ios/versions/0.5.1/sdk-methods/#start-recording","title":"Start recording","text":"<pre><code>func startRecording(completion: @escaping (SyncStageError?) -&gt; Void)\n</code></pre> <p>Parameters:</p> <ul> <li><code>completion</code> - closure informs if start session recording error occurs</li> </ul>"},{"location":"ios/versions/0.5.1/sdk-methods/#stop-recording","title":"Stop recording","text":"<pre><code>func stopRecording(completion: @escaping (SyncStageError?) -&gt; Void)\n</code></pre> <p>Parameters:</p> <ul> <li><code>completion</code> - closure informs if stop session recording error occurs</li> </ul>"},{"location":"ios/versions/0.5.2/sdk-delegates/","title":"Delegates","text":""},{"location":"ios/versions/0.5.2/sdk-delegates/#052","title":"0.5.2","text":""},{"location":"ios/versions/0.5.2/sdk-delegates/#syncstage-delegates","title":"SyncStage delegates","text":"<p>SyncStage class provide two delegate:, <code>SyncStageUserDelegate</code> and <code>SyncStageConnectivityDelegate</code> which provide a set of callbacks to inform your application about asynchronous events from the SyncStage.</p>"},{"location":"ios/versions/0.5.2/sdk-delegates/#syncstageuserdelegate","title":"SyncStageUserDelegate","text":"<p>Responsible for getting callbacks about users' state in the session.</p> <pre><code>protocol SyncStageUserDelegate: NSObject {\n    // called when a user joins a session\n    func userJoined(connection: Connection)\n\n    // called when a user leaves a session\n    func userLeft(identifier: String)\n\n    // called when a user mutes himself\n    func userMuted(identifier: String)\n\n    // called when a user unmutes himself\n    func userUnmuted(identifier: String)\n\n    // called when session recording started\n    func sessionRecordingStarted()\n\n    // called when session recording stopped\n    func sessionRecordingStopped()\n\n    // called when the your application lose connectivity with Studio Server, after a while user will be dismissed from the session\n    func sessionOut()\n}\n</code></pre>"},{"location":"ios/versions/0.5.2/sdk-delegates/#syncstageconnectivitydelegate","title":"SyncStageConnectivityDelegate","text":"<p>Responsible for getting callbacks about users' connectivity in the session.</p> <pre><code>protocol SyncStageConnectivityDelegate: NSObject {\n    // called when user loses partial connectivity as a transmitter or when get recover.\n    func transmitterConnectivityChanged(connected: Bool)\n\n    // called when the receiver loses partial connectivity for a specific user or when it recovers\n    func receiverConnectivityChanged(identifier: String, connected: Bool)\n}\n</code></pre>"},{"location":"ios/versions/0.5.2/sdk-delegates/#syncstagediscoverydelegate","title":"SyncStageDiscoveryDelegate","text":"<p>Responsible for getting callbacks about available zones latency.</p> <pre><code>public protocol SyncStageDiscoveryDelegate: NSObject {\n    func discoveryResults(zones: [String])\n    func discoveryLatencyTestResults(results: [ZoneLatency])\n}\n</code></pre>"},{"location":"ios/versions/0.5.2/sdk-error-codes/","title":"Error codes","text":""},{"location":"ios/versions/0.5.2/sdk-error-codes/#052","title":"0.5.2","text":"<p>Most of the SDK methods return SyncStageSDKErrorCode which can be decoded using the following enum.</p> <pre><code>public enum SyncStageErrorCode: Int {\n    case unknownError = -1\n    case ok = 0\n    case configurationError = 1\n    case apiError = 2\n    case streamDoesNotExist = 3\n    case badVolumeValue = 4\n    case noZoneAvailable = 5\n    case noStudioServerAvailable = 6\n}\n</code></pre>"},{"location":"ios/versions/0.5.2/sdk-methods/","title":"Methods","text":""},{"location":"ios/versions/0.5.2/sdk-methods/#052","title":"0.5.2","text":""},{"location":"ios/versions/0.5.2/sdk-methods/#general","title":"General","text":""},{"location":"ios/versions/0.5.2/sdk-methods/#initialize","title":"Initialize","text":"<p>Initializes the SDK SyncStage object.</p> <pre><code>init(\n    applicationSecretId: String? = nil, \n    applicationSecretKey: String? = nil,\n    completion: @escaping (_ error: SyncStageError?) -&gt; Void\n)\n</code></pre> <p>Constructor parameters:</p> <ul> <li> <p><code>applicationSecretId</code> - if set to nil, SDK will look for applicationSecretId in the SyncStageSecret.plist file</p> </li> <li> <p><code>applicationSecretKey</code> - if set to nil, SDK will look for applicationSecretKey in the SyncStageSecret.plist file</p> </li> <li> <p><code>completion</code> - closure informs if setup error occurs</p> </li> </ul>"},{"location":"ios/versions/0.5.2/sdk-methods/#get-sdk-version","title":"Get SDK version","text":"<p>Returns SDK version.</p> <pre><code>func getSDKVersion() -&gt; String\n</code></pre>"},{"location":"ios/versions/0.5.2/sdk-methods/#get-best-available-server","title":"Get best available server","text":"<p>Get best available server, where a session can be created</p> <pre><code>func getBestAvailableServer(completion: @escaping (Swift.Result&lt;SyncStageSDK.ServerInstance, SyncStageSDK.SyncStageError&gt;) -&gt; Swift.Void)\n</code></pre> <p>Parameters:</p> <ul> <li><code>completion</code> - returns a server instance.</li> </ul>"},{"location":"ios/versions/0.5.2/sdk-methods/#get-server-instances","title":"Get server instances","text":"<p>Get server instances so you can select the server that is suitable for your session.</p> <pre><code>func getServerInstances(completion: @escaping (Swift.Result&lt;[SyncStageSDK.ServerInstance], SyncStageSDK.SyncStageError&gt;) -&gt; Swift.Void)\n</code></pre> <p>Parameters:</p> <ul> <li><code>completion</code> - returns a list of servers.</li> </ul>"},{"location":"ios/versions/0.5.2/sdk-methods/#session","title":"Session","text":""},{"location":"ios/versions/0.5.2/sdk-methods/#create-a-session","title":"Create a session","text":"<p>Creates a session in a given zone by a given user from your user pool.</p> <pre><code>func createSession(\n    zoneId: String,\n    userId: String,\n    studioServerId: String,\n    completion: @escaping (Result&lt;SessionIdentifier, SyncStageError&gt;) -&gt; Void\n)\n</code></pre> <p>Parameters:</p> <ul> <li><code>zoneId</code> - zone in which we want to host our session</li> <li><code>userId</code> - id of your app user to match the data between SyncStage and your backend</li> <li><code>studioServerId</code> - id of the selected studio server</li> <li><code>preferFastRouting</code> - prefer fast routing allows better network performance</li> <li><code>completion</code> -  if succeeded returns a SessionIdentifier (session Id and session code)</li> </ul>"},{"location":"ios/versions/0.5.2/sdk-methods/#join-the-session","title":"Join the session","text":"<p>Joins a particular session identified by <code>sessionCode</code>.</p> <pre><code>func join(\n    sessionCode: String,\n    userId: String,\n    displayName: String? = nil,\n    zoneId: String,\n    studioServerId: String,\n    preferFastRouting: Swift.Bool = false,\n    completion: @escaping (Result&lt;Session, SyncStageError&gt;) -&gt; Void\n)\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>sessionCode</code> - the session code</p> </li> <li> <p><code>userId</code> - id of your app user to match de data between SyncStage and your backend</p> </li> <li> <p><code>displayName</code> - your app user display name</p> </li> <li> <p><code>zoneId</code> - zone in which your session is hosted</p> </li> <li> <p><code>studioServerId</code> - studio server where you are running your session</p> </li> <li> <p><code>completion</code> - if succeeded returns a Session object</p> </li> </ul>"},{"location":"ios/versions/0.5.2/sdk-methods/#get-session-state","title":"Get session state","text":"<p>Gets state of currently joined session.</p> <pre><code>func session(completion: @escaping (Result&lt;Session, SyncStageError&gt;)\n</code></pre> <p>Parameters:</p> <ul> <li><code>completion</code> - returns session state</li> </ul>"},{"location":"ios/versions/0.5.2/sdk-methods/#leave-the-session","title":"Leave the session","text":"<p>Leaves currently joined session.</p> <pre><code>func leave(completion: @escaping (_ error: SyncStageError?) -&gt; Void)\n</code></pre> <p>Parameters:</p> <ul> <li><code>completion</code> - closure informs if leave session error occurs</li> </ul>"},{"location":"ios/versions/0.5.2/sdk-methods/#audio-setup","title":"Audio setup","text":""},{"location":"ios/versions/0.5.2/sdk-methods/#mute-unmute-microphone","title":"Mute / unmute microphone","text":"<p>Enables or disables microphone stream.</p> <pre><code>func toggleMicrophone(mute: Bool)\n</code></pre> <p>Parameters:</p> <ul> <li><code>mute</code>- desired state of the mute option</li> </ul>"},{"location":"ios/versions/0.5.2/sdk-methods/#is-muted","title":"Is muted","text":"<p>Returns state of microphone stream.</p> <pre><code>func isMicrophoneMuted() -&gt; Bool\n</code></pre>"},{"location":"ios/versions/0.5.2/sdk-methods/#change-receiver-volume","title":"Change receiver volume","text":"<p>Return error code if error occured</p> <pre><code>func changeReceiverVolume(identifier: String, volume: Float) -&gt; SyncStageSDK.SyncStageErrorCode\n</code></pre> <p>Parameters:</p> <ul> <li><code>identifier</code>- Session receiver identifier.</li> <li><code>volume</code>- volume float value between 0 and 100.</li> </ul>"},{"location":"ios/versions/0.5.2/sdk-methods/#get-receiver-volume","title":"Get receiver volume","text":"<p>Returns receiver volume float value.</p> <pre><code>func getReceiverVolume(identifier: String) -&gt; Float\n</code></pre> <p>Parameters:</p> <ul> <li><code>identifier</code>- Session receiver identifier.</li> </ul>"},{"location":"ios/versions/0.5.2/sdk-methods/#turn-on-of-direct-monitor","title":"Turn on / of direct monitor","text":"<p>Turns on / of direct monitor.</p> <p></p><pre><code>func toggleDirectMonitor(enable: Bool)\n</code></pre> Parameters: <ul> <li><code>enable</code>- <code>true</code> for turning on direct monitor</li> </ul>"},{"location":"ios/versions/0.5.2/sdk-methods/#get-direct-monitor-volume-value","title":"Get direct monitor volume value","text":"<p>Returns direct monitor volume float value.</p> <pre><code>func getDirectMonitorVolume() -&gt; Float\n</code></pre>"},{"location":"ios/versions/0.5.2/sdk-methods/#change-direct-monitor-volume-value","title":"Change direct monitor volume value","text":"<pre><code>func changeDirectMonitorVolume(volume: Float)\n</code></pre> <p>Parameters:</p> <ul> <li><code>volume</code>- volume float value between 1 and 100.</li> </ul>"},{"location":"ios/versions/0.5.2/sdk-methods/#is-direct-monitor-enabled","title":"Is direct monitor enabled","text":"<p>Returns a Bool indicating if the direct monitor is enabled</p> <pre><code>func isDirectMonitorEnabled() -&gt; Bool\n</code></pre>"},{"location":"ios/versions/0.5.2/sdk-methods/#turn-on-of-internal-microphone","title":"Turn on / of internal microphone","text":"<p>Turns on / of internal microphone to be used instead of default audio input i.e. headphones mic.</p> <pre><code>func toggleInternalMic(enable: Bool)\n</code></pre> <p>Parameters:</p> <ul> <li><code>enable</code>- <code>true</code> for turning on internal microphone</li> </ul>"},{"location":"ios/versions/0.5.2/sdk-methods/#network-measurements","title":"Network measurements","text":""},{"location":"ios/versions/0.5.2/sdk-methods/#get-receiver-measurements","title":"Get receiver measurements","text":"<p>Returns session receiver measurements structure.</p> <pre><code>func getReceiverMeasurements(identifier: String) -&gt; SyncStageSDK.Measurements\n</code></pre> <p>Parameters:</p> <ul> <li><code>identifier</code>- session receiver identifier</li> </ul>"},{"location":"ios/versions/0.5.2/sdk-methods/#get-transmitter-measurements","title":"Get transmitter measurements","text":"<p>Returns session transmitter measurements structure.</p> <pre><code>func getTransmitterMeasurements() -&gt; SyncStageSDK.Measurements\n</code></pre> <p>Parameters:</p> <ul> <li><code>identifier</code>- session transmitter identifier.</li> </ul>"},{"location":"ios/versions/0.5.2/sdk-methods/#latency-optimization-level","title":"Latency Optimization Level","text":"<p>Click here to learn more about the Latency Optimization Level.</p>"},{"location":"ios/versions/0.5.2/sdk-methods/#change-latency-optimization-level","title":"Change latency Optimization Level","text":"<p>Change the latency optimization level using of the following options:</p> <ul> <li>highQuality</li> <li>optimized</li> <li>bestPerformance</li> <li>ultraFast</li> </ul> <p></p><pre><code>func changeLatencyOptimizationLevel(value: SyncStageSDK.LatencyOptimizationLevel)\n</code></pre> Parameters: <ul> <li><code>value</code>- latency optimization level value.</li> </ul>"},{"location":"ios/versions/0.5.2/sdk-methods/#get-latency-optimization-level","title":"Get Latency Optimization Level","text":"<p>Returns latency optimization level.</p> <pre><code>func getLatencyOptimizationLevel() -&gt; SyncStageSDK.LatencyOptimizationLevel\n</code></pre>"},{"location":"ios/versions/0.5.2/sdk-methods/#session-recording","title":"Session recording","text":""},{"location":"ios/versions/0.5.2/sdk-methods/#start-recording","title":"Start recording","text":"<pre><code>func startRecording(completion: @escaping (SyncStageError?) -&gt; Void)\n</code></pre> <p>Parameters:</p> <ul> <li><code>completion</code> - closure informs if start session recording error occurs</li> </ul>"},{"location":"ios/versions/0.5.2/sdk-methods/#stop-recording","title":"Stop recording","text":"<pre><code>func stopRecording(completion: @escaping (SyncStageError?) -&gt; Void)\n</code></pre> <p>Parameters:</p> <ul> <li><code>completion</code> - closure informs if stop session recording error occurs</li> </ul>"},{"location":"ios/versions/0.6.0/sdk-delegates/","title":"Delegates","text":""},{"location":"ios/versions/0.6.0/sdk-delegates/#052","title":"0.5.2","text":""},{"location":"ios/versions/0.6.0/sdk-delegates/#syncstage-delegates","title":"SyncStage delegates","text":"<p>SyncStage class provide two delegate:, <code>SyncStageUserDelegate</code> and <code>SyncStageConnectivityDelegate</code> which provide a set of callbacks to inform your application about asynchronous events from the SyncStage.</p>"},{"location":"ios/versions/0.6.0/sdk-delegates/#syncstageuserdelegate","title":"SyncStageUserDelegate","text":"<p>Responsible for getting callbacks about users' state in the session.</p> <pre><code>protocol SyncStageUserDelegate: NSObject {\n    // called when a user joins a session\n    func userJoined(connection: Connection)\n\n    // called when a user leaves a session\n    func userLeft(identifier: String)\n\n    // called when a user mutes himself\n    func userMuted(identifier: String)\n\n    // called when a user unmutes himself\n    func userUnmuted(identifier: String)\n\n    // called when session recording started\n    func sessionRecordingStarted()\n\n    // called when session recording stopped\n    func sessionRecordingStopped()\n\n    // called when the your application lose connectivity with Studio Server, after a while user will be dismissed from the session\n    func sessionOut()\n}\n</code></pre>"},{"location":"ios/versions/0.6.0/sdk-delegates/#syncstageconnectivitydelegate","title":"SyncStageConnectivityDelegate","text":"<p>Responsible for getting callbacks about users' connectivity in the session.</p> <pre><code>protocol SyncStageConnectivityDelegate: NSObject {\n    // called when user loses partial connectivity as a transmitter or when get recover.\n    func transmitterConnectivityChanged(connected: Bool)\n\n    // called when the receiver loses partial connectivity for a specific user or when it recovers\n    func receiverConnectivityChanged(identifier: String, connected: Bool)\n}\n</code></pre>"},{"location":"ios/versions/0.6.0/sdk-delegates/#syncstagediscoverydelegate","title":"SyncStageDiscoveryDelegate","text":"<p>Responsible for getting callbacks about available zones latency.</p> <pre><code>public protocol SyncStageDiscoveryDelegate: NSObject {\n    func discoveryResults(zones: [String])\n    func discoveryLatencyTestResults(results: [ZoneLatency])\n}\n</code></pre>"},{"location":"ios/versions/0.6.0/sdk-error-codes/","title":"Error codes","text":""},{"location":"ios/versions/0.6.0/sdk-error-codes/#052","title":"0.5.2","text":"<p>Most of the SDK methods return SyncStageSDKErrorCode which can be decoded using the following enum.</p> <pre><code>public enum SyncStageErrorCode: Int {\n    case unknownError = -1\n    case ok = 0\n    case configurationError = 1\n    case apiError = 2\n    case streamDoesNotExist = 3\n    case badVolumeValue = 4\n    case noZoneAvailable = 5\n    case noStudioServerAvailable = 6\n}\n</code></pre>"},{"location":"ios/versions/0.6.0/sdk-methods/","title":"Methods","text":""},{"location":"ios/versions/0.6.0/sdk-methods/#052","title":"0.5.2","text":""},{"location":"ios/versions/0.6.0/sdk-methods/#general","title":"General","text":""},{"location":"ios/versions/0.6.0/sdk-methods/#initialize","title":"Initialize","text":"<p>Initializes the SDK SyncStage object.</p> <pre><code>init(\n    applicationSecretId: String? = nil, \n    applicationSecretKey: String? = nil,\n    completion: @escaping (_ error: SyncStageError?) -&gt; Void\n)\n</code></pre> <p>Constructor parameters:</p> <ul> <li> <p><code>applicationSecretId</code> - if set to nil, SDK will look for applicationSecretId in the SyncStageSecret.plist file</p> </li> <li> <p><code>applicationSecretKey</code> - if set to nil, SDK will look for applicationSecretKey in the SyncStageSecret.plist file</p> </li> <li> <p><code>completion</code> - closure informs if setup error occurs</p> </li> </ul>"},{"location":"ios/versions/0.6.0/sdk-methods/#get-sdk-version","title":"Get SDK version","text":"<p>Returns SDK version.</p> <pre><code>func getSDKVersion() -&gt; String\n</code></pre>"},{"location":"ios/versions/0.6.0/sdk-methods/#get-best-available-server","title":"Get best available server","text":"<p>Get best available server, where a session can be created</p> <pre><code>func getBestAvailableServer(completion: @escaping (Swift.Result&lt;SyncStageSDK.ServerInstance, SyncStageSDK.SyncStageError&gt;) -&gt; Swift.Void)\n</code></pre> <p>Parameters:</p> <ul> <li><code>completion</code> - returns a server instance.</li> </ul>"},{"location":"ios/versions/0.6.0/sdk-methods/#get-server-instances","title":"Get server instances","text":"<p>Get server instances so you can select the server that is suitable for your session.</p> <pre><code>func getServerInstances(completion: @escaping (Swift.Result&lt;[SyncStageSDK.ServerInstance], SyncStageSDK.SyncStageError&gt;) -&gt; Swift.Void)\n</code></pre> <p>Parameters:</p> <ul> <li><code>completion</code> - returns a list of servers.</li> </ul>"},{"location":"ios/versions/0.6.0/sdk-methods/#session","title":"Session","text":""},{"location":"ios/versions/0.6.0/sdk-methods/#create-a-session","title":"Create a session","text":"<p>Creates a session in a given zone by a given user from your user pool.</p> <pre><code>func createSession(\n    zoneId: String,\n    userId: String,\n    studioServerId: String,\n    completion: @escaping (Result&lt;SessionIdentifier, SyncStageError&gt;) -&gt; Void\n)\n</code></pre> <p>Parameters:</p> <ul> <li><code>zoneId</code> - zone in which we want to host our session</li> <li><code>userId</code> - id of your app user to match the data between SyncStage and your backend</li> <li><code>studioServerId</code> - id of the selected studio server</li> <li><code>preferFastRouting</code> - prefer fast routing allows better network performance</li> <li><code>completion</code> -  if succeeded returns a SessionIdentifier (session Id and session code)</li> </ul>"},{"location":"ios/versions/0.6.0/sdk-methods/#join-the-session","title":"Join the session","text":"<p>Joins a particular session identified by <code>sessionCode</code>.</p> <pre><code>func join(\n    sessionCode: String,\n    userId: String,\n    displayName: String? = nil,\n    zoneId: String,\n    studioServerId: String,\n    preferFastRouting: Swift.Bool = false,\n    completion: @escaping (Result&lt;Session, SyncStageError&gt;) -&gt; Void\n)\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>sessionCode</code> - the session code</p> </li> <li> <p><code>userId</code> - id of your app user to match de data between SyncStage and your backend</p> </li> <li> <p><code>displayName</code> - your app user display name</p> </li> <li> <p><code>zoneId</code> - zone in which your session is hosted</p> </li> <li> <p><code>studioServerId</code> - studio server where you are running your session</p> </li> <li> <p><code>completion</code> - if succeeded returns a Session object</p> </li> </ul>"},{"location":"ios/versions/0.6.0/sdk-methods/#get-session-state","title":"Get session state","text":"<p>Gets state of currently joined session.</p> <pre><code>func session(completion: @escaping (Result&lt;Session, SyncStageError&gt;)\n</code></pre> <p>Parameters:</p> <ul> <li><code>completion</code> - returns session state</li> </ul>"},{"location":"ios/versions/0.6.0/sdk-methods/#leave-the-session","title":"Leave the session","text":"<p>Leaves currently joined session.</p> <pre><code>func leave(completion: @escaping (_ error: SyncStageError?) -&gt; Void)\n</code></pre> <p>Parameters:</p> <ul> <li><code>completion</code> - closure informs if leave session error occurs</li> </ul>"},{"location":"ios/versions/0.6.0/sdk-methods/#audio-setup","title":"Audio setup","text":""},{"location":"ios/versions/0.6.0/sdk-methods/#mute-unmute-microphone","title":"Mute / unmute microphone","text":"<p>Enables or disables microphone stream.</p> <pre><code>func toggleMicrophone(mute: Bool)\n</code></pre> <p>Parameters:</p> <ul> <li><code>mute</code>- desired state of the mute option</li> </ul>"},{"location":"ios/versions/0.6.0/sdk-methods/#is-muted","title":"Is muted","text":"<p>Returns state of microphone stream.</p> <pre><code>func isMicrophoneMuted() -&gt; Bool\n</code></pre>"},{"location":"ios/versions/0.6.0/sdk-methods/#change-receiver-volume","title":"Change receiver volume","text":"<p>Return error code if error occured</p> <pre><code>func changeReceiverVolume(identifier: String, volume: Float) -&gt; SyncStageSDK.SyncStageErrorCode\n</code></pre> <p>Parameters:</p> <ul> <li><code>identifier</code>- Session receiver identifier.</li> <li><code>volume</code>- volume float value between 0 and 100.</li> </ul>"},{"location":"ios/versions/0.6.0/sdk-methods/#get-receiver-volume","title":"Get receiver volume","text":"<p>Returns receiver volume float value.</p> <pre><code>func getReceiverVolume(identifier: String) -&gt; Float\n</code></pre> <p>Parameters:</p> <ul> <li><code>identifier</code>- Session receiver identifier.</li> </ul>"},{"location":"ios/versions/0.6.0/sdk-methods/#turn-on-of-direct-monitor","title":"Turn on / of direct monitor","text":"<p>Turns on / of direct monitor.</p> <p></p><pre><code>func toggleDirectMonitor(enable: Bool)\n</code></pre> Parameters: <ul> <li><code>enable</code>- <code>true</code> for turning on direct monitor</li> </ul>"},{"location":"ios/versions/0.6.0/sdk-methods/#get-direct-monitor-volume-value","title":"Get direct monitor volume value","text":"<p>Returns direct monitor volume float value.</p> <pre><code>func getDirectMonitorVolume() -&gt; Float\n</code></pre>"},{"location":"ios/versions/0.6.0/sdk-methods/#change-direct-monitor-volume-value","title":"Change direct monitor volume value","text":"<pre><code>func changeDirectMonitorVolume(volume: Float)\n</code></pre> <p>Parameters:</p> <ul> <li><code>volume</code>- volume float value between 1 and 100.</li> </ul>"},{"location":"ios/versions/0.6.0/sdk-methods/#is-direct-monitor-enabled","title":"Is direct monitor enabled","text":"<p>Returns a Bool indicating if the direct monitor is enabled</p> <pre><code>func isDirectMonitorEnabled() -&gt; Bool\n</code></pre>"},{"location":"ios/versions/0.6.0/sdk-methods/#turn-on-of-internal-microphone","title":"Turn on / of internal microphone","text":"<p>Turns on / of internal microphone to be used instead of default audio input i.e. headphones mic.</p> <pre><code>func toggleInternalMic(enable: Bool)\n</code></pre> <p>Parameters:</p> <ul> <li><code>enable</code>- <code>true</code> for turning on internal microphone</li> </ul>"},{"location":"ios/versions/0.6.0/sdk-methods/#network-measurements","title":"Network measurements","text":""},{"location":"ios/versions/0.6.0/sdk-methods/#get-receiver-measurements","title":"Get receiver measurements","text":"<p>Returns session receiver measurements structure.</p> <pre><code>func getReceiverMeasurements(identifier: String) -&gt; SyncStageSDK.Measurements\n</code></pre> <p>Parameters:</p> <ul> <li><code>identifier</code>- session receiver identifier</li> </ul>"},{"location":"ios/versions/0.6.0/sdk-methods/#get-transmitter-measurements","title":"Get transmitter measurements","text":"<p>Returns session transmitter measurements structure.</p> <pre><code>func getTransmitterMeasurements() -&gt; SyncStageSDK.Measurements\n</code></pre> <p>Parameters:</p> <ul> <li><code>identifier</code>- session transmitter identifier.</li> </ul>"},{"location":"ios/versions/0.6.0/sdk-methods/#latency-optimization-level","title":"Latency Optimization Level","text":"<p>Click here to learn more about the Latency Optimization Level.</p>"},{"location":"ios/versions/0.6.0/sdk-methods/#change-latency-optimization-level","title":"Change latency Optimization Level","text":"<p>Change the latency optimization level using of the following options:</p> <ul> <li>highQuality</li> <li>optimized</li> <li>bestPerformance</li> <li>ultraFast</li> </ul> <p></p><pre><code>func changeLatencyOptimizationLevel(value: SyncStageSDK.LatencyOptimizationLevel)\n</code></pre> Parameters: <ul> <li><code>value</code>- latency optimization level value.</li> </ul>"},{"location":"ios/versions/0.6.0/sdk-methods/#get-latency-optimization-level","title":"Get Latency Optimization Level","text":"<p>Returns latency optimization level.</p> <pre><code>func getLatencyOptimizationLevel() -&gt; SyncStageSDK.LatencyOptimizationLevel\n</code></pre>"},{"location":"ios/versions/0.6.0/sdk-methods/#session-recording","title":"Session recording","text":""},{"location":"ios/versions/0.6.0/sdk-methods/#start-recording","title":"Start recording","text":"<pre><code>func startRecording(completion: @escaping (SyncStageError?) -&gt; Void)\n</code></pre> <p>Parameters:</p> <ul> <li><code>completion</code> - closure informs if start session recording error occurs</li> </ul>"},{"location":"ios/versions/0.6.0/sdk-methods/#stop-recording","title":"Stop recording","text":"<pre><code>func stopRecording(completion: @escaping (SyncStageError?) -&gt; Void)\n</code></pre> <p>Parameters:</p> <ul> <li><code>completion</code> - closure informs if stop session recording error occurs</li> </ul>"},{"location":"ios/versions/0.6.1/sdk-delegates/","title":"Delegates","text":""},{"location":"ios/versions/0.6.1/sdk-delegates/#061","title":"0.6.1","text":""},{"location":"ios/versions/0.6.1/sdk-delegates/#syncstage-delegates","title":"SyncStage delegates","text":"<p>SyncStage class provide two delegate:, <code>SyncStageUserDelegate</code> and <code>SyncStageConnectivityDelegate</code> which provide a set of callbacks to inform your application about asynchronous events from the SyncStage.</p>"},{"location":"ios/versions/0.6.1/sdk-delegates/#syncstageuserdelegate","title":"SyncStageUserDelegate","text":"<p>Responsible for getting callbacks about users' state in the session.</p> <pre><code>protocol SyncStageUserDelegate: NSObject {\n    // called when a user joins a session\n    func userJoined(connection: Connection)\n\n    // called when a user leaves a session\n    func userLeft(identifier: String)\n\n    // called when a user mutes himself\n    func userMuted(identifier: String)\n\n    // called when a user unmutes himself\n    func userUnmuted(identifier: String)\n\n    // called when session recording started\n    func sessionRecordingStarted()\n\n    // called when session recording stopped\n    func sessionRecordingStopped()\n\n    // called when the your application lose connectivity with Studio Server, after a while user will be dismissed from the session\n    func sessionOut()\n}\n</code></pre>"},{"location":"ios/versions/0.6.1/sdk-delegates/#syncstageconnectivitydelegate","title":"SyncStageConnectivityDelegate","text":"<p>Responsible for getting callbacks about users' connectivity in the session.</p> <pre><code>protocol SyncStageConnectivityDelegate: NSObject {\n    // called when user loses partial connectivity as a transmitter or when get recover.\n    func transmitterConnectivityChanged(connected: Bool)\n\n    // called when the receiver loses partial connectivity for a specific user or when it recovers\n    func receiverConnectivityChanged(identifier: String, connected: Bool)\n}\n</code></pre>"},{"location":"ios/versions/0.6.1/sdk-delegates/#syncstagediscoverydelegate","title":"SyncStageDiscoveryDelegate","text":"<p>Responsible for getting callbacks about available zones latency.</p> <pre><code>public protocol SyncStageDiscoveryDelegate: NSObject {\n    func discoveryResults(zones: [String])\n    func discoveryLatencyTestResults(results: [ZoneLatency])\n}\n</code></pre>"},{"location":"ios/versions/0.6.1/sdk-error-codes/","title":"Error codes","text":""},{"location":"ios/versions/0.6.1/sdk-error-codes/#061","title":"0.6.1","text":"<p>Most of the SDK methods return SyncStageSDKErrorCode which can be decoded using the following enum.</p> <pre><code>public enum SyncStageErrorCode: Int {\n    case unknownError = -1\n    case ok = 0\n    case configurationError = 1\n    case apiError = 2\n    case streamDoesNotExist = 3\n    case badVolumeValue = 4\n    case noZoneAvailable = 5\n    case noStudioServerAvailable = 6\n}\n</code></pre>"},{"location":"ios/versions/0.6.1/sdk-methods/","title":"Methods","text":""},{"location":"ios/versions/0.6.1/sdk-methods/#061","title":"0.6.1","text":""},{"location":"ios/versions/0.6.1/sdk-methods/#general","title":"General","text":""},{"location":"ios/versions/0.6.1/sdk-methods/#initialize","title":"Initialize","text":"<p>Initializes the SDK SyncStage object.</p> <pre><code>init(\n    applicationSecretId: String? = nil, \n    applicationSecretKey: String? = nil,\n    completion: @escaping (_ error: SyncStageError?) -&gt; Void\n)\n</code></pre> <p>Constructor parameters:</p> <ul> <li> <p><code>applicationSecretId</code> - if set to nil, SDK will look for applicationSecretId in the SyncStageSecret.plist file</p> </li> <li> <p><code>applicationSecretKey</code> - if set to nil, SDK will look for applicationSecretKey in the SyncStageSecret.plist file</p> </li> <li> <p><code>completion</code> - closure informs if setup error occurs</p> </li> </ul>"},{"location":"ios/versions/0.6.1/sdk-methods/#get-sdk-version","title":"Get SDK version","text":"<p>Returns SDK version.</p> <pre><code>func getSDKVersion() -&gt; String\n</code></pre>"},{"location":"ios/versions/0.6.1/sdk-methods/#get-best-available-server","title":"Get best available server","text":"<p>Get best available server, where a session can be created</p> <pre><code>func getBestAvailableServer(completion: @escaping (Swift.Result&lt;SyncStageSDK.ServerInstance, SyncStageSDK.SyncStageError&gt;) -&gt; Swift.Void)\n</code></pre> <p>Parameters:</p> <ul> <li><code>completion</code> - returns a server instance.</li> </ul>"},{"location":"ios/versions/0.6.1/sdk-methods/#get-server-instances","title":"Get server instances","text":"<p>Get server instances so you can select the server that is suitable for your session.</p> <pre><code>func getServerInstances(completion: @escaping (Swift.Result&lt;[SyncStageSDK.ServerInstance], SyncStageSDK.SyncStageError&gt;) -&gt; Swift.Void)\n</code></pre> <p>Parameters:</p> <ul> <li><code>completion</code> - returns a list of servers.</li> </ul>"},{"location":"ios/versions/0.6.1/sdk-methods/#session","title":"Session","text":""},{"location":"ios/versions/0.6.1/sdk-methods/#create-a-session","title":"Create a session","text":"<p>Creates a session in a given zone by a given user from your user pool.</p> <pre><code>func createSession(\n    zoneId: String,\n    userId: String,\n    studioServerId: String,\n    completion: @escaping (Result&lt;SessionIdentifier, SyncStageError&gt;) -&gt; Void\n)\n</code></pre> <p>Parameters:</p> <ul> <li><code>zoneId</code> - zone in which we want to host our session</li> <li><code>userId</code> - id of your app user to match the data between SyncStage and your backend</li> <li><code>studioServerId</code> - id of the selected studio server</li> <li><code>preferFastRouting</code> - prefer fast routing allows better network performance</li> <li><code>completion</code> -  if succeeded returns a SessionIdentifier (session Id and session code)</li> </ul>"},{"location":"ios/versions/0.6.1/sdk-methods/#join-the-session","title":"Join the session","text":"<p>Joins a particular session identified by <code>sessionCode</code>.</p> <pre><code>func join(\n    sessionCode: String,\n    userId: String,\n    displayName: String? = nil,\n    zoneId: String,\n    studioServerId: String,\n    preferFastRouting: Swift.Bool = false,\n    completion: @escaping (Result&lt;Session, SyncStageError&gt;) -&gt; Void\n)\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>sessionCode</code> - the session code</p> </li> <li> <p><code>userId</code> - id of your app user to match de data between SyncStage and your backend</p> </li> <li> <p><code>displayName</code> - your app user display name</p> </li> <li> <p><code>zoneId</code> - zone in which your session is hosted</p> </li> <li> <p><code>studioServerId</code> - studio server where you are running your session</p> </li> <li> <p><code>completion</code> - if succeeded returns a Session object</p> </li> </ul>"},{"location":"ios/versions/0.6.1/sdk-methods/#get-session-state","title":"Get session state","text":"<p>Gets state of currently joined session.</p> <pre><code>func session(completion: @escaping (Result&lt;Session, SyncStageError&gt;)\n</code></pre> <p>Parameters:</p> <ul> <li><code>completion</code> - returns session state</li> </ul>"},{"location":"ios/versions/0.6.1/sdk-methods/#leave-the-session","title":"Leave the session","text":"<p>Leaves currently joined session.</p> <pre><code>func leave(completion: @escaping (_ error: SyncStageError?) -&gt; Void)\n</code></pre> <p>Parameters:</p> <ul> <li><code>completion</code> - closure informs if leave session error occurs</li> </ul>"},{"location":"ios/versions/0.6.1/sdk-methods/#audio-setup","title":"Audio setup","text":""},{"location":"ios/versions/0.6.1/sdk-methods/#mute-unmute-microphone","title":"Mute / unmute microphone","text":"<p>Enables or disables microphone stream.</p> <pre><code>func toggleMicrophone(mute: Bool)\n</code></pre> <p>Parameters:</p> <ul> <li><code>mute</code>- desired state of the mute option</li> </ul>"},{"location":"ios/versions/0.6.1/sdk-methods/#is-muted","title":"Is muted","text":"<p>Returns state of microphone stream.</p> <pre><code>func isMicrophoneMuted() -&gt; Bool\n</code></pre>"},{"location":"ios/versions/0.6.1/sdk-methods/#change-receiver-volume","title":"Change receiver volume","text":"<p>Return error code if error occured</p> <pre><code>func changeReceiverVolume(identifier: String, volume: Float) -&gt; SyncStageSDK.SyncStageErrorCode\n</code></pre> <p>Parameters:</p> <ul> <li><code>identifier</code>- Session receiver identifier.</li> <li><code>volume</code>- volume float value between 0 and 100.</li> </ul>"},{"location":"ios/versions/0.6.1/sdk-methods/#get-receiver-volume","title":"Get receiver volume","text":"<p>Returns receiver volume float value.</p> <pre><code>func getReceiverVolume(identifier: String) -&gt; Float\n</code></pre> <p>Parameters:</p> <ul> <li><code>identifier</code>- Session receiver identifier.</li> </ul>"},{"location":"ios/versions/0.6.1/sdk-methods/#turn-on-off-direct-monitor","title":"Turn on / off direct monitor","text":"<p>Turns on / off direct monitor.</p> <p></p><pre><code>func toggleDirectMonitor(enable: Bool)\n</code></pre> Parameters: <ul> <li><code>enable</code>- <code>true</code> for turning on direct monitor</li> </ul>"},{"location":"ios/versions/0.6.1/sdk-methods/#get-direct-monitor-volume-value","title":"Get direct monitor volume value","text":"<p>Returns direct monitor volume float value.</p> <pre><code>func getDirectMonitorVolume() -&gt; Float\n</code></pre>"},{"location":"ios/versions/0.6.1/sdk-methods/#change-direct-monitor-volume-value","title":"Change direct monitor volume value","text":"<pre><code>func changeDirectMonitorVolume(volume: Float)\n</code></pre> <p>Parameters:</p> <ul> <li><code>volume</code>- volume float value between 1 and 100.</li> </ul>"},{"location":"ios/versions/0.6.1/sdk-methods/#is-direct-monitor-enabled","title":"Is direct monitor enabled","text":"<p>Returns a Bool indicating if the direct monitor is enabled</p> <pre><code>func isDirectMonitorEnabled() -&gt; Bool\n</code></pre>"},{"location":"ios/versions/0.6.1/sdk-methods/#turn-on-off-internal-microphone","title":"Turn on / off internal microphone","text":"<p>Turns on / off internal microphone to be used instead of default audio input i.e. headphones mic.</p> <pre><code>func toggleInternalMic(enable: Bool)\n</code></pre> <p>Parameters:</p> <ul> <li><code>enable</code>- <code>true</code> for turning on internal microphone</li> </ul>"},{"location":"ios/versions/0.6.1/sdk-methods/#network-measurements","title":"Network measurements","text":""},{"location":"ios/versions/0.6.1/sdk-methods/#get-receiver-measurements","title":"Get receiver measurements","text":"<p>Returns session receiver measurements structure.</p> <pre><code>func getReceiverMeasurements(identifier: String) -&gt; SyncStageSDK.Measurements\n</code></pre> <p>Parameters:</p> <ul> <li><code>identifier</code>- session receiver identifier</li> </ul>"},{"location":"ios/versions/0.6.1/sdk-methods/#get-transmitter-measurements","title":"Get transmitter measurements","text":"<p>Returns session transmitter measurements structure.</p> <pre><code>func getTransmitterMeasurements() -&gt; SyncStageSDK.Measurements\n</code></pre> <p>Parameters:</p> <ul> <li><code>identifier</code>- session transmitter identifier.</li> </ul>"},{"location":"ios/versions/0.6.1/sdk-methods/#latency-optimization-level","title":"Latency Optimization Level","text":"<p>Click here to learn more about the Latency Optimization Level.</p>"},{"location":"ios/versions/0.6.1/sdk-methods/#change-latency-optimization-level","title":"Change latency Optimization Level","text":"<p>Change the latency optimization level using of the following options:</p> <ul> <li>highQuality</li> <li>optimized</li> <li>bestPerformance</li> <li>ultraFast</li> </ul> <p></p><pre><code>func changeLatencyOptimizationLevel(value: SyncStageSDK.LatencyOptimizationLevel)\n</code></pre> Parameters: <ul> <li><code>value</code>- latency optimization level value.</li> </ul>"},{"location":"ios/versions/0.6.1/sdk-methods/#get-latency-optimization-level","title":"Get Latency Optimization Level","text":"<p>Returns latency optimization level.</p> <pre><code>func getLatencyOptimizationLevel() -&gt; SyncStageSDK.LatencyOptimizationLevel\n</code></pre>"},{"location":"ios/versions/0.6.1/sdk-methods/#turn-on-off-noise-cancellation","title":"Turn on / off noise cancellation","text":"<p>Turns on / off noise cancellation. This filter is applied on the transmitter (e.g. microphone).</p> <pre><code>func toggleNoiseCancellation(enabled: Bool)\n</code></pre>"},{"location":"ios/versions/0.6.1/sdk-methods/#session-recording","title":"Session recording","text":""},{"location":"ios/versions/0.6.1/sdk-methods/#start-recording","title":"Start recording","text":"<pre><code>func startRecording(completion: @escaping (SyncStageError?) -&gt; Void)\n</code></pre> <p>Parameters:</p> <ul> <li><code>completion</code> - closure informs if start session recording error occurs</li> </ul>"},{"location":"ios/versions/0.6.1/sdk-methods/#stop-recording","title":"Stop recording","text":"<pre><code>func stopRecording(completion: @escaping (SyncStageError?) -&gt; Void)\n</code></pre> <p>Parameters:</p> <ul> <li><code>completion</code> - closure informs if stop session recording error occurs</li> </ul>"},{"location":"ios/versions/0.6.2/sdk-delegates/","title":"Sdk delegates","text":""},{"location":"ios/versions/0.6.2/sdk-delegates/#062","title":"0.6.2","text":""},{"location":"ios/versions/0.6.2/sdk-delegates/#syncstage-delegates","title":"SyncStage delegates","text":"<p>SyncStage class provide two delegate:, <code>SyncStageUserDelegate</code> and <code>SyncStageConnectivityDelegate</code> which provide a set of callbacks to inform your application about asynchronous events from the SyncStage.</p>"},{"location":"ios/versions/0.6.2/sdk-delegates/#syncstageuserdelegate","title":"SyncStageUserDelegate","text":"<p>Responsible for getting callbacks about users' state in the session.</p> <pre><code>protocol SyncStageUserDelegate: NSObject {\n    // called when a user joins a session\n    func userJoined(connection: Connection)\n\n    // called when a user leaves a session\n    func userLeft(identifier: String)\n\n    // called when a user mutes himself\n    func userMuted(identifier: String)\n\n    // called when a user unmutes himself\n    func userUnmuted(identifier: String)\n\n    // called when session recording started\n    func sessionRecordingStarted()\n\n    // called when session recording stopped\n    func sessionRecordingStopped()\n\n    // called when the your application lose connectivity with Studio Server, after a while user will be dismissed from the session\n    func sessionOut()\n}\n</code></pre>"},{"location":"ios/versions/0.6.2/sdk-delegates/#syncstageconnectivitydelegate","title":"SyncStageConnectivityDelegate","text":"<p>Responsible for getting callbacks about users' connectivity in the session.</p> <pre><code>protocol SyncStageConnectivityDelegate: NSObject {\n    // called when user loses partial connectivity as a transmitter or when get recover.\n    func transmitterConnectivityChanged(connected: Bool)\n\n    // called when the receiver loses partial connectivity for a specific user or when it recovers\n    func receiverConnectivityChanged(identifier: String, connected: Bool)\n}\n</code></pre>"},{"location":"ios/versions/0.6.2/sdk-delegates/#syncstagediscoverydelegate","title":"SyncStageDiscoveryDelegate","text":"<p>Responsible for getting callbacks about available zones latency.</p> <pre><code>public protocol SyncStageDiscoveryDelegate: NSObject {\n    func discoveryResults(zones: [String])\n    func discoveryLatencyTestResults(results: [ZoneLatency])\n}\n</code></pre>"},{"location":"ios/versions/0.6.2/sdk-error-codes/","title":"Sdk error codes","text":""},{"location":"ios/versions/0.6.2/sdk-error-codes/#062","title":"0.6.2","text":"<p>Most of the SDK methods return SyncStageSDKErrorCode which can be decoded using the following enum.</p> <pre><code>public enum SyncStageErrorCode: Int {\n    case unknownError = -1\n    case ok = 0\n    case configurationError = 1\n    case apiError = 2\n    case streamDoesNotExist = 3\n    case badVolumeValue = 4\n    case noZoneAvailable = 5\n    case noStudioServerAvailable = 6\n}\n</code></pre>"},{"location":"ios/versions/0.6.2/sdk-methods/","title":"Sdk methods","text":""},{"location":"ios/versions/0.6.2/sdk-methods/#062","title":"0.6.2","text":""},{"location":"ios/versions/0.6.2/sdk-methods/#general","title":"General","text":""},{"location":"ios/versions/0.6.2/sdk-methods/#initialize","title":"Initialize","text":"<p>Initializes the SDK SyncStage object.</p> <pre><code>init(\n    applicationSecretId: String? = nil, \n    applicationSecretKey: String? = nil,\n    completion: @escaping (_ error: SyncStageError?) -&gt; Void\n)\n</code></pre> <p>Constructor parameters:</p> <ul> <li> <p><code>applicationSecretId</code> - if set to nil, SDK will look for applicationSecretId in the SyncStageSecret.plist file</p> </li> <li> <p><code>applicationSecretKey</code> - if set to nil, SDK will look for applicationSecretKey in the SyncStageSecret.plist file</p> </li> <li> <p><code>completion</code> - closure informs if setup error occurs</p> </li> </ul>"},{"location":"ios/versions/0.6.2/sdk-methods/#get-sdk-version","title":"Get SDK version","text":"<p>Returns SDK version.</p> <pre><code>func getSDKVersion() -&gt; String\n</code></pre>"},{"location":"ios/versions/0.6.2/sdk-methods/#get-best-available-server","title":"Get best available server","text":"<p>Get best available server, where a session can be created</p> <pre><code>func getBestAvailableServer(completion: @escaping (Swift.Result&lt;SyncStageSDK.ServerInstance, SyncStageSDK.SyncStageError&gt;) -&gt; Swift.Void)\n</code></pre> <p>Parameters:</p> <ul> <li><code>completion</code> - returns a server instance.</li> </ul>"},{"location":"ios/versions/0.6.2/sdk-methods/#get-server-instances","title":"Get server instances","text":"<p>Get server instances so you can select the server that is suitable for your session.</p> <pre><code>func getServerInstances(completion: @escaping (Swift.Result&lt;[SyncStageSDK.ServerInstance], SyncStageSDK.SyncStageError&gt;) -&gt; Swift.Void)\n</code></pre> <p>Parameters:</p> <ul> <li><code>completion</code> - returns a list of servers.</li> </ul>"},{"location":"ios/versions/0.6.2/sdk-methods/#session","title":"Session","text":""},{"location":"ios/versions/0.6.2/sdk-methods/#create-a-session","title":"Create a session","text":"<p>Creates a session in a given zone by a given user from your user pool.</p> <pre><code>func createSession(\n    zoneId: String,\n    userId: String,\n    studioServerId: String,\n    completion: @escaping (Result&lt;SessionIdentifier, SyncStageError&gt;) -&gt; Void\n)\n</code></pre> <p>Parameters:</p> <ul> <li><code>zoneId</code> - zone in which we want to host our session</li> <li><code>userId</code> - id of your app user to match the data between SyncStage and your backend</li> <li><code>studioServerId</code> - id of the selected studio server</li> <li><code>preferFastRouting</code> - prefer fast routing allows better network performance</li> <li><code>completion</code> -  if succeeded returns a SessionIdentifier (session Id and session code)</li> </ul>"},{"location":"ios/versions/0.6.2/sdk-methods/#join-the-session","title":"Join the session","text":"<p>Joins a particular session identified by <code>sessionCode</code>.</p> <pre><code>func join(\n    sessionCode: String,\n    userId: String,\n    displayName: String? = nil,\n    zoneId: String,\n    studioServerId: String,\n    preferFastRouting: Swift.Bool = false,\n    completion: @escaping (Result&lt;Session, SyncStageError&gt;) -&gt; Void\n)\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>sessionCode</code> - the session code</p> </li> <li> <p><code>userId</code> - id of your app user to match de data between SyncStage and your backend</p> </li> <li> <p><code>displayName</code> - your app user display name</p> </li> <li> <p><code>zoneId</code> - zone in which your session is hosted</p> </li> <li> <p><code>studioServerId</code> - studio server where you are running your session</p> </li> <li> <p><code>completion</code> - if succeeded returns a Session object</p> </li> </ul>"},{"location":"ios/versions/0.6.2/sdk-methods/#get-session-state","title":"Get session state","text":"<p>Gets state of currently joined session.</p> <pre><code>func session(completion: @escaping (Result&lt;Session, SyncStageError&gt;)\n</code></pre> <p>Parameters:</p> <ul> <li><code>completion</code> - returns session state</li> </ul>"},{"location":"ios/versions/0.6.2/sdk-methods/#leave-the-session","title":"Leave the session","text":"<p>Leaves currently joined session.</p> <pre><code>func leave(completion: @escaping (_ error: SyncStageError?) -&gt; Void)\n</code></pre> <p>Parameters:</p> <ul> <li><code>completion</code> - closure informs if leave session error occurs</li> </ul>"},{"location":"ios/versions/0.6.2/sdk-methods/#audio-setup","title":"Audio setup","text":""},{"location":"ios/versions/0.6.2/sdk-methods/#mute-unmute-microphone","title":"Mute / unmute microphone","text":"<p>Enables or disables microphone stream.</p> <pre><code>func toggleMicrophone(mute: Bool)\n</code></pre> <p>Parameters:</p> <ul> <li><code>mute</code>- desired state of the mute option</li> </ul>"},{"location":"ios/versions/0.6.2/sdk-methods/#is-muted","title":"Is muted","text":"<p>Returns state of microphone stream.</p> <pre><code>func isMicrophoneMuted() -&gt; Bool\n</code></pre>"},{"location":"ios/versions/0.6.2/sdk-methods/#change-receiver-volume","title":"Change receiver volume","text":"<p>Return error code if error occured</p> <pre><code>func changeReceiverVolume(identifier: String, volume: Float) -&gt; SyncStageSDK.SyncStageErrorCode\n</code></pre> <p>Parameters:</p> <ul> <li><code>identifier</code>- Session receiver identifier.</li> <li><code>volume</code>- volume float value between 0 and 100.</li> </ul>"},{"location":"ios/versions/0.6.2/sdk-methods/#get-receiver-volume","title":"Get receiver volume","text":"<p>Returns receiver volume float value.</p> <pre><code>func getReceiverVolume(identifier: String) -&gt; Float\n</code></pre> <p>Parameters:</p> <ul> <li><code>identifier</code>- Session receiver identifier.</li> </ul>"},{"location":"ios/versions/0.6.2/sdk-methods/#turn-on-off-direct-monitor","title":"Turn on / off direct monitor","text":"<p>Turns on / off direct monitor.</p> <p></p><pre><code>func toggleDirectMonitor(enable: Bool)\n</code></pre> Parameters: <ul> <li><code>enable</code>- <code>true</code> for turning on direct monitor</li> </ul>"},{"location":"ios/versions/0.6.2/sdk-methods/#get-direct-monitor-volume-value","title":"Get direct monitor volume value","text":"<p>Returns direct monitor volume float value.</p> <pre><code>func getDirectMonitorVolume() -&gt; Float\n</code></pre>"},{"location":"ios/versions/0.6.2/sdk-methods/#change-direct-monitor-volume-value","title":"Change direct monitor volume value","text":"<pre><code>func changeDirectMonitorVolume(volume: Float)\n</code></pre> <p>Parameters:</p> <ul> <li><code>volume</code>- volume float value between 1 and 100.</li> </ul>"},{"location":"ios/versions/0.6.2/sdk-methods/#is-direct-monitor-enabled","title":"Is direct monitor enabled","text":"<p>Returns a Bool indicating if the direct monitor is enabled</p> <pre><code>func isDirectMonitorEnabled() -&gt; Bool\n</code></pre>"},{"location":"ios/versions/0.6.2/sdk-methods/#turn-on-off-internal-microphone","title":"Turn on / off internal microphone","text":"<p>Turns on / off internal microphone to be used instead of default audio input i.e. headphones mic.</p> <pre><code>func toggleInternalMic(enable: Bool)\n</code></pre> <p>Parameters:</p> <ul> <li><code>enable</code>- <code>true</code> for turning on internal microphone</li> </ul>"},{"location":"ios/versions/0.6.2/sdk-methods/#network-measurements","title":"Network measurements","text":""},{"location":"ios/versions/0.6.2/sdk-methods/#get-receiver-measurements","title":"Get receiver measurements","text":"<p>Returns session receiver measurements structure.</p> <pre><code>func getReceiverMeasurements(identifier: String) -&gt; SyncStageSDK.Measurements\n</code></pre> <p>Parameters:</p> <ul> <li><code>identifier</code>- session receiver identifier</li> </ul>"},{"location":"ios/versions/0.6.2/sdk-methods/#get-transmitter-measurements","title":"Get transmitter measurements","text":"<p>Returns session transmitter measurements structure.</p> <pre><code>func getTransmitterMeasurements() -&gt; SyncStageSDK.Measurements\n</code></pre> <p>Parameters:</p> <ul> <li><code>identifier</code>- session transmitter identifier.</li> </ul>"},{"location":"ios/versions/0.6.2/sdk-methods/#latency-optimization-level","title":"Latency Optimization Level","text":"<p>Click here to learn more about the Latency Optimization Level.</p>"},{"location":"ios/versions/0.6.2/sdk-methods/#change-latency-optimization-level","title":"Change latency Optimization Level","text":"<p>Change the latency optimization level using of the following options:</p> <ul> <li>highQuality</li> <li>optimized</li> <li>bestPerformance</li> <li>ultraFast</li> </ul> <p></p><pre><code>func changeLatencyOptimizationLevel(value: SyncStageSDK.LatencyOptimizationLevel)\n</code></pre> Parameters: <ul> <li><code>value</code>- latency optimization level value.</li> </ul>"},{"location":"ios/versions/0.6.2/sdk-methods/#get-latency-optimization-level","title":"Get Latency Optimization Level","text":"<p>Returns latency optimization level.</p> <pre><code>func getLatencyOptimizationLevel() -&gt; SyncStageSDK.LatencyOptimizationLevel\n</code></pre>"},{"location":"ios/versions/0.6.2/sdk-methods/#turn-on-off-noise-cancellation","title":"Turn on / off noise cancellation","text":"<p>Turns on / off noise cancellation. This filter is applied on the transmitter (e.g. microphone).</p> <pre><code>func toggleNoiseCancellation(enabled: Bool)\n</code></pre>"},{"location":"ios/versions/0.6.2/sdk-methods/#session-recording","title":"Session recording","text":""},{"location":"ios/versions/0.6.2/sdk-methods/#start-recording","title":"Start recording","text":"<pre><code>func startRecording(completion: @escaping (SyncStageError?) -&gt; Void)\n</code></pre> <p>Parameters:</p> <ul> <li><code>completion</code> - closure informs if start session recording error occurs</li> </ul>"},{"location":"ios/versions/0.6.2/sdk-methods/#stop-recording","title":"Stop recording","text":"<pre><code>func stopRecording(completion: @escaping (SyncStageError?) -&gt; Void)\n</code></pre> <p>Parameters:</p> <ul> <li><code>completion</code> - closure informs if stop session recording error occurs</li> </ul>"},{"location":"sdks/","title":"SDKs","text":""},{"location":"sdks/#sdks","title":"SDKs","text":"<ul> <li> <p> Android SDK</p> <p>Start using building an Android application with SyncStage.</p> <p> Getting started</p> </li> <li> <p> iOS SDK</p> <p>Start using building an iOS or iPadOS application with SyncStage.</p> <p> Getting started</p> </li> <li> <p> JavaScript SDK</p> <p>Start using building a web application for Windows and macOS with SyncStage.</p> <p> Getting started</p> </li> </ul>"},{"location":"web/changelog/","title":"Changelog","text":""},{"location":"web/changelog/#0.7.0","title":"0.7.0 July 25, 2024","text":"<p>Warning</p> <p><code>v0.7.0</code> is only compoatible with latest iOS verision of SyncStage Agent - <code>0.6.0</code>. Please make sure to update your SyncStage Agent to the latest version.  To use Windows Desktop Agent, please remain with <code>0.6.2</code> version of the javascript SDK.</p> <p>Most changes in the 0.7.0 release was made to move management of the session settings to the javascript SDK. Session settings are removed from the Desktop Agent and are now managed by the javascript SDK. This change allows for more flexibility in managing the session settings and allows for more control over the session settings from the javascript SDK. Test application for 0.7.0 introduces a new UI for managing session settings.</p>"},{"location":"web/changelog/#added","title":"Added","text":"<ul> <li>New error codes <code>INVALID_DEVICE</code> and <code>INCOMPATIBLE_CONTENT</code></li> <li><code>getSessionSettings</code> method</li> <li><code>setInputDevice</code> method</li> <li><code>setOutputDevice</code> method</li> <li><code>setNoiseCancellation</code> method</li> <li><code>setDisableGain</code> method</li> <li><code>setDirectMonitor</code> method</li> <li><code>setLatencyOptimizationLevel</code> method</li> <li><code>ISessionSettings</code> interface</li> </ul>"},{"location":"web/changelog/#removed","title":"Removed","text":"<ul> <li><code>getLatencyOptimizationLevel</code> method</li> </ul>"},{"location":"web/changelog/#fixed","title":"Fixed","text":"<ul> <li>stream connection state after Internet reconnection</li> </ul>"},{"location":"web/changelog/#0.6.1","title":"0.6.1 May 31, 2024","text":""},{"location":"web/changelog/#fixed_1","title":"Fixed","text":"<ul> <li>Improved session state management</li> </ul>"},{"location":"web/changelog/#0.6.1","title":"0.6.1 May 31, 2024","text":""},{"location":"web/changelog/#fixed_2","title":"Fixed","text":"<ul> <li>Compatiblity check methods fixed</li> <li>Desktop Agent with web sdk compatibility checking procedure</li> </ul>"},{"location":"web/changelog/#0.6.0","title":"0.6.0 May 7, 2024","text":""},{"location":"web/changelog/#added_1","title":"Added","text":"<ul> <li><code>isCompatible</code> method</li> <li><code>getLatestCompatibleDesktopAgentVersion</code> method</li> <li><code>checkProvisionedStatus</code> method</li> <li><code>onDesktopAgentDeprovisioned</code> and <code>onDesktopAgentProvisioned</code> callbacks to </li> </ul>"},{"location":"web/changelog/#modified","title":"Modified","text":"<ul> <li>Renamed method <code>updateOnDesktopAgentReconnected</code> to <code>updateOnWebsocketReconnected</code> to <code>ISyncDesktopAgentDelegate</code></li> <li>Renamed <code>isRecording</code> field in ISession to <code>recordingStatus</code> which can be set to values from list: <code>['stopped', 'started']</code></li> <li>Extended <code>ISessionInfo</code> with <code>sessionName</code> field</li> <li>Updated type of <code>sessionCode</code> field within <code>ISessionInfo</code> to <code>string</code></li> </ul>"},{"location":"web/changelog/#fixed_3","title":"Fixed","text":"<ul> <li>Fixed breaking websocket connections to Desktop Agent due to possibility to run the SyncStage SDK in the web worker</li> </ul>"},{"location":"web/changelog/#0.5.0","title":"0.5.0 April 9, 2024","text":"<p>This SDK version provides auto-location selection without explicit latency measurements and selection.</p>"},{"location":"web/changelog/#removed_1","title":"Removed","text":"<ul> <li>removed location screens from the test application</li> <li>removed redundant <code>desktopAgentConnectionKeepAlive</code> and <code>desktopAgentLostConnection</code> from the <code>ISyncStageDesktopAgentDelegate</code></li> </ul>"},{"location":"web/changelog/#modified_1","title":"Modified","text":"<ul> <li>reordered createSession method parameters</li> <li><code>creteSession</code> zoneId and <code>studioServerId</code> parameters are optional and deprecated (likely to be removed in the next versions)</li> <li>reordered join method parameters</li> <li>join <code>zoneId</code> and <code>studioServerId</code> parameters are optional and deprecated (likely to be removed in the next versions)</li> <li><code>getBestAvailableServer()</code> marked as deprecated</li> <li>extended <code>ISyncStageDiscoveryDelegate</code> with <code>serverSelected(selectedServer: IServerInstance): void;</code> callback</li> <li>fixed test application stability issues</li> </ul>"},{"location":"web/changelog/#added_2","title":"Added","text":"<ul> <li><code>'STUDIO_SERVER_NOT_FOUND' = -12</code> SyncStageSDKErrorCode returned in case no Studio Server is available</li> <li><code>getSelectedServer()</code> method</li> </ul>"},{"location":"web/changelog/#0.4.3","title":"0.4.3 March 22, 2024","text":""},{"location":"web/changelog/#modified_2","title":"Modified","text":"<ul> <li>Fixed SyncStage service websocket URL</li> <li>Updated test application:<ul> <li>fixed hanging updateMeasurements interval in the session screen</li> <li>updated link to the Mac Desktop Agent</li> </ul> </li> </ul>"},{"location":"web/changelog/#0.4.2","title":"0.4.2 March 19, 2024","text":""},{"location":"web/changelog/#modified_3","title":"Modified","text":"<ul> <li>Fixed communication issues with SyncStage Desktop Agent</li> <li>Updated SyncStageErrorCodes list<ul> <li>Changed <code>SYNCSTAGE_OPENED_IN_ANOTHER_TAB</code> value</li> <li>Added <code>NOT_IN_SESSION</code>, <code>SYNCSTAGE_SERVICE_COMMUNICATION_ERROR</code>, <code>TIMEOUT_ERROR</code></li> <li>Removed <code>DESKTOP_AGENT_COMMUNICATION_ERROR</code></li> </ul> </li> <li>Extended ISyncStageDesktopAgentDelegate with two methods:</li> <li><code>desktopAgentConnectionKeepAlive(): void</code></li> <li><code>desktopAgentLostConnection(): void</code></li> <li>Updated flow of test application which improves user experience, and reorganizes the project structure:<ul> <li>Caching last selected location, nickname</li> <li>Auto SyncStage initialization</li> <li>Joining session from URL</li> <li>Desktop Agent Link indicator (based on keep alive callbacks from <code>ISyncStageDesktopAgentDelegate</code>)</li> <li>Updated routing and navigation</li> </ul> </li> <li>Added session code to <code>ISession</code> and <code>ISessionInfo</code> interfaces</li> </ul>"},{"location":"web/changelog/#0.4.1","title":"0.4.1 January 4, 2024","text":""},{"location":"web/changelog/#modified_4","title":"Modified","text":"<ul> <li>Fixed service websocket URL</li> </ul>"},{"location":"web/changelog/#0.4.0","title":"0.4.0 January 4, 2024","text":""},{"location":"web/changelog/#modified_5","title":"Modified","text":"<ul> <li>Added new error code NO_INPUT_DEVICE, returned on join session when no input device is detected</li> <li>Added two methods to the ISyncStageDesktopAgentDelegate interface: desktopAgentConnected and desktopAgentDisconnected</li> <li>Renamed method <code>updateOnDesktopAgentReconnected</code> to <code>updateOnWebsocketReconnected</code></li> <li>Updated the test app to be compatible with the SDK 0.4.0</li> </ul>"},{"location":"web/changelog/#0.3.0","title":"0.3.0 December 15, 2023","text":""},{"location":"web/changelog/#modified_6","title":"Modified","text":"<ul> <li>getDesktopAgentProtocolHandler method - returns URI that opens Desktop Agent.</li> <li>Init method now accepts a time-limited token instead of a SyncStage Secret.</li> <li>SyncStage constructor extended with onTokenExpired callback parameter.</li> <li>Init method, removed agent port parameter.</li> </ul>"},{"location":"web/changelog/#added_3","title":"Added","text":"<ul> <li>New error code for expired token</li> <li>Method for updating token</li> </ul>"},{"location":"web/changelog/#0.2.0","title":"0.2.0 August 18, 2023","text":""},{"location":"web/changelog/#added_4","title":"Added","text":"<ul> <li>Start and stop recording methods.</li> </ul>"},{"location":"web/changelog/#modified_7","title":"Modified","text":"<ul> <li>SyncStageUserDelegate - new methods</li> </ul>"},{"location":"web/changelog/#0.1.0","title":"0.1.0 June 30, 2023","text":""},{"location":"web/changelog/#added_5","title":"Added","text":"<p>All SyncStage SDK methods implemented. Works with Desktop Agent on MAC.</p>"},{"location":"web/changelog/#0.0.1","title":"0.0.1 March 27, 2023","text":""},{"location":"web/changelog/#added_6","title":"Added","text":"<p>Mock methods for:</p> <ul> <li>Create session</li> <li>Join session</li> <li>Leave session</li> <li>Mute streams</li> <li>Change stream volumes</li> </ul>"},{"location":"web/desktop-agent-macos/","title":"macOS","text":"<p>To provide low-latency capabilities SyncStage uses platform-specific optimizations, not available from the browser's engine. Therefore, we have introduced a SyncStage Agent, an application that be installed in the system and run in the background. </p> <p>Latest SyncStage Desktop Agent for macOS</p>"},{"location":"web/desktop-agent-macos/#versions","title":"Versions","text":""},{"location":"web/desktop-agent-macos/#0.6.0","title":"0.6.0 September 4, 2024","text":""},{"location":"web/desktop-agent-macos/#changelog","title":"Changelog","text":"<ul> <li>Input and output devices selection moved from Desktop Agent to Web SDK.</li> <li>Direct Monitor toggle moved from Desktop Agent to Web SDK.</li> <li>Noise Cancellation toggle moved from Desktop Agent to Web SDK.</li> <li>Improved audio quality and network conditions resiliency.</li> </ul>"},{"location":"web/desktop-agent-macos/#0.5.0","title":"0.5.0 June 5, 2024","text":""},{"location":"web/desktop-agent-macos/#changelog_1","title":"Changelog","text":"<ul> <li>Extended NAT support for better IPv6 networks handling</li> </ul>"},{"location":"web/desktop-agent-macos/#0.4.1","title":"0.4.1 May 21, 2024","text":""},{"location":"web/desktop-agent-macos/#changelog_2","title":"Changelog","text":""},{"location":"web/desktop-agent-macos/#added","title":"Added","text":"<ul> <li>DAW enhancements</li> </ul>"},{"location":"web/desktop-agent-macos/#0.4.0","title":"0.4.0 April 9, 2024","text":""},{"location":"web/desktop-agent-macos/#changelog_3","title":"Changelog","text":""},{"location":"web/desktop-agent-macos/#added_1","title":"Added","text":"<ul> <li>Noise cancellation</li> </ul>"},{"location":"web/desktop-agent-macos/#0.3.1","title":"0.3.1 March 19, 2024","text":""},{"location":"web/desktop-agent-macos/#changelog_4","title":"Changelog","text":""},{"location":"web/desktop-agent-macos/#added_2","title":"Added","text":"<ul> <li>Direct monitor</li> <li>DAW interface</li> </ul>"},{"location":"web/desktop-agent-macos/#0.3.0","title":"0.3.0 December 15, 2023","text":""},{"location":"web/desktop-agent-macos/#compatibility","title":"Compatibility","text":"<ul> <li>Compatible with Web SDK &gt;= 0.3.0</li> </ul>"},{"location":"web/desktop-agent-macos/#changelog_5","title":"Changelog","text":""},{"location":"web/desktop-agent-macos/#added_3","title":"Added","text":"<ul> <li>Support for all main browsers</li> <li>Opening Desktop Agent from the browser</li> </ul>"},{"location":"web/desktop-agent-macos/#0.2.0","title":"0.2.0 August 22, 2023","text":""},{"location":"web/desktop-agent-macos/#changelog_6","title":"Changelog","text":""},{"location":"web/desktop-agent-macos/#added_4","title":"Added","text":"<ul> <li>Session recording</li> </ul>"},{"location":"web/desktop-agent-macos/#0.1.1","title":"0.1.1 July 25, 2023","text":""},{"location":"web/desktop-agent-macos/#changelog_7","title":"Changelog","text":""},{"location":"web/desktop-agent-macos/#added_5","title":"Added","text":"<ul> <li>Latency Optimization Level selection.</li> </ul>"},{"location":"web/desktop-agent-macos/#0.1.0","title":"0.1.0 July 17, 2023","text":""},{"location":"web/desktop-agent-macos/#changelog_8","title":"Changelog","text":"<p>First Desktop Agent release.</p>"},{"location":"web/desktop-agent-windows/","title":"Windows","text":"<p>To provide low-latency capabilities SyncStage uses platform-specific optimizations, not available from the browser's engine. Therefore, we have introduced a SyncStage Agent, an application that be installed in the system and run in the background. </p> <p>Latest SyncStage Desktop Agent for Windows</p>"},{"location":"web/desktop-agent-windows/#versions","title":"Versions","text":""},{"location":"web/desktop-agent-windows/#0.2.0","title":"0.2.0 June 5, 2024","text":""},{"location":"web/desktop-agent-windows/#compatibility","title":"Compatibility","text":"<ul> <li>Compatible with Web SDK &gt;= 0.5.0</li> </ul>"},{"location":"web/desktop-agent-windows/#changelog","title":"Changelog","text":"<ul> <li>Improved audio quality.</li> <li>Reduced audio latency.</li> <li>Added handling for dynamic input/output changes.</li> <li>Added Noise Cancellation filter.</li> </ul>"},{"location":"web/desktop-agent-windows/#versions_1","title":"Versions","text":""},{"location":"web/desktop-agent-windows/#0.1.0","title":"0.1.0 January 4, 2024","text":""},{"location":"web/desktop-agent-windows/#compatibility_1","title":"Compatibility","text":"<ul> <li>Compatible with Web SDK &gt;= 0.4.0</li> </ul>"},{"location":"web/desktop-agent-windows/#known-issues","title":"Known issues","text":"<ul> <li>Received audio streams may sound robotic.</li> <li>Audio latency levels are not yet optimized for the best possible user experience.</li> <li>Volume control sliders are not currently implemented.</li> <li>The ability to mute or unmute audio streams is not yet available.</li> <li>Some of the responses are mocked e.g. getReceiverMeasurements, getTransmitterMeasurements</li> <li>Certain responses, such as getReceiverMeasurements and getTransmitterMeasurements, are currently mocked for testing purposes.</li> <li>The initial state of the \"microphone muted\" indicator for receivers may not be accurate. This issue should be resolved after the first change in microphone mute status.</li> <li>The user connectivity status indicator may not be accurate.In some cases, it may indicate connection problems even when the connection is correct.</li> <li>The ability to dynamically change audio inputs and outputs is not yet supported.</li> <li>Audio devices, such as microphones or headphones, connected after Desktop Agent startup will not be detected automatically. Please restart Desktop Agent for these changes to take effect.</li> </ul>"},{"location":"web/desktop-agent-windows/#changelog_1","title":"Changelog","text":""},{"location":"web/desktop-agent-windows/#added","title":"Added","text":"<ul> <li>Support for basic flow from provisioning to joining the session.</li> <li>Support for all main browsers.</li> </ul>"},{"location":"web/known-issues/","title":"Known issues","text":""},{"location":"web/known-issues/#sdk","title":"SDK","text":"<p>SyncStage Web SDK <code>v0.7.0</code> does not have any know issues. </p> <p>Please check the pages below to learn about known Desktop Agent issues:</p> <ul> <li>Desktop Agent for macOS</li> <li>Desktop Agent for Windows</li> </ul>"},{"location":"web/overview/","title":"Overview","text":"<p>SyncStage SDK for Web brings low latency communication capabilities to your desktop.</p> <p>It consists of two components:</p> <ul> <li>SyncStage Web SDK (TypeScript &amp; JavaScript) embedded into your web application.</li> <li>SyncStage Agent running on your desktop.</li> </ul> <p>SyncStage SDK for Web latest version: <code>v0.7.0</code> (View changelog)</p> <p>Note</p> <p>JavaScript SDK <code>v0.7.0</code> is compatible only with the latest macOS version of SyncStage Agent - <code>0.6.0</code>. Please make sure to update your SyncStage Agent before use.</p> <p>To use Windows Desktop Agent, please remain with <code>0.6.2</code> version of the JavaScript SDK.</p> <p>Get SDK Test SyncStage Web SDK</p>"},{"location":"web/overview/#why-do-i-need-syncstage-agent","title":"Why do I need SyncStage Agent?","text":"<p>To provide low-latency capabilities SyncStage uses platform-specific optimizations, not available from the browser's engine. Therefore, we have introduced a SyncStage Agent, an application that be installed in the system and run in the background.</p>"},{"location":"web/overview/#requirements","title":"Requirements","text":""},{"location":"web/overview/#platform","title":"Platform","text":"<p>SyncStage Agent, necessary to establish audio communications, is currently available only for macOS. Both Intel and Apple chips are supported. We are working to bring SyncStage to other platforms, i.e. Windows and Linux.</p> Browser Support Comment  macOS  Windows  Linux Work in progress"},{"location":"web/provisioning/","title":"Provisioning","text":"<p>SyncStage Secret is a MASTER key used for provisioning applications defined in the Developer Console. The SyncStage Secret should be stored securely and should not be disclosed to end-users. Using the API defined below, your backend can issue time-limited tokens (<code>jwt</code>) that should be provided in the Web SDK's <code>SyncStage.init(jwt: string)</code> method.</p> <p>The following API is sensitive to Cross-Origin Resource Sharing (CORS) and does not allow requests from webpages hosted on domains different from the current webpage. This restriction is in place to prevent direct usage of SyncStage secrets from web applications. The API can be freely requested from any backend service.</p> <p>This API provides two methods: one for logging in using the SyncStage secret payload and the second for refreshing the <code>jwt</code> using a <code>refreshToken</code>.</p> <p> </p> <p></p>"},{"location":"web/quickstart/","title":"Quickstart","text":""},{"location":"web/quickstart/#before-you-begin","title":"Before you begin","text":"<p>Before you start developing your application with the SyncStage SDK, you need to opt-in to Early Access Developer program and get your SyncStage SDK secrets. Once you have opted-in we will contact you to provide you with your SDK secrets. The SDK secrets are your credentials that authenticates requests associated with your project.</p> <p>Become an Early Access Developer</p>"},{"location":"web/quickstart/#start-with-an-example-project","title":"Start with an example project","text":"<p>The best way to start with SyncStage is by trying out our example project available on GitHub SyncStage Test App for Web.</p> <p>Learn more</p>"},{"location":"web/quickstart/#use-syncstage-sdk-in-your-application","title":"Use SyncStage SDK in your application","text":""},{"location":"web/quickstart/#1-add-package-dependency","title":"1. Add package dependency","text":"<p>To get the latest npm package of the SyncStage SDK install it from: https://www.npmjs.com/package/@opensesamemedia/syncstage</p>"},{"location":"web/quickstart/#2-get-syncstage-desktop-agent","title":"2. Get SyncStage Desktop Agent","text":""},{"location":"web/quickstart/#macos","title":"macOS","text":"<p>To use test application you need to install SyncStage Desktop Agent on your Mac. Download SyncStage Desktop Agent for macOS</p>"},{"location":"web/quickstart/#windows","title":"Windows","text":"<p>To use test application you need to install SyncStage Desktop Agent on your PC.</p> <p>Download SyncStage Desktop Agent for Windows</p>"},{"location":"web/quickstart/#3-integrate-provisioning-into-your-app-backend","title":"3. Integrate provisioning into your app backend","text":""},{"location":"web/quickstart/#4-integrate-the-syncstage-class-with-your-app","title":"4. Integrate the SyncStage class with your app","text":"<p>Here you can find a list of:</p> <ul> <li>SDK Methods</li> <li>SDK Delegates</li> <li>SDK Error Codes</li> </ul>"},{"location":"web/sdk-data-interfaces/","title":"Data interfaces","text":""},{"location":"web/sdk-data-interfaces/#syncstage-data-interfaces","title":"SyncStage data interfaces","text":"<pre><code>interface IHostInfo {\n  port: number;\n  address: string;\n  audioServerId: string;\n  streamingUrl: string;\n}\n</code></pre> <pre><code>interface IConnectionInfo {\n  connectionId: string;\n  createdAt: string;\n  updatedAt: string;\n  userId: string;\n  isMuted: boolean;\n  displayName?: string | null;\n  hostInfo?: IHostInfo | null;\n\n  connection(): Connection;\n}\n</code></pre> <pre><code>interface IMeasurements {\n  networkDelayMs: number;\n  networkJitterMs: number;\n  quality: number;\n}\n</code></pre> <pre><code>interface IServerInstance {\n  zoneId: string;\n  zoneName: string;\n  studioServerId: string;\n}\n</code></pre> <pre><code>interface ISessionIdentifier {\n  sessionId: string;\n  sessionCode: string;\n  createdAt: string;\n}\n</code></pre> <pre><code>interface ISession {\n  sessionId: string;\n  sessionCode: string | null;\n  createdAt: string;\n  updatedAt: string;\n  transmitter?: IConnection | null;\n  receivers: Array&lt;IConnection&gt;;\n  isRecording: boolean;\n}\n</code></pre> <pre><code>interface IConnection {\n  identifier: string;\n  userId: string;\n  displayName?: string | null;\n  isMuted: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n</code></pre> <pre><code>interface ISessionInfo {\n  sessionId: string;\n  sessionCode: string | null;\n  sessionStatus: string;\n  serverIsReady: boolean;\n  websocketUrl: string;\n  transmitter?: IConnectionInfo | null;\n  receivers: Array&lt;IConnectionInfo&gt;;\n  createdAt: string;\n  updatedAt: string;\n  recordingStatus: string;\n}\n</code></pre> <pre><code>export interface IZoneLatency {\n  name: string;\n  latency: string;\n}\n</code></pre> <pre><code>interface ISessionSettings {\n  inputDevices: Array&lt;{\n    identifier: number;\n    name: string;\n    selected: boolean;\n  }&gt;;\n  outputDevices: Array&lt;{\n    identifier: number;\n    name: string;\n    selected: boolean;\n  }&gt;;\n  latencyOptimizationLevel: number;\n  noiseCancellationEnabled: boolean;\n  disableGain: boolean;\n  directMonitorEnabled: boolean;\n}\n</code></pre>"},{"location":"web/sdk-delegates/","title":"Delegates","text":"<p>SyncStage class provide four delegates:</p> <ul> <li><code>ISyncStageUserDelegate</code></li> <li><code>ISyncStageConnectivityDelegate</code></li> <li><code>ISyncStageDiscoveryDelegate</code></li> <li><code>ISyncStageDesktopAgentDelegate</code></li> </ul> <p>which provide a set of callbacks to inform your application about asynchronous events from the SyncStage. </p> <p>You can define those object and provide to the SyncStage constructor or update public SyncStage properties <code>userDelegate</code>, <code>connectivityDelegate</code>, <code>discoveryDelegate</code>, and <code>desktopAgentDelegate</code> anytime.</p>"},{"location":"web/sdk-delegates/#syncstageuserdelegate","title":"SyncStageUserDelegate","text":"<p>Responsible for getting callbacks about users' state in the session.</p> <pre><code>interface ISyncStageUserDelegate {\n  userJoined(connection: IConnection): void;\n  userLeft(identifier: string): void;\n  userMuted(identifier: string): void;\n  userUnmuted(identifier: string): void;\n  sessionRecordingStarted(): void;\n  sessionRecordingStopped(): void;\n  sessionOut(): void;\n}\n</code></pre>"},{"location":"web/sdk-delegates/#syncstageconnectivitydelegate","title":"SyncStageConnectivityDelegate","text":"<p>Responsible for getting callbacks about users' connectivity in the session.</p> <pre><code>interface ISyncStageConnectivityDelegate {\n  transmitterConnectivityChanged(connected: boolean): void;\n  receiverConnectivityChanged(identifier: string, connected: boolean): void;\n  desktopAgentReconnected(): void;\n}\n</code></pre> <p><code>transmitterConnectivityChanged</code> and <code>receiverConnectivityChanged</code> can be used to update connectivity indicator of particular connections. The <code>desktopAgentReconnected</code> callback is suggested to be used to trigger rebuild of the session state in the application (during the disconnection, new connections might be added or removed to the session which result in the ui state inconsistency).</p>"},{"location":"web/sdk-delegates/#syncstagedesktopagentdelegate","title":"SyncStageDesktopAgentDelegate","text":"<p>Responsible for getting callbacks with information if SyncStage Desktop Agent is already acquired by some other browser tab to prevent parallel access, and general Desktop Agent connection events.</p> <pre><code>interface ISyncStageDesktopAgentDelegate {\n  desktopAgentAquired(): void;\n  desktopAgentReleased(): void;\n  desktopAgentConnected(): void; // Reports if Desktop Agent is alive (will be triggered periodicaly on Dekstop Agent keep alive messages)\n  desktopAgentDisconnected(): void; // Reports Desktop Agent connection loss or lack of keep alive\n  onDesktopAgentDeprovisioned(): void; // Reports if Desktop Agent got deprovitioned - can happen if Desktop Agent is restarted \n  onDesktopAgentProvisioned(): void; // Periodically confirms that Desktop Agent is still provisioned (was not restarted)\n}\n</code></pre>"},{"location":"web/sdk-error-codes/","title":"Error codes","text":"<p>Most of the SDK methods return SyncStageSDKErrorCode which can be decoded using following enum class.</p> <pre><code>enum SyncStageSDKErrorCode {\n  'TOKEN_EXPIRED' = -2002,\n  'SYNCSTAGE_OPENED_IN_ANOTHER_TAB' = -2001,\n  'INVALID_DEVICE' = -1003,\n  'INCOMPATIBLE_CONTENT' = -1002,\n  'NOT_IN_SESSION' = -1001,\n  'API_UNAUTHORIZED' = -1000,\n  'STUDIO_SERVER_NOT_FOUND' = -12,\n  'SYNCSTAGE_SERVICE_COMMUNICATION_ERROR' = -11,\n  'TIMEOUT_ERROR' = -10,\n  'UNKNOWN_ERROR' = -1,\n  'OK' = 0,\n  'CONFIGURATION_ERROR' = 1,\n  'API_ERROR' = 2,\n  'STREAM_DOES_NOT_EXIST' = 3,\n  'BAD_VOLUME_VALUE' = 4,\n  'NO_ZONE_AVAILABLE' = 5,\n  'NO_STUDIO_SERVER_AVAILABLE' = 6,\n  'NO_INPUT_DEVICE' = 7,\n}\n</code></pre>"},{"location":"web/sdk-latency-optimization-level/","title":"Latency optimization level","text":"<p>The SyncStage SDK supports various latency optimization modes to accommodate different session requirements, whether ultra-low latency or exceptionally high audio quality is needed.</p> <pre><code>enum LatencyOptimizationLevel {\n  highQuality = 0, // No optimization - high quality\n  optimized = 1, // A bit of optimization - cracks can happen\n  bestPerformance = 2, // Low latency, cracks in poor networks\n  ultraFast = 3, // Ultra low latency\n}\n\nexport default LatencyOptimizationLevel;\n</code></pre>"},{"location":"web/sdk-methods/","title":"Methods","text":""},{"location":"web/sdk-methods/#070","title":"0.7.0","text":""},{"location":"web/sdk-methods/#constructor","title":"Constructor","text":"<pre><code>class SyncStage implements ISyncStage{\n    constructor(\n        userDelegate: ISyncStageUserDelegate | null,\n        connectivityDelegate: ISyncStageConnectivityDelegate | null,\n        discoveryDelegate: ISyncStageDiscoveryDelegate | null,\n        desktopAgentDelegate: ISyncStageDesktopAgentDelegate | null,\n        onTokenExpired: (() =&gt; Promise&lt;string&gt;) | null,\n    );\n}\n</code></pre> <p>Constructor parameters:</p> <ul> <li> <p><code>userDelegate</code> - delegate object to receive events about users in session state</p> </li> <li> <p><code>connectivityDelegate</code> - delegate object to receive events with information about stream connection to Studio Server state</p> </li> <li> <p><code>desktopAgentDelegate</code> - delegate object to receive events with information of desktop agent acquisition and release to prevent users from using SyncStage in multiple browser tabs at once</p> </li> <li> <p><code>onTokenExpired</code> - callback to be called when <code>jwt</code> expires, callback should return new refetched <code>jwt</code></p> </li> </ul>"},{"location":"web/sdk-methods/#check-compatibility","title":"Check compatibility","text":"<p>Checks if SyncStage SDK is compatible with currently installed Desktop Agent</p> <pre><code>async isCompatible(currentOs: string): Promise&lt;boolean&gt;;\n</code></pre> <p>Parameters:</p> <ul> <li><code>currentOS</code> - operating system should be provided. Accepted values from list: <code>['Windows', 'macOS']</code></li> </ul>"},{"location":"web/sdk-methods/#get-latest-compatible-desktop-agent-version","title":"Get latest Compatible Desktop Agent version","text":"<pre><code>getLatestCompatibleDesktopAgentVersion(currentOs: string): Promise&lt;string | null&gt;;\n</code></pre> <p>Parameters:</p> <ul> <li><code>currentOS</code> - operating system should be provided. Accepted values from list: <code>['Windows', 'macOS']</code></li> </ul>"},{"location":"web/sdk-methods/#initialize","title":"Initialize","text":"<p>Initializes and provisions the SDK SyncStage object.</p> <pre><code>async init(\n        jwt: string,\n    ): Promise&lt;SyncStageSDKErrorCode&gt;\n</code></pre> <p>Parameters:</p> <ul> <li><code>jwt</code> - token obtained in the provisioning process.</li> </ul>"},{"location":"web/sdk-methods/#check-if-syncstage-agent-is-provisioned","title":"Check if SyncStage Agent is provisioned","text":"<p>Returns if Desktop Agent has been already provisioned.</p> <pre><code>async checkProvisionedStatus(): Promise&lt;boolean&gt;;\n</code></pre>"},{"location":"web/sdk-methods/#update-jwt","title":"Update JWT","text":"<p>You can update JWT anytime you want, even before expiration takes place.</p> <pre><code>async updateToken(jwt: string): Promise&lt;SyncStageSDKErrorCode&gt;\n</code></pre> <ul> <li><code>jwt</code> - token obtained in the provisioning process.</li> </ul>"},{"location":"web/sdk-methods/#get-is-desktop-agent-connected","title":"Get is desktop agent connected","text":"<p>Checks if desktop agent is running and available on the localhost.</p> <pre><code>isDesktopAgentConnected(): boolean\n</code></pre>"},{"location":"web/sdk-methods/#get-sdk-version","title":"Get SDK version","text":"<p>Gets SDK version.</p> <pre><code>getSDKVersion(): string\n</code></pre>"},{"location":"web/sdk-methods/#gets-autoselected-studio-server","title":"Gets autoselected Studio Server","text":"<p>Get autoselected server instance info</p> <pre><code>async getSelectedServer(): Promise&lt;[IServerInstance | null, SyncStageSDKErrorCode]&gt;;\n</code></pre>"},{"location":"web/sdk-methods/#get-best-available-studio-server","title":"Get best available Studio Server","text":"<p>Get best available server, where a session can be created</p> <pre><code>async getBestAvailableServer(): Promise&lt;[IServerInstance | null, SyncStageSDKErrorCode]&gt;\n</code></pre>"},{"location":"web/sdk-methods/#update-sdk-to-syncstage-backend-connected-callback","title":"Update SDK to SyncStage backend connected callback","text":"<pre><code>  updateOnDesktopAgentReconnected(onDesktopAgentReconnected: () =&gt; void): void;\n</code></pre> <p>Parameters:</p> <ul> <li><code>onDesktopAgentReconnected</code> - method to be called when the browser SDK reconnects to Desktop Agent. Session state should be refetched and synchronized on the UI in this callback.</li> </ul>"},{"location":"web/sdk-methods/#get-server-instances","title":"Get server instances","text":"<p>Get server instances so you can select the server that is suitable for your session.</p> <pre><code>  async getServerInstances(): Promise&lt;[IServerInstances | null, SyncStageSDKErrorCode]&gt;\n</code></pre>"},{"location":"web/sdk-methods/#create-a-session","title":"Create a session","text":"<p>Creates a session in a given zone by a given user from your user pool.</p> <pre><code>async createSession(\n    userId: string,\n    zoneId?: string | null,\n    studioServerId?: string | null,\n  ): Promise&lt;[ISessionIdentifier | null, SyncStageSDKErrorCode]&gt;\n</code></pre> <p>Parameters:</p> <ul> <li><code>zoneId</code> - zone in which your session is hosted</li> <li><code>studioServerId</code> - studio server where you are running your session</li> <li><code>userId</code> - id of your app user to match the data between SyncStage and your backend</li> </ul>"},{"location":"web/sdk-methods/#join-the-session","title":"Join the session","text":"<p>Joins a particular session identified by <code>sessionCode</code>.</p> <pre><code>async join(\n    sessionCode: string,\n    userId: string,\n    displayName?: string | null,\n    zoneId?: string | null,\n    studioServerId?: string | null,\n  ): Promise&lt;[ISession | null, SyncStageSDKErrorCode]&gt;;\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>sessionCode</code> - the session code</p> </li> <li> <p><code>userId</code> - id of your app user to match de data between SyncStage and your backend</p> </li> <li> <p><code>zoneId</code> - zone in which your session is hosted</p> </li> <li> <p><code>studioServerId</code> - studio server where you are running your session</p> </li> <li> <p><code>displayName</code> - your app user display name</p> </li> </ul>"},{"location":"web/sdk-methods/#get-session-state","title":"Get session state","text":"<p>Gets state of currently joined session.</p> <pre><code>async session(): Promise&lt;[ISession | null, SyncStageSDKErrorCode]&gt; \n</code></pre>"},{"location":"web/sdk-methods/#leave-the-session","title":"Leave the session","text":"<p>Leaves currently joined session.</p> <pre><code>async leave(): Promise&lt;SyncStageSDKErrorCode&gt; \n</code></pre>"},{"location":"web/sdk-methods/#mute-unmute-microphone","title":"Mute / unmute microphone","text":"<p>Enables or disables microphone stream.</p> <pre><code>async toggleMicrophone(mute: boolean): Promise&lt;SyncStageSDKErrorCode&gt;\n</code></pre> <p>Parameters:</p> <ul> <li><code>mute</code> - desired state of the mute option</li> </ul>"},{"location":"web/sdk-methods/#is-muted","title":"Is muted","text":"<p>Returns state of microphone stream.</p> <pre><code>async isMicrophoneMuted(): Promise&lt;[boolean | null, SyncStageSDKErrorCode]&gt;\n</code></pre>"},{"location":"web/sdk-methods/#get-receiver-network-measurements","title":"Get receiver network measurements","text":"<p>Returns Measurements object with network delay, jitter, and calculated network quality indicators.</p> <pre><code>async getReceiverMeasurements(identifier: string): Promise&lt;[IMeasurements | null, SyncStageSDKErrorCode]&gt;\n</code></pre> <p>Parameters:</p> <ul> <li><code>identifier</code> - receiver's identifier</li> </ul>"},{"location":"web/sdk-methods/#get-transmitter-network-measurements","title":"Get transmitter network measurements","text":"<p>Returns Measurements object with network delay, jitter, and calculated network quality indicators.</p> <pre><code>async getTransmitterMeasurements(): Promise&lt;[IMeasurements | null, SyncStageSDKErrorCode]&gt;\n</code></pre>"},{"location":"web/sdk-methods/#start-recording","title":"Start recording","text":"<pre><code>async startRecording(): Promise&lt;SyncStageSDKErrorCode&gt;\n</code></pre>"},{"location":"web/sdk-methods/#stop-recording","title":"Stop recording","text":"<pre><code>async stopRecording(): Promise&lt;SyncStageSDKErrorCode&gt;\n</code></pre>"},{"location":"web/sdk-methods/#get-session-settings","title":"Get Session Settings","text":"<p>Gets session settings.</p> <pre><code>getSessionSettings(): Promise&lt;[ISessionSettings | null, SyncStageSDKErrorCode]&gt;\n</code></pre>"},{"location":"web/sdk-methods/#set-input-device","title":"Set Input Device","text":"<p>Sets input device.</p> <pre><code>  setInputDevice(identifier: number): Promise&lt;SyncStageSDKErrorCode&gt;;\n</code></pre> <ul> <li><code>identifier</code> - device identifier</li> </ul>"},{"location":"web/sdk-methods/#set-output-device","title":"Set Output Device","text":"<p>Sets output device.</p> <pre><code>  setOutputDevice(identifier: number): Promise&lt;SyncStageSDKErrorCode&gt;;\n</code></pre> <ul> <li><code>identifier</code> - device identifier</li> </ul>"},{"location":"web/sdk-methods/#set-noise-cancellation","title":"Set Noise Cancellation","text":"<p>Sets noise cancellation.</p> <pre><code>setNoiseCancellation(enabled: boolean): Promise&lt;SyncStageSDKErrorCode&gt;;\n</code></pre>"},{"location":"web/sdk-methods/#set-disable-gain","title":"Set Disable Gain","text":"<p>Sets disable gain.</p> <pre><code>  setDisableGain(disabled: boolean): Promise&lt;SyncStageSDKErrorCode&gt;;\n</code></pre> <ul> <li><code>disabled</code> - boolean value</li> </ul>"},{"location":"web/sdk-methods/#set-direct-monitor","title":"Set Direct Monitor","text":"<p>Sets direct monitor.</p> <pre><code>  setDirectMonitor(enabled: boolean): Promise&lt;SyncStageSDKErrorCode&gt;;\n</code></pre> <ul> <li><code>enabled</code> - boolean value</li> </ul>"},{"location":"web/sdk-methods/#set-latency-optimization-level","title":"Set Latency Optimization Level","text":"<p>Sets latency optimization level.</p> <pre><code>  setLatencyOptimizationLevel(level: LatencyOptimizationLevel): Promise&lt;SyncStageSDKErrorCode&gt;;\n</code></pre> <ul> <li><code>level</code> - latency optimization level</li> </ul>"},{"location":"web/sdk-methods/#register-desktop-agent-reconnected-callback","title":"Register Desktop Agent Reconnected Callback","text":"<p>In case of reconnection UI application should be aware of this fact, to refetch the session state to keep it synchronized.</p> <pre><code>registerDesktopAgentReconnectedCallback(onWebsocketReconnected: () =&gt; void): void;\n</code></pre> <p>Parameters:</p> <ul> <li><code>onWebsocketReconnected</code> - callback</li> </ul>"},{"location":"web/sdk-methods/#unregister-desktop-agent-reconnected-callback","title":"Unregister Desktop Agent Reconnected Callback","text":"<p>Remove the callback in the SyncStage.</p> <pre><code>unregisterDesktopAgentReconnectedCallback(): void;\n</code></pre>"},{"location":"web/sdk-methods/#get-uri-for-opening-syncstage-agent-on-macos-or-on-windows","title":"Get URI for opening SyncStage Agent on macOS or on Windows","text":"<pre><code>async getDesktopAgentProtocolHandler(): Promise&lt;string&gt;;\n</code></pre>"},{"location":"web/test-app/","title":"Test App","text":""},{"location":"web/test-app/#test-app","title":"Test App","text":"<p>The best way to start you journey with SyncStage is by trying out our example project available on GitHub SyncStage Test App for Web. This tutorial shows you how to clone, build, and run the application on your device or on AWS Amplify.</p>"},{"location":"web/test-app/#get-syncstage-desktop-agent","title":"Get SyncStage Desktop Agent","text":"<p>To use test application you need to install SyncStage Desktop Agent on your Mac.</p> <p> Download for macOS  Download for Windows</p>"},{"location":"web/test-app/#get-a-syncstage-sdk-secret","title":"Get a SyncStage SDK secret","text":"<p>To run the SyncStage Test App you will need to add a SyncStageSecret to the backend (as a file using docker-compose deployment or as a secret in Amplify deployment).</p> <p>Don't know how to get the secret file? See our Quickstart Guide for more details.</p>"},{"location":"web/test-app/#set-up-your-development-project","title":"Set up your development project","text":"<p>Follow these steps to run the Test App project on your local machine.</p> <ol> <li>Clone a repository using: <code>git clone git@github.com:opensesamemedia/syncstage-sdk-npm-package-tester.git</code></li> <li>Create <code>.env</code> file within <code>web-application</code> directory and fill it with following variables: <pre><code>REACT_APP_DOCKER_COMPOSE_BACKEND=true\nREACT_APP_BACKEND_BASE_PATH=http://localhost:3000/api\n</code></pre></li> <li>Ensure Docker and docker-compose are installed on your machine.</li> <li>Copy the SyncStageSecret.json file into the <code>backend/src</code> path.</li> <li>Open a terminal and navigate to the root directory of the repository.</li> <li>Run the following commands: <pre><code>docker-compose build --no-cache\ndocker-compose up\n</code></pre></li> <li>The application will start and you can access it in your browser at <code>http://localhost:3001</code> (it might take some time to load, because it runs in development mode)</li> </ol>"},{"location":"web/test-app/#use-the-app","title":"Use the app","text":"<p>Firstly you will be asked to login. Credentials are defined in <code>backend/src/user-db.json</code> file for docker-compose deployment or in the AWS Cognito using AWS Amplify deployment (learn more). </p> <p>Then you will be asked to install Desktop Agent on your Mac. </p> <p>Once installed and running you will see </p> <p>Input nickname of the user that will join the session </p> <p>You can now join existing session or create a new one </p> <p>Enjoy your low latency session </p>"},{"location":"web/using-web-worker/","title":"Using Web Worker","text":""},{"location":"web/using-web-worker/#using-web-worker","title":"Using Web Worker","text":"<p>The SyncStage SDK uses WebSocket to communicate with the Desktop Agent, maintaining a persistent connection that allows real-time communication between the two system components.</p>"},{"location":"web/using-web-worker/#the-problem-with-browsers","title":"The Problem with Browsers","text":"<p>When a browser tab is not active or the browser is running in the background, the browser optimizes its resources. This optimization can lead to the freezing and disconnection of WebSocket connections. This behavior can corrupt the state of SyncStage for users, leading to an inconsistent user experience.</p>"},{"location":"web/using-web-worker/#the-solution-web-workers","title":"The Solution: Web Workers","text":"<p>To circumvent this issue, in the SyncStage web test application we run the SyncStage class within a Web Worker. Web Workers are a simple means for web content to run scripts in background threads. The worker thread can perform tasks without interfering with the user interface.</p> <p>In addition, workers utilize thread-like message passing to achieve parallelism. They're perfect for performing processing or computation that would otherwise block the UI thread.</p> <p>When SyncStage is run within a Web Worker, the WebSocket connection is not disturbed by the browser's optimization process. This ensures that the SyncStage state remains consistent for users, regardless of whether the browser tab is active or not.</p>"},{"location":"web/using-web-worker/#web-worker","title":"Web Worker","text":"<p>Below you can find our implementation of the web worker in the test application. Folowing script should be saved as  <code>worker.js</code> in the application project scope.</p> <pre><code>import SyncStage from '@opensesamemedia/syncstage-sdk-npm-package-development';\nimport SyncStageUserDelegate from './SyncStageUserDelegate';\nimport SyncStageConnectivityDelegate from './SyncStageConnectivityDelegate';\nimport SyncStageDiscoveryDelegate from './SyncStageDiscoveryDelegate';\nimport SyncStageDesktopAgentDelegate from './SyncStageDesktopAgentDelegate';\n\nlet syncStage;\n\nself.onmessage = function (e) {\n  const { id, method, args } = e.data;\n\n  const userDelegate = new SyncStageUserDelegate(\n    (connection) =&gt; {\n      self.postMessage({ id: -1, result: { callback: 'onUserJoined', data: connection } });\n    }, //onUserJoined\n    (identifier) =&gt; {\n      self.postMessage({ id: -1, result: { callback: 'onUserLeft', data: identifier } });\n    }, //onUserLeft\n    (identifier) =&gt; {\n      self.postMessage({ id: -1, result: { callback: 'onUserMuted', data: identifier } });\n    }, //onUserMuted\n    (identifier) =&gt; {\n      self.postMessage({ id: -1, result: { callback: 'onUserUnmuted', data: identifier } });\n    }, //onUserUnmuted\n    () =&gt; {\n      self.postMessage({ id: -1, result: { callback: 'onRecordingStarted' } });\n    }, //onRecordingStarted\n    () =&gt; {\n      self.postMessage({ id: -1, result: { callback: 'onRecordingStopped' } });\n    }, //onRecordingStopped\n    () =&gt; {\n      self.postMessage({ id: -1, result: { callback: 'onSessionOut' } });\n    }, //onSessionOut\n  );\n  const connectivityDelegate = new SyncStageConnectivityDelegate(\n    (connected) =&gt; {\n      self.postMessage({ id: -1, result: { callback: 'onTransmitterConnectivityChanged', data: connected } });\n    }, //onTransmitterConnectivityChanged\n    (identifier, connected) =&gt; {\n      self.postMessage({ id: -1, result: { callback: 'onReceiverConnectivityChanged', data: { identifier, connected } } });\n    }, //onReceiverConnectivityChanged\n  );\n\n  const discoveryDelegate = new SyncStageDiscoveryDelegate(\n    (zones) =&gt; {\n      self.postMessage({ id: -1, result: { callback: 'onDiscoveryResults', data: zones } });\n    }, //onDiscoveryResults\n    (results) =&gt; {\n      self.postMessage({ id: -1, result: { callback: 'onDiscoveryLatencyTestResults', data: results } });\n    }, //onDiscoveryLatencyTestResults\n    (selectedServer) =&gt; {\n      self.postMessage({ id: -1, result: { callback: 'onServerSelected', data: selectedServer } });\n    }, //onServerSelected\n  );\n  const desktopAgentDelegate = new SyncStageDesktopAgentDelegate(\n    () =&gt; {\n      self.postMessage({ id: -1, result: { callback: 'onDesktopAgentAquired' } });\n    }, //onDesktopAgentAquired\n    () =&gt; {\n      self.postMessage({ id: -1, result: { callback: 'onDesktopAgentReleased' } });\n    }, //onDesktopAgentReleased\n    () =&gt; {\n      self.postMessage({ id: -1, result: { callback: 'onDesktopAgentConnected' } });\n    }, //onDesktopAgentConnected\n    () =&gt; {\n      self.postMessage({ id: -1, result: { callback: 'onDesktopAgentDisconnected' } });\n    }, //onDesktopAgentDisconnected\n    () =&gt; {\n      self.postMessage({ id: -1, result: { callback: 'onDesktopAgentDeprovisioned' } });\n    }, //onDesktopAgentDeprovisioned\n    () =&gt; {\n      self.postMessage({ id: -1, result: { callback: 'onDesktopAgentProvisioned' } });\n    },\n  );\n\n  const onTokenExpired = () =&gt; {\n    self.postMessage({ id: -1, result: { callback: 'onTokenExpired' } });\n  };\n\n  if (method === 'constructor') {\n    syncStage = new SyncStage(userDelegate, connectivityDelegate, discoveryDelegate, desktopAgentDelegate, onTokenExpired);\n    syncStage.updateOnDesktopAgentReconnected(() =&gt; {\n      self.postMessage({ id: -1, result: { callback: 'onDesktopAgentReconnected' } });\n    });\n    self.postMessage({ id, result: 'SyncStage initialized in worker.' });\n  } else if (syncStage &amp;&amp; typeof syncStage[method] === 'function') {\n    Promise.resolve(syncStage[method](...args))\n      .then((result) =&gt; {\n        self.postMessage({ id, result });\n      })\n      .catch((error) =&gt; {\n        self.postMessage({ id, error: error.message });\n      });\n  }\n};\n</code></pre>"},{"location":"web/using-web-worker/#syncstageworkerwrapper","title":"SyncStageWorkerWrapper","text":"<p>In our implementation, we use the SyncStageWorkerWrapper class to manage the Web Worker. This class creates a new worker that runs the SyncStage class. It also provides methods to communicate with the worker and handle responses from it. The interface is compliant with the SyncStage class itself. It should be added as <code>SyncStageWorkerWrapper.js</code> to the application code:</p> <pre><code>class SyncStageWorkerWrapper {\n  constructor(userDelegate, connectivityDelegate, discoveryDelegate, desktopAgentDelegate, onTokenExpired) {\n    console.log('SyncStageWorkerWrapper constructor');\n\n    this.userDelegate = userDelegate;\n    this.connectivityDelegate = connectivityDelegate;\n    this.discoveryDelegate = discoveryDelegate;\n    this.desktopAgentDelegate = desktopAgentDelegate;\n    this.onTokenExpired = onTokenExpired;\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    this.onDesktopAgentReconnected = () =&gt; {};\n\n    this.worker = new Worker(new URL('worker.js', import.meta.url)); //NEW SYNTAX\n\n    this.worker.onmessage = async (event) =&gt; {\n      const { id, result, error } = event.data;\n\n      if (this.promises[id]) {\n        if (error) {\n          this.promises[id].reject(new Error(error));\n        } else {\n          this.promises[id].resolve(result);\n        }\n\n        delete this.promises[id];\n      } else {\n        switch (result.callback) {\n          case 'onUserJoined':\n            this.userDelegate?.userJoined(result.data);\n            break;\n          case 'onUserLeft':\n            this.userDelegate?.userLeft(result.data);\n            break;\n          case 'onUserMuted':\n            this.userDelegate?.userMuted(result.data);\n            break;\n          case 'onUserUnmuted':\n            this.userDelegate?.userUnmuted(result.data);\n            break;\n          case 'onRecordingStarted':\n            this.userDelegate?.sessionRecordingStarted();\n            break;\n          case 'onRecordingStopped':\n            this.userDelegate?.sessionRecordingStopped();\n            break;\n          case 'onSessionOut':\n            this.userDelegate?.sessionOut();\n            break;\n          case 'onTransmitterConnectivityChanged':\n            this.connectivityDelegate?.transmitterConnectivityChanged(result.data);\n            break;\n          case 'onReceiverConnectivityChanged':\n            this.connectivityDelegate?.receiverConnectivityChanged(result.data.identifier, result.data.connected);\n            break;\n          case 'onDiscoveryResults':\n            this.discoveryDelegate?.discoveryResults(result.data);\n            break;\n          case 'onDiscoveryLatencyTestResults':\n            this.discoveryDelegate?.discoveryLatencyTestResults(result.data);\n            break;\n          case 'onServerSelected':\n            this.discoveryDelegate?.serverSelected(result.data);\n            break;\n          case 'onDesktopAgentAquired':\n            this.desktopAgentDelegate?.onDesktopAgentAquired();\n            break;\n          case 'onDesktopAgentReleased':\n            this.desktopAgentDelegate?.onDesktopAgentReleased();\n            break;\n          case 'onDesktopAgentConnected':\n            this.desktopAgentDelegate?.onDesktopAgentConnected();\n            break;\n          case 'onDesktopAgentDisconnected':\n            this.desktopAgentDelegate?.onDesktopAgentDisconnected();\n            break;\n          case 'onDesktopAgentDeprovisioned':\n            this.desktopAgentDelegate?.onDesktopAgentDeprovisioned();\n            break;\n          case 'onDesktopAgentProvisioned':\n            this.desktopAgentDelegate?.onDesktopAgentProvisioned();\n            break;\n          case 'onTokenExpired':\n            try {\n              if (typeof this.onTokenExpired === 'function') {\n                const jwt = await this.onTokenExpired();\n                this.updateToken(jwt);\n              } else {\n                console.error('onTokenExpired is not a function');\n              }\n            } catch (error) {\n              console.error('An error occurred in onTokenExpired or updateToken:', error);\n            }\n            break;\n          case 'onDesktopAgentReconnected':\n            this.onDesktopAgentReconnected();\n            break;\n          default:\n            console.log(`No implementation for callback ${result.callback}`);\n            break;\n        }\n      }\n    };\n\n    this.promises = {};\n    this.nextId = 0;\n\n    this.callWorker('constructor');\n  }\n\n  callWorker(method, ...args) {\n    return new Promise((resolve, reject) =&gt; {\n      const id = this.nextId++;\n      this.promises[id] = { resolve, reject, method };\n      this.worker.postMessage({ id, method, args });\n    });\n  }\n\n  updateOnDesktopAgentReconnected(onDesktopAgentReconnected) {\n    this.onDesktopAgentReconnected = onDesktopAgentReconnected;\n  }\n\n  isCompatible() {\n    let os;\n\n    if (window.navigator.userAgent.indexOf('Mac') !== -1) {\n      os = 'macOS';\n    } else if (window.navigator.userAgent.indexOf('Win') !== -1) {\n      os = 'Windows';\n    }\n\n    return this.callWorker('isCompatible', os);\n  }\n\n  getLatestCompatibleDesktopAgentVersion() {\n    let os;\n\n    if (window.navigator.userAgent.indexOf('Mac') !== -1) {\n      os = 'macOS';\n    } else if (window.navigator.userAgent.indexOf('Win') !== -1) {\n      os = 'Windows';\n    }\n\n    return this.callWorker('getLatestCompatibleDesktopAgentVersion', os);\n  }\n\n  init(jwt) {\n    return this.callWorker('init', jwt);\n  }\n\n  async updateToken(token) {\n    console.log('SyncStageWorkerWrapper updateToken');\n    return this.callWorker('updateToken', token);\n  }\n\n  isDesktopAgentConnected() {\n    return this.callWorker('isDesktopAgentConnected');\n  }\n\n  getSDKVersion() {\n    return this.callWorker('getSDKVersion');\n  }\n\n  getServerInstances() {\n    return this.callWorker('getServerInstances');\n  }\n\n  createSession(userId, zoneId, studioServerId) {\n    return this.callWorker('createSession', userId, zoneId, studioServerId);\n  }\n\n  join(sessionCode, userId, displayName, zoneId, studioServerId) {\n    return this.callWorker('join', sessionCode, userId, displayName, zoneId, studioServerId);\n  }\n\n  leave() {\n    return this.callWorker('leave');\n  }\n\n  session() {\n    return this.callWorker('session');\n  }\n\n  changeReceiverVolume(identifier, volume) {\n    return this.callWorker('changeReceiverVolume', identifier, volume);\n  }\n\n  getReceiverVolume(identifier) {\n    return this.callWorker('getReceiverVolume', identifier);\n  }\n\n  toggleMicrophone(mute) {\n    return this.callWorker('toggleMicrophone', mute);\n  }\n\n  isMicrophoneMuted() {\n    return this.callWorker('isMicrophoneMuted');\n  }\n\n  getReceiverMeasurements(identifier) {\n    return this.callWorker('getReceiverMeasurements', identifier);\n  }\n\n  getTransmitterMeasurements() {\n    return this.callWorker('getTransmitterMeasurements');\n  }\n\n  getDesktopAgentProtocolHandler() {\n    return this.callWorker('getDesktopAgentProtocolHandler');\n  }\n\n  getSelectedServer() {\n    return this.callWorker('getSelectedServer');\n  }\n\n  getBestAvailableServer() {\n    return this.callWorker('getBestAvailableServer');\n  }\n\n  startRecording() {\n    return this.callWorker('startRecording');\n  }\n\n  stopRecording() {\n    return this.callWorker('stopRecording');\n  }\n  checkProvisionedStatus() {\n    return this.callWorker('checkProvisionedStatus');\n  }\n\n  getSessionSettings() {\n    return this.callWorker('getSessionSettings');\n  }\n\n  setInputDevice(identifier) {\n    return this.callWorker('setInputDevice', identifier);\n  }\n\n  setOutputDevice(identifier) {\n    return this.callWorker('setOutputDevice', identifier);\n  }\n\n  setNoiseCancellation(enabled) {\n    return this.callWorker('setNoiseCancellation', enabled);\n  }\n\n  setDisableGain(disabled) {\n    return this.callWorker('setDisableGain', disabled);\n  }\n\n  setDirectMonitor(enabled) {\n    return this.callWorker('setDirectMonitor', enabled);\n  }\n\n  setLatencyOptimizationLevel(level) {\n    return this.callWorker('setLatencyOptimizationLevel', level);\n  }\n}\n\nexport default SyncStageWorkerWrapper;\n</code></pre> <p>The SyncStageWorkerWrapper class ensures that the SyncStage class and its WebSocket connection continue to run smoothly, providing a seamless user experience.</p>"},{"location":"web/using-web-worker/#configuring-web-workers-in-reactjs","title":"Configuring Web Workers in React.js","text":"<p>To use Web Workers in a React.js project, you need to configure your project in a specific way. </p> <p>Here are the steps:</p> <ol> <li> <p>Create a Worker File: Create a new JavaScript file (<code>worker.js</code>). This file will contain the code that the worker will execute.</p> </li> <li> <p>Instantiate the Worker: In your React component, instantiate the worker using the Worker constructor, passing the path to your worker file as an argument (we do it in <code>SyncStageWorkerWrapper.js</code>).</p> </li> <li> <p>Communicate with the Worker: Use the <code>postMessage</code> method to send data to the worker. The worker can send data back to the main thread using its own <code>postMessage</code> method. To receive messages from the worker, add an event listener for the message event to the worker instance (we do it in (<code>SyncStageWorkerWrapper.js</code>).</p> </li> <li> <p>Configure Webpack (if used): If your project uses Webpack, you may need to add a loader to handle worker files. The <code>worker-loader</code> package is a popular choice. Install it with npm <code>npm install --save-dev worker-loader</code>, and add a rule to your Webpack configuration as <code>config-overrides.js</code> file in the root directory:</p> </li> </ol> <pre><code>//config-overrides.js\n\nmodule.exports = function override(config, env) {\n  config.output.globalObject = 'this';\n  config.module.rules.push({\n    test: /\\.worker\\.js$/,\n    use: [{ loader: 'worker-loader' }],\n  });\n  return config;\n};\n</code></pre>"},{"location":"web/versions/0.1.0/sdk-delegates/","title":"Delegates","text":"<p>SyncStage class provide four delegates:</p> <ul> <li><code>ISyncStageUserDelegate</code></li> <li><code>ISyncStageConnectivityDelegate</code></li> <li><code>ISyncStageDiscoveryDelegate</code></li> <li><code>ISyncStageDesktopAgentDelegate</code></li> </ul> <p>which provide a set of callbacks to inform your application about asynchronous events from the SyncStage. </p> <p>You can define those object and provide to the SyncStage constructor or update public SyncStage properties <code>userDelegate</code>, <code>connectivityDelegate</code>, <code>discoveryDelegate</code>, and <code>desktopAgentDelegate</code> anytime.</p>"},{"location":"web/versions/0.1.0/sdk-delegates/#syncstageuserdelegate","title":"SyncStageUserDelegate","text":"<p>Responsible for getting callbacks about users' state in the session.</p> <pre><code>interface ISyncStageUserDelegate {\n  userJoined(connection: IConnection): void;\n  userLeft(identifier: string): void;\n  userMuted(identifier: string): void;\n  userUnmuted(identifier: string): void;\n  sessionOut(): void;\n}\n</code></pre>"},{"location":"web/versions/0.1.0/sdk-delegates/#syncstageconnectivitydelegate","title":"SyncStageConnectivityDelegate","text":"<p>Responsible for getting callbacks about users' connectivity in the session.</p> <pre><code>interface ISyncStageConnectivityDelegate {\n  transmitterConnectivityChanged(connected: boolean): void;\n  receiverConnectivityChanged(identifier: string, connected: boolean): void;\n  desktopAgentReconnected(): void;\n}\n</code></pre> <p><code>transmitterConnectivityChanged</code> and <code>receiverConnectivityChanged</code> can be used to update connectivity indicator of particular connections. The <code>desktopAgentReconnected</code> callback is suggested to be used to trigger rebuild of the session state in the application (during the disconnection, new connections might be added or removed to the session which result in the ui state inconsistency).</p>"},{"location":"web/versions/0.1.0/sdk-delegates/#syncstagediscoverydelegate","title":"SyncStageDiscoveryDelegate","text":"<p>Responsible for getting callbacks about available zones latency.</p> <pre><code>interface ISyncStageDiscoveryDelegate {\n  discoveryResults(zones: string[]): void;\n  discoveryLatencyTestResults(results: IZoneLatency[]): void;\n}\n</code></pre>"},{"location":"web/versions/0.1.0/sdk-delegates/#syncstagedesktopagentdelegate","title":"SyncStageDesktopAgentDelegate","text":"<p>Responsible for getting callbacks with information if SyncStage Desktop Agent is already acquired by some other browser tab to prevent parallel access.</p> <pre><code>interface ISyncStageDesktopAgentDelegate {\n  desktopAgentAquired(): void;\n  desktopAgentReleased(): void;\n}\n</code></pre>"},{"location":"web/versions/0.1.0/sdk-error-codes/","title":"Error codes","text":"<p>Most of the SDK methods return SyncStageSDKErrorCode which can be decoded using following enum class.</p> <pre><code>enum SyncStageSDKErrorCode {\n  'SYNCSTAGE_OPENED_IN_ANOTHER_TAB' = -1001,\n  'API_UNAUTHORIZED' = -1000,\n  'DESKTOP_AGENT_COMMUNICATION_ERROR' = -10,\n  'UNKNOWN_ERROR' = -1,\n  'OK' = 0,\n  'CONFIGURATION_ERROR' = 1,\n  'API_ERROR' = 2,\n  'STREAM_DOES_NOT_EXIST' = 3,\n  'BAD_VOLUME_VALUE' = 4,\n  'NO_ZONE_AVAILABLE' = 5,\n  'NO_STUDIO_SERVER_AVAILABLE' = 6,\n}\n</code></pre>"},{"location":"web/versions/0.1.0/sdk-methods/","title":"Methods","text":""},{"location":"web/versions/0.1.0/sdk-methods/#constructor","title":"Constructor","text":"<pre><code>class SyncStage implements ISyncStage{\n    constructor(\n        userDelegate: ISyncStageUserDelegate | null,\n        connectivityDelegate: ISyncStageConnectivityDelegate | null,\n        desktopAgentDelegate: ISyncStageDesktopAgentDelegate | null,\n        desktopAgentPort: number = 18080,\n    );\n}\n</code></pre> <p>Constructor parameters:</p> <ul> <li> <p><code>userDelegate</code> - delegate object to receive events about users in session state</p> </li> <li> <p><code>connectivityDelegate</code> - delegate object to receive events with information about stream connection to Studio Server state</p> </li> <li> <p><code>desktopAgentDelegate</code> - delegate object to receive events with information of desktop agent acquisition and release to prevent users from using SyncStage in multiple browser tabs at once</p> </li> <li> <p><code>desktopAgentPort</code> - port for communication with local desktop agent, 18080 by default</p> </li> </ul>"},{"location":"web/versions/0.1.0/sdk-methods/#initialize","title":"Initialize","text":"<p>Initializes the SDK SyncStage object.</p> <pre><code>async init(\n        applicationSecretId: string,\n        applicationSecretKey: string\n    ): Promise&lt;SyncStageSDKErrorCode&gt;\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>applicationSecretKey</code> - secret for SDK provisioning</p> </li> <li> <p><code>applicationSecretId</code> - id of secret for SDK provisioning</p> </li> </ul>"},{"location":"web/versions/0.1.0/sdk-methods/#get-is-desktop-agent-connected","title":"Get is desktop agent connected","text":"<p>Checks if desktop agent is running and available on the localhost.</p> <pre><code>isDesktopAgentConnected(): boolean\n</code></pre>"},{"location":"web/versions/0.1.0/sdk-methods/#get-sdk-version","title":"Get SDK version","text":"<p>Gets SDK version.</p> <pre><code>getSDKVersion(): string\n</code></pre>"},{"location":"web/versions/0.1.0/sdk-methods/#update-desktop-agent-reconnected-callback","title":"Update Desktop Agent reconnected callback","text":"<pre><code>public updateOnDesktopAgentReconnected(onDesktopAgentReconnected: () =&gt; void): void\n</code></pre> <p>Parameters:</p> <ul> <li><code>onDesktopAgentReconnected</code> - method to be called when the Desktop Agent reconnect to the browser SDK. In this metod session state should be refetched and synchronized on the UI.</li> </ul>"},{"location":"web/versions/0.1.0/sdk-methods/#get-best-available-server","title":"Get best available server","text":"<p>Get best available server, where a session can be created</p> <pre><code>async getBestAvailableServer(): Promise&lt;[IServerInstance | null, SyncStageSDKErrorCode]&gt;\n</code></pre>"},{"location":"web/versions/0.1.0/sdk-methods/#get-server-instances","title":"Get server instances","text":"<p>Get server instances so you can select the server that is suitable for your session.</p> <pre><code>  async getServerInstances(): Promise&lt;[IServerInstances | null, SyncStageSDKErrorCode]&gt;\n</code></pre>"},{"location":"web/versions/0.1.0/sdk-methods/#create-a-session","title":"Create a session","text":"<p>Creates a session in a given zone by a given user from your user pool.</p> <pre><code>async createSession(\n    zoneId: string,\n    studioServerId: string,\n    userId: string\n): Promise&lt;[ISessionIdentifier | null, SyncStageSDKErrorCode]&gt;\n</code></pre> <p>Parameters:</p> <ul> <li><code>zoneId</code> - zone in which your session is hosted</li> <li><code>studioServerId</code> - studio server where you are running your session</li> <li><code>userId</code> - id of your app user to match the data between SyncStage and your backend</li> </ul>"},{"location":"web/versions/0.1.0/sdk-methods/#join-the-session","title":"Join the session","text":"<p>Joins a particular session identified by <code>sessionCode</code>.</p> <pre><code>async join(\n    sessionCode: string,\n    userId: string,\n    zoneId: string,\n    studioServerId: string,\n    displayName?: string | null,\n): Promise&lt;[ISession | null, SyncStageSDKErrorCode]&gt;\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>sessionCode</code> - the session code</p> </li> <li> <p><code>userId</code> - id of your app user to match de data between SyncStage and your backend</p> </li> <li> <p><code>zoneId</code> - zone in which your session is hosted</p> </li> <li> <p><code>studioServerId</code> - studio server where you are running your session</p> </li> <li> <p><code>displayName</code> - your app user display name</p> </li> </ul>"},{"location":"web/versions/0.1.0/sdk-methods/#get-session-state","title":"Get session state","text":"<p>Gets state of currently joined session.</p> <pre><code>async session(): Promise&lt;[ISession | null, SyncStageSDKErrorCode]&gt; \n</code></pre>"},{"location":"web/versions/0.1.0/sdk-methods/#leave-the-session","title":"Leave the session","text":"<p>Leaves currently joined session.</p> <pre><code>async leave(): Promise&lt;SyncStageSDKErrorCode&gt; \n</code></pre>"},{"location":"web/versions/0.1.0/sdk-methods/#mute-unmute-microphone","title":"Mute / unmute microphone","text":"<p>Enables or disables microphone stream.</p> <pre><code>async toggleMicrophone(mute: boolean): Promise&lt;SyncStageSDKErrorCode&gt;\n</code></pre> <p>Parameters:</p> <ul> <li><code>mute</code> - desired state of the mute option</li> </ul>"},{"location":"web/versions/0.1.0/sdk-methods/#is-muted","title":"Is muted","text":"<p>Returns state of microphone stream.</p> <pre><code>async isMicrophoneMuted(): Promise&lt;[boolean | null, SyncStageSDKErrorCode]&gt;\n</code></pre>"},{"location":"web/versions/0.1.0/sdk-methods/#get-receiver-network-measurements","title":"Get receiver network measurements","text":"<p>Returns Measurements object with network delay, jitter, and calculated network quality indicators.</p> <pre><code>async getReceiverMeasurements(identifier: string): Promise&lt;[IMeasurements | null, SyncStageSDKErrorCode]&gt;\n</code></pre> <p>Parameters:</p> <ul> <li><code>identifier</code> - receiver's identifier</li> </ul>"},{"location":"web/versions/0.1.0/sdk-methods/#get-transmitter-network-measurements","title":"Get transmitter network measurements","text":"<p>Returns Measurements object with network delay, jitter, and calculated network quality indicators.</p> <pre><code>async getTransmitterMeasurements(): Promise&lt;[IMeasurements | null, SyncStageSDKErrorCode]&gt;\n</code></pre>"},{"location":"web/versions/0.1.0/sdk-methods/#register-desktop-agent-reconnected-callback","title":"Register Desktop Agent Reconnected Callback","text":"<p>In case of reconnection UI application should be aware of this fact, to refetch the session state to keep it synchronized.</p> <pre><code>registerDesktopAgentReconnectedCallback(onWebsocketReconnected: () =&gt; void): void;\n</code></pre> <p>Parameters:</p> <ul> <li><code>onWebsocketReconnected</code> - callback</li> </ul>"},{"location":"web/versions/0.1.0/sdk-methods/#unregister-desktop-agent-reconnected-callback","title":"Unregister Desktop Agent Reconnected Callback","text":"<p>Remove the callback in the SyncStage.</p> <pre><code>unregisterDesktopAgentReconnectedCallback(): void;\n</code></pre>"},{"location":"web/versions/0.2.0/sdk-delegates/","title":"Delegates","text":"<p>SyncStage class provide four delegates:</p> <ul> <li><code>ISyncStageUserDelegate</code></li> <li><code>ISyncStageConnectivityDelegate</code></li> <li><code>ISyncStageDiscoveryDelegate</code></li> <li><code>ISyncStageDesktopAgentDelegate</code></li> </ul> <p>which provide a set of callbacks to inform your application about asynchronous events from the SyncStage. </p> <p>You can define those object and provide to the SyncStage constructor or update public SyncStage properties <code>userDelegate</code>, <code>connectivityDelegate</code>, <code>discoveryDelegate</code>, and <code>desktopAgentDelegate</code> anytime.</p>"},{"location":"web/versions/0.2.0/sdk-delegates/#syncstageuserdelegate","title":"SyncStageUserDelegate","text":"<p>Responsible for getting callbacks about users' state in the session.</p> <pre><code>interface ISyncStageUserDelegate {\n  userJoined(connection: IConnection): void;\n  userLeft(identifier: string): void;\n  userMuted(identifier: string): void;\n  userUnmuted(identifier: string): void;\n  sessionRecordingStarted(): void;\n  sessionRecordingStopped(): void;\n  sessionOut(): void;\n}\n</code></pre>"},{"location":"web/versions/0.2.0/sdk-delegates/#syncstageconnectivitydelegate","title":"SyncStageConnectivityDelegate","text":"<p>Responsible for getting callbacks about users' connectivity in the session.</p> <pre><code>interface ISyncStageConnectivityDelegate {\n  transmitterConnectivityChanged(connected: boolean): void;\n  receiverConnectivityChanged(identifier: string, connected: boolean): void;\n  desktopAgentReconnected(): void;\n}\n</code></pre> <p><code>transmitterConnectivityChanged</code> and <code>receiverConnectivityChanged</code> can be used to update connectivity indicator of particular connections. The <code>desktopAgentReconnected</code> callback is suggested to be used to trigger rebuild of the session state in the application (during the disconnection, new connections might be added or removed to the session which result in the ui state inconsistency).</p>"},{"location":"web/versions/0.2.0/sdk-delegates/#syncstagediscoverydelegate","title":"SyncStageDiscoveryDelegate","text":"<p>Responsible for getting callbacks about available zones latency.</p> <pre><code>interface ISyncStageDiscoveryDelegate {\n  discoveryResults(zones: string[]): void;\n  discoveryLatencyTestResults(results: IZoneLatency[]): void;\n}\n</code></pre>"},{"location":"web/versions/0.2.0/sdk-delegates/#syncstagedesktopagentdelegate","title":"SyncStageDesktopAgentDelegate","text":"<p>Responsible for getting callbacks with information if SyncStage Desktop Agent is already acquired by some other browser tab to prevent parallel access.</p> <pre><code>interface ISyncStageDesktopAgentDelegate {\n  desktopAgentAquired(): void;\n  desktopAgentReleased(): void;\n}\n</code></pre>"},{"location":"web/versions/0.2.0/sdk-error-codes/","title":"Error codes","text":"<p>Most of the SDK methods return SyncStageSDKErrorCode which can be decoded using following enum class.</p> <pre><code>enum SyncStageSDKErrorCode {\n  'SYNCSTAGE_OPENED_IN_ANOTHER_TAB' = -1001,\n  'API_UNAUTHORIZED' = -1000,\n  'DESKTOP_AGENT_COMMUNICATION_ERROR' = -10,\n  'UNKNOWN_ERROR' = -1,\n  'OK' = 0,\n  'CONFIGURATION_ERROR' = 1,\n  'API_ERROR' = 2,\n  'STREAM_DOES_NOT_EXIST' = 3,\n  'BAD_VOLUME_VALUE' = 4,\n  'NO_ZONE_AVAILABLE' = 5,\n  'NO_STUDIO_SERVER_AVAILABLE' = 6,\n}\n</code></pre>"},{"location":"web/versions/0.2.0/sdk-methods/","title":"Methods","text":""},{"location":"web/versions/0.2.0/sdk-methods/#constructor","title":"Constructor","text":"<pre><code>class SyncStage implements ISyncStage{\n    constructor(\n        userDelegate: ISyncStageUserDelegate | null,\n        connectivityDelegate: ISyncStageConnectivityDelegate | null,\n        desktopAgentDelegate: ISyncStageDesktopAgentDelegate | null,\n        desktopAgentPort: number = 18080,\n    );\n}\n</code></pre> <p>Constructor parameters:</p> <ul> <li> <p><code>userDelegate</code> - delegate object to receive events about users in session state</p> </li> <li> <p><code>connectivityDelegate</code> - delegate object to receive events with information about stream connection to Studio Server state</p> </li> <li> <p><code>desktopAgentDelegate</code> - delegate object to receive events with information of desktop agent acquisition and release to prevent users from using SyncStage in multiple browser tabs at once</p> </li> <li> <p><code>desktopAgentPort</code> - port for communication with local desktop agent, 18080 by default</p> </li> </ul>"},{"location":"web/versions/0.2.0/sdk-methods/#initialize","title":"Initialize","text":"<p>Initializes the SDK SyncStage object.</p> <pre><code>async init(\n        applicationSecretId: string,\n        applicationSecretKey: string\n    ): Promise&lt;SyncStageSDKErrorCode&gt;\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>applicationSecretKey</code> - secret for SDK provisioning</p> </li> <li> <p><code>applicationSecretId</code> - id of secret for SDK provisioning</p> </li> </ul>"},{"location":"web/versions/0.2.0/sdk-methods/#get-is-desktop-agent-connected","title":"Get is desktop agent connected","text":"<p>Checks if desktop agent is running and available on the localhost.</p> <pre><code>isDesktopAgentConnected(): boolean\n</code></pre>"},{"location":"web/versions/0.2.0/sdk-methods/#get-sdk-version","title":"Get SDK version","text":"<p>Gets SDK version.</p> <pre><code>getSDKVersion(): string\n</code></pre>"},{"location":"web/versions/0.2.0/sdk-methods/#update-desktop-agent-reconnected-callback","title":"Update Desktop Agent reconnected callback","text":"<pre><code>public updateOnDesktopAgentReconnected(onDesktopAgentReconnected: () =&gt; void): void\n</code></pre> <p>Parameters:</p> <ul> <li><code>onDesktopAgentReconnected</code> - method to be called when the Desktop Agent reconnect to the browser SDK. In this metod session state should be refetched and synchronized on the UI.</li> </ul>"},{"location":"web/versions/0.2.0/sdk-methods/#get-best-available-server","title":"Get best available server","text":"<p>Get best available server, where a session can be created</p> <pre><code>async getBestAvailableServer(): Promise&lt;[IServerInstance | null, SyncStageSDKErrorCode]&gt;\n</code></pre>"},{"location":"web/versions/0.2.0/sdk-methods/#get-server-instances","title":"Get server instances","text":"<p>Get server instances so you can select the server that is suitable for your session.</p> <pre><code>  async getServerInstances(): Promise&lt;[IServerInstances | null, SyncStageSDKErrorCode]&gt;\n</code></pre>"},{"location":"web/versions/0.2.0/sdk-methods/#create-a-session","title":"Create a session","text":"<p>Creates a session in a given zone by a given user from your user pool.</p> <pre><code>async createSession(\n    zoneId: string,\n    studioServerId: string,\n    userId: string\n): Promise&lt;[ISessionIdentifier | null, SyncStageSDKErrorCode]&gt;\n</code></pre> <p>Parameters:</p> <ul> <li><code>zoneId</code> - zone in which your session is hosted</li> <li><code>studioServerId</code> - studio server where you are running your session</li> <li><code>userId</code> - id of your app user to match the data between SyncStage and your backend</li> </ul>"},{"location":"web/versions/0.2.0/sdk-methods/#join-the-session","title":"Join the session","text":"<p>Joins a particular session identified by <code>sessionCode</code>.</p> <pre><code>async join(\n    sessionCode: string,\n    userId: string,\n    zoneId: string,\n    studioServerId: string,\n    displayName?: string | null,\n): Promise&lt;[ISession | null, SyncStageSDKErrorCode]&gt;\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>sessionCode</code> - the session code</p> </li> <li> <p><code>userId</code> - id of your app user to match de data between SyncStage and your backend</p> </li> <li> <p><code>zoneId</code> - zone in which your session is hosted</p> </li> <li> <p><code>studioServerId</code> - studio server where you are running your session</p> </li> <li> <p><code>displayName</code> - your app user display name</p> </li> </ul>"},{"location":"web/versions/0.2.0/sdk-methods/#get-session-state","title":"Get session state","text":"<p>Gets state of currently joined session.</p> <pre><code>async session(): Promise&lt;[ISession | null, SyncStageSDKErrorCode]&gt; \n</code></pre>"},{"location":"web/versions/0.2.0/sdk-methods/#leave-the-session","title":"Leave the session","text":"<p>Leaves currently joined session.</p> <pre><code>async leave(): Promise&lt;SyncStageSDKErrorCode&gt; \n</code></pre>"},{"location":"web/versions/0.2.0/sdk-methods/#mute-unmute-microphone","title":"Mute / unmute microphone","text":"<p>Enables or disables microphone stream.</p> <pre><code>async toggleMicrophone(mute: boolean): Promise&lt;SyncStageSDKErrorCode&gt;\n</code></pre> <p>Parameters:</p> <ul> <li><code>mute</code> - desired state of the mute option</li> </ul>"},{"location":"web/versions/0.2.0/sdk-methods/#is-muted","title":"Is muted","text":"<p>Returns state of microphone stream.</p> <pre><code>async isMicrophoneMuted(): Promise&lt;[boolean | null, SyncStageSDKErrorCode]&gt;\n</code></pre>"},{"location":"web/versions/0.2.0/sdk-methods/#get-receiver-network-measurements","title":"Get receiver network measurements","text":"<p>Returns Measurements object with network delay, jitter, and calculated network quality indicators.</p> <pre><code>async getReceiverMeasurements(identifier: string): Promise&lt;[IMeasurements | null, SyncStageSDKErrorCode]&gt;\n</code></pre> <p>Parameters:</p> <ul> <li><code>identifier</code> - receiver's identifier</li> </ul>"},{"location":"web/versions/0.2.0/sdk-methods/#get-transmitter-network-measurements","title":"Get transmitter network measurements","text":"<p>Returns Measurements object with network delay, jitter, and calculated network quality indicators.</p> <pre><code>async getTransmitterMeasurements(): Promise&lt;[IMeasurements | null, SyncStageSDKErrorCode]&gt;\n</code></pre>"},{"location":"web/versions/0.2.0/sdk-methods/#start-recording","title":"Start recording","text":"<pre><code>async startRecording(): Promise&lt;SyncStageSDKErrorCode&gt;\n</code></pre>"},{"location":"web/versions/0.2.0/sdk-methods/#stop-recording","title":"Stop recording","text":"<pre><code>async stopRecording(): Promise&lt;SyncStageSDKErrorCode&gt;\n</code></pre>"},{"location":"web/versions/0.2.0/sdk-methods/#register-desktop-agent-reconnected-callback","title":"Register Desktop Agent Reconnected Callback","text":"<p>In case of reconnection UI application should be aware of this fact, to refetch the session state to keep it synchronized.</p> <pre><code>registerDesktopAgentReconnectedCallback(onWebsocketReconnected: () =&gt; void): void;\n</code></pre> <p>Parameters:</p> <ul> <li><code>onWebsocketReconnected</code> - callback</li> </ul>"},{"location":"web/versions/0.2.0/sdk-methods/#unregister-desktop-agent-reconnected-callback","title":"Unregister Desktop Agent Reconnected Callback","text":"<p>Remove the callback in the SyncStage.</p> <pre><code>unregisterDesktopAgentReconnectedCallback(): void;\n</code></pre>"},{"location":"web/versions/0.3.0/sdk-delegates/","title":"Delegates","text":"<p>SyncStage class provide four delegates:</p> <ul> <li><code>ISyncStageUserDelegate</code></li> <li><code>ISyncStageConnectivityDelegate</code></li> <li><code>ISyncStageDiscoveryDelegate</code></li> <li><code>ISyncStageDesktopAgentDelegate</code></li> </ul> <p>which provide a set of callbacks to inform your application about asynchronous events from the SyncStage. </p> <p>You can define those object and provide to the SyncStage constructor or update public SyncStage properties <code>userDelegate</code>, <code>connectivityDelegate</code>, <code>discoveryDelegate</code>, and <code>desktopAgentDelegate</code> anytime.</p>"},{"location":"web/versions/0.3.0/sdk-delegates/#syncstageuserdelegate","title":"SyncStageUserDelegate","text":"<p>Responsible for getting callbacks about users' state in the session.</p> <pre><code>interface ISyncStageUserDelegate {\n  userJoined(connection: IConnection): void;\n  userLeft(identifier: string): void;\n  userMuted(identifier: string): void;\n  userUnmuted(identifier: string): void;\n  sessionRecordingStarted(): void;\n  sessionRecordingStopped(): void;\n  sessionOut(): void;\n}\n</code></pre>"},{"location":"web/versions/0.3.0/sdk-delegates/#syncstageconnectivitydelegate","title":"SyncStageConnectivityDelegate","text":"<p>Responsible for getting callbacks about users' connectivity in the session.</p> <pre><code>interface ISyncStageConnectivityDelegate {\n  transmitterConnectivityChanged(connected: boolean): void;\n  receiverConnectivityChanged(identifier: string, connected: boolean): void;\n  desktopAgentReconnected(): void;\n}\n</code></pre> <p><code>transmitterConnectivityChanged</code> and <code>receiverConnectivityChanged</code> can be used to update connectivity indicator of particular connections. The <code>desktopAgentReconnected</code> callback is suggested to be used to trigger rebuild of the session state in the application (during the disconnection, new connections might be added or removed to the session which result in the ui state inconsistency).</p>"},{"location":"web/versions/0.3.0/sdk-delegates/#syncstagediscoverydelegate","title":"SyncStageDiscoveryDelegate","text":"<p>Responsible for getting callbacks about available zones latency.</p> <pre><code>interface ISyncStageDiscoveryDelegate {\n  discoveryResults(zones: string[]): void;\n  discoveryLatencyTestResults(results: IZoneLatency[]): void;\n}\n</code></pre>"},{"location":"web/versions/0.3.0/sdk-delegates/#syncstagedesktopagentdelegate","title":"SyncStageDesktopAgentDelegate","text":"<p>Responsible for getting callbacks with information if SyncStage Desktop Agent is already acquired by some other browser tab to prevent parallel access.</p> <pre><code>interface ISyncStageDesktopAgentDelegate {\n  desktopAgentAquired(): void;\n  desktopAgentReleased(): void;\n}\n</code></pre>"},{"location":"web/versions/0.3.0/sdk-error-codes/","title":"Error codes","text":"<p>Most of the SDK methods return SyncStageSDKErrorCode which can be decoded using following enum class.</p> <pre><code>enum SyncStageSDKErrorCode {\n  'TOKEN_EXPIRED' = -1002,\n  'SYNCSTAGE_OPENED_IN_ANOTHER_TAB' = -1001,\n  'API_UNAUTHORIZED' = -1000,\n  'DESKTOP_AGENT_COMMUNICATION_ERROR' = -10,\n  'UNKNOWN_ERROR' = -1,\n  'OK' = 0,\n  'CONFIGURATION_ERROR' = 1,\n  'API_ERROR' = 2,\n  'STREAM_DOES_NOT_EXIST' = 3,\n  'BAD_VOLUME_VALUE' = 4,\n  'NO_ZONE_AVAILABLE' = 5,\n  'NO_STUDIO_SERVER_AVAILABLE' = 6,\n}\n</code></pre>"},{"location":"web/versions/0.3.0/sdk-methods/","title":"Methods","text":""},{"location":"web/versions/0.3.0/sdk-methods/#constructor","title":"Constructor","text":"<pre><code>class SyncStage implements ISyncStage{\n    constructor(\n        userDelegate: ISyncStageUserDelegate | null,\n        connectivityDelegate: ISyncStageConnectivityDelegate | null,\n        discoveryDelegate: ISyncStageDiscoveryDelegate | null,\n        desktopAgentDelegate: ISyncStageDesktopAgentDelegate | null,\n        onTokenExpired: (() =&gt; Promise&lt;string&gt;) | null,\n    );\n}\n</code></pre> <p>Constructor parameters:</p> <ul> <li> <p><code>userDelegate</code> - delegate object to receive events about users in session state</p> </li> <li> <p><code>discoveryDelegate</code> - delegate object responsible for getting callbacks about available zones latency.</p> </li> <li> <p><code>connectivityDelegate</code> - delegate object to receive events with information about stream connection to Studio Server state</p> </li> <li> <p><code>desktopAgentDelegate</code> - delegate object to receive events with information of desktop agent acquisition and release to prevent users from using SyncStage in multiple browser tabs at once</p> </li> <li> <p><code>onTokenExpired</code> - callback to be called when <code>jwt</code> expires, callback should return new refetched <code>jwt</code></p> </li> </ul>"},{"location":"web/versions/0.3.0/sdk-methods/#initialize","title":"Initialize","text":"<p>Initializes the SDK SyncStage object.</p> <pre><code>async init(\n        jwt: string,\n    ): Promise&lt;SyncStageSDKErrorCode&gt;\n</code></pre> <p>Parameters:</p> <ul> <li><code>jwt</code> - token obtained in the provisioning process.</li> </ul>"},{"location":"web/versions/0.3.0/sdk-methods/#update-jwt","title":"Update JWT","text":"<p>You can update JWT anytime you want, even before expiration takes place.</p> <pre><code>async updateToken(jwt: string): Promise&lt;SyncStageSDKErrorCode&gt;\n</code></pre> <ul> <li><code>jwt</code> - token obtained in the provisioning process.</li> </ul>"},{"location":"web/versions/0.3.0/sdk-methods/#get-is-desktop-agent-connected","title":"Get is desktop agent connected","text":"<p>Checks if desktop agent is running and available on the localhost.</p> <pre><code>isDesktopAgentConnected(): boolean\n</code></pre>"},{"location":"web/versions/0.3.0/sdk-methods/#get-sdk-version","title":"Get SDK version","text":"<p>Gets SDK version.</p> <pre><code>getSDKVersion(): string\n</code></pre>"},{"location":"web/versions/0.3.0/sdk-methods/#update-desktop-agent-reconnected-callback","title":"Update Desktop Agent reconnected callback","text":"<pre><code>public updateOnDesktopAgentReconnected(onDesktopAgentReconnected: () =&gt; void): void\n</code></pre> <p>Parameters:</p> <ul> <li><code>onDesktopAgentReconnected</code> - method to be called when the Desktop Agent reconnect to the browser SDK. In this metod session state should be refetched and synchronized on the UI.</li> </ul>"},{"location":"web/versions/0.3.0/sdk-methods/#get-best-available-server","title":"Get best available server","text":"<p>Get best available server, where a session can be created</p> <pre><code>async getBestAvailableServer(): Promise&lt;[IServerInstance | null, SyncStageSDKErrorCode]&gt;\n</code></pre>"},{"location":"web/versions/0.3.0/sdk-methods/#get-server-instances","title":"Get server instances","text":"<p>Get server instances so you can select the server that is suitable for your session.</p> <pre><code>  async getServerInstances(): Promise&lt;[IServerInstances | null, SyncStageSDKErrorCode]&gt;\n</code></pre>"},{"location":"web/versions/0.3.0/sdk-methods/#create-a-session","title":"Create a session","text":"<p>Creates a session in a given zone by a given user from your user pool.</p> <pre><code>async createSession(\n    zoneId: string,\n    studioServerId: string,\n    userId: string\n): Promise&lt;[ISessionIdentifier | null, SyncStageSDKErrorCode]&gt;\n</code></pre> <p>Parameters:</p> <ul> <li><code>zoneId</code> - zone in which your session is hosted</li> <li><code>studioServerId</code> - studio server where you are running your session</li> <li><code>userId</code> - id of your app user to match the data between SyncStage and your backend</li> </ul>"},{"location":"web/versions/0.3.0/sdk-methods/#join-the-session","title":"Join the session","text":"<p>Joins a particular session identified by <code>sessionCode</code>.</p> <pre><code>async join(\n    sessionCode: string,\n    userId: string,\n    zoneId: string,\n    studioServerId: string,\n    displayName?: string | null,\n): Promise&lt;[ISession | null, SyncStageSDKErrorCode]&gt;\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>sessionCode</code> - the session code</p> </li> <li> <p><code>userId</code> - id of your app user to match de data between SyncStage and your backend</p> </li> <li> <p><code>zoneId</code> - zone in which your session is hosted</p> </li> <li> <p><code>studioServerId</code> - studio server where you are running your session</p> </li> <li> <p><code>displayName</code> - your app user display name</p> </li> </ul>"},{"location":"web/versions/0.3.0/sdk-methods/#get-session-state","title":"Get session state","text":"<p>Gets state of currently joined session.</p> <pre><code>async session(): Promise&lt;[ISession | null, SyncStageSDKErrorCode]&gt; \n</code></pre>"},{"location":"web/versions/0.3.0/sdk-methods/#leave-the-session","title":"Leave the session","text":"<p>Leaves currently joined session.</p> <pre><code>async leave(): Promise&lt;SyncStageSDKErrorCode&gt; \n</code></pre>"},{"location":"web/versions/0.3.0/sdk-methods/#mute-unmute-microphone","title":"Mute / unmute microphone","text":"<p>Enables or disables microphone stream.</p> <pre><code>async toggleMicrophone(mute: boolean): Promise&lt;SyncStageSDKErrorCode&gt;\n</code></pre> <p>Parameters:</p> <ul> <li><code>mute</code> - desired state of the mute option</li> </ul>"},{"location":"web/versions/0.3.0/sdk-methods/#is-muted","title":"Is muted","text":"<p>Returns state of microphone stream.</p> <pre><code>async isMicrophoneMuted(): Promise&lt;[boolean | null, SyncStageSDKErrorCode]&gt;\n</code></pre>"},{"location":"web/versions/0.3.0/sdk-methods/#get-receiver-network-measurements","title":"Get receiver network measurements","text":"<p>Returns Measurements object with network delay, jitter, and calculated network quality indicators.</p> <pre><code>async getReceiverMeasurements(identifier: string): Promise&lt;[IMeasurements | null, SyncStageSDKErrorCode]&gt;\n</code></pre> <p>Parameters:</p> <ul> <li><code>identifier</code> - receiver's identifier</li> </ul>"},{"location":"web/versions/0.3.0/sdk-methods/#get-transmitter-network-measurements","title":"Get transmitter network measurements","text":"<p>Returns Measurements object with network delay, jitter, and calculated network quality indicators.</p> <pre><code>async getTransmitterMeasurements(): Promise&lt;[IMeasurements | null, SyncStageSDKErrorCode]&gt;\n</code></pre>"},{"location":"web/versions/0.3.0/sdk-methods/#start-recording","title":"Start recording","text":"<pre><code>async startRecording(): Promise&lt;SyncStageSDKErrorCode&gt;\n</code></pre>"},{"location":"web/versions/0.3.0/sdk-methods/#stop-recording","title":"Stop recording","text":"<pre><code>async stopRecording(): Promise&lt;SyncStageSDKErrorCode&gt;\n</code></pre>"},{"location":"web/versions/0.3.0/sdk-methods/#register-desktop-agent-reconnected-callback","title":"Register Desktop Agent Reconnected Callback","text":"<p>In case of reconnection UI application should be aware of this fact, to refetch the session state to keep it synchronized.</p> <pre><code>registerDesktopAgentReconnectedCallback(onWebsocketReconnected: () =&gt; void): void;\n</code></pre> <p>Parameters:</p> <ul> <li><code>onWebsocketReconnected</code> - callback</li> </ul>"},{"location":"web/versions/0.3.0/sdk-methods/#unregister-desktop-agent-reconnected-callback","title":"Unregister Desktop Agent Reconnected Callback","text":"<p>Remove the callback in the SyncStage.</p> <pre><code>unregisterDesktopAgentReconnectedCallback(): void;\n</code></pre>"},{"location":"web/versions/0.3.0/sdk-methods/#get-uri-for-opening-syncstage-agent-on-windows","title":"Get URI for opening SyncStage Agent on Windows","text":"<pre><code>getDesktopAgentProtocolHandler(): string;\n</code></pre>"},{"location":"web/versions/0.4.1/sdk-delegates/","title":"Delegates","text":"<p>SyncStage class provide four delegates:</p> <ul> <li><code>ISyncStageUserDelegate</code></li> <li><code>ISyncStageConnectivityDelegate</code></li> <li><code>ISyncStageDiscoveryDelegate</code></li> <li><code>ISyncStageDesktopAgentDelegate</code></li> </ul> <p>which provide a set of callbacks to inform your application about asynchronous events from the SyncStage. </p> <p>You can define those object and provide to the SyncStage constructor or update public SyncStage properties <code>userDelegate</code>, <code>connectivityDelegate</code>, <code>discoveryDelegate</code>, and <code>desktopAgentDelegate</code> anytime.</p>"},{"location":"web/versions/0.4.1/sdk-delegates/#syncstageuserdelegate","title":"SyncStageUserDelegate","text":"<p>Responsible for getting callbacks about users' state in the session.</p> <pre><code>interface ISyncStageUserDelegate {\n  userJoined(connection: IConnection): void;\n  userLeft(identifier: string): void;\n  userMuted(identifier: string): void;\n  userUnmuted(identifier: string): void;\n  sessionRecordingStarted(): void;\n  sessionRecordingStopped(): void;\n  sessionOut(): void;\n}\n</code></pre>"},{"location":"web/versions/0.4.1/sdk-delegates/#syncstageconnectivitydelegate","title":"SyncStageConnectivityDelegate","text":"<p>Responsible for getting callbacks about users' connectivity in the session.</p> <pre><code>interface ISyncStageConnectivityDelegate {\n  transmitterConnectivityChanged(connected: boolean): void;\n  receiverConnectivityChanged(identifier: string, connected: boolean): void;\n  desktopAgentReconnected(): void;\n}\n</code></pre> <p><code>transmitterConnectivityChanged</code> and <code>receiverConnectivityChanged</code> can be used to update connectivity indicator of particular connections. The <code>desktopAgentReconnected</code> callback is suggested to be used to trigger rebuild of the session state in the application (during the disconnection, new connections might be added or removed to the session which result in the ui state inconsistency).</p>"},{"location":"web/versions/0.4.1/sdk-delegates/#syncstagediscoverydelegate","title":"SyncStageDiscoveryDelegate","text":"<p>Responsible for getting callbacks about available zones latency.</p> <pre><code>interface ISyncStageDiscoveryDelegate {\n  discoveryResults(zones: string[]): void;\n  discoveryLatencyTestResults(results: IZoneLatency[]): void;\n}\n</code></pre>"},{"location":"web/versions/0.4.1/sdk-delegates/#syncstagedesktopagentdelegate","title":"SyncStageDesktopAgentDelegate","text":"<p>Responsible for getting callbacks with information if SyncStage Desktop Agent is already acquired by some other browser tab to prevent paralell access, and general Desktop Agent connection events.</p> <pre><code>interface ISyncStageDesktopAgentDelegate {\n  desktopAgentAquired(): void;\n  desktopAgentReleased(): void;\n  desktopAgentConnected(): void;\n  desktopAgentDisconnected(): void;\n}\n</code></pre>"},{"location":"web/versions/0.4.1/sdk-error-codes/","title":"Error codes","text":"<p>Most of the SDK methods return SyncStageSDKErrorCode which can be decoded using following enum class.</p> <pre><code>enum SyncStageSDKErrorCode {\n  'TOKEN_EXPIRED' = -1002,\n  'SYNCSTAGE_OPENED_IN_ANOTHER_TAB' = -1001,\n  'API_UNAUTHORIZED' = -1000,\n  'DESKTOP_AGENT_COMMUNICATION_ERROR' = -10,\n  'UNKNOWN_ERROR' = -1,\n  'OK' = 0,\n  'CONFIGURATION_ERROR' = 1,\n  'API_ERROR' = 2,\n  'STREAM_DOES_NOT_EXIST' = 3,\n  'BAD_VOLUME_VALUE' = 4,\n  'NO_ZONE_AVAILABLE' = 5,\n  'NO_STUDIO_SERVER_AVAILABLE' = 6,\n  'NO_INPUT_DEVICE' = 7,\n}\n</code></pre>"},{"location":"web/versions/0.4.1/sdk-methods/","title":"Methods","text":""},{"location":"web/versions/0.4.1/sdk-methods/#constructor","title":"Constructor","text":"<pre><code>class SyncStage implements ISyncStage{\n    constructor(\n        userDelegate: ISyncStageUserDelegate | null,\n        connectivityDelegate: ISyncStageConnectivityDelegate | null,\n        discoveryDelegate: ISyncStageDiscoveryDelegate | null,\n        desktopAgentDelegate: ISyncStageDesktopAgentDelegate | null,\n        onTokenExpired: (() =&gt; Promise&lt;string&gt;) | null,\n    );\n}\n</code></pre> <p>Constructor parameters:</p> <ul> <li> <p><code>userDelegate</code> - delegate object to receive events about users in session state</p> </li> <li> <p><code>discoveryDelegate</code> - delegate object responsible for getting callbacks about available zones latency.</p> </li> <li> <p><code>connectivityDelegate</code> - delegate object to receive events with information about stream connection to Studio Server state</p> </li> <li> <p><code>desktopAgentDelegate</code> - delegate object to receive events with information of desktop agent acqusition and release to prevent users from using SyncStage in multiple browser tabs at once</p> </li> <li> <p><code>onTokenExpired</code> - callback to be called when <code>jwt</code> expires, callback should return new refetched <code>jwt</code></p> </li> </ul>"},{"location":"web/versions/0.4.1/sdk-methods/#initialize","title":"Initialize","text":"<p>Initializes the SDK SyncStage object.</p> <pre><code>async init(\n        jwt: string,\n    ): Promise&lt;SyncStageSDKErrorCode&gt;\n</code></pre> <p>Parameters:</p> <ul> <li><code>jwt</code> - token obtained in the provisioning process.</li> </ul>"},{"location":"web/versions/0.4.1/sdk-methods/#update-jwt","title":"Update JWT","text":"<p>You can update JWT anytime you want, even before expiration takes place.</p> <pre><code>async updateToken(jwt: string): Promise&lt;SyncStageSDKErrorCode&gt;\n</code></pre> <ul> <li><code>jwt</code> - token obtained in the provisioning process.</li> </ul>"},{"location":"web/versions/0.4.1/sdk-methods/#get-is-desktop-agent-connected","title":"Get is desktop agent connected","text":"<p>Checks if desktop agent is running and available on the localhost.</p> <pre><code>isDesktopAgentConnected(): boolean\n</code></pre>"},{"location":"web/versions/0.4.1/sdk-methods/#get-sdk-version","title":"Get SDK version","text":"<p>Gets SDK version.</p> <pre><code>getSDKVersion(): string\n</code></pre>"},{"location":"web/versions/0.4.1/sdk-methods/#update-sdk-to-syncstage-backend-connected-callback","title":"Update SDK to SyncStage backend connected callback","text":"<pre><code>public updateOnWebsocketReconnected(onWebsocketReconnected: () =&gt; void): void\n</code></pre> <p>Parameters:</p> <ul> <li><code>onWebsocketReconnected</code> - method to be called when the browser SDK reconencts to the SyncStage services. Session state should be refetched and synchronized on the UI in this callback.</li> </ul>"},{"location":"web/versions/0.4.1/sdk-methods/#get-best-available-server","title":"Get best available server","text":"<p>Get best available server, where a session can be created</p> <pre><code>async getBestAvailableServer(): Promise&lt;[IServerInstance | null, SyncStageSDKErrorCode]&gt;\n</code></pre>"},{"location":"web/versions/0.4.1/sdk-methods/#get-server-instances","title":"Get server instances","text":"<p>Get server instances so you can select the server that is suitable for your session.</p> <pre><code>  async getServerInstances(): Promise&lt;[IServerInstances | null, SyncStageSDKErrorCode]&gt;\n</code></pre>"},{"location":"web/versions/0.4.1/sdk-methods/#create-a-session","title":"Create a session","text":"<p>Creates a session in a given zone by a given user from your user pool.</p> <pre><code>async createSession(\n    zoneId: string,\n    studioServerId: string,\n    userId: string\n): Promise&lt;[ISessionIdentifier | null, SyncStageSDKErrorCode]&gt;\n</code></pre> <p>Parameters:</p> <ul> <li><code>zoneId</code> - zone in which your session is hosted</li> <li><code>studioServerId</code> - studio server where you are running your session</li> <li><code>userId</code> - id of your app user to match the data between SyncStage and your backend</li> </ul>"},{"location":"web/versions/0.4.1/sdk-methods/#join-the-session","title":"Join the session","text":"<p>Joins a particular session identified by <code>sessionCode</code>.</p> <pre><code>async join(\n    sessionCode: string,\n    userId: string,\n    zoneId: string,\n    studioServerId: string,\n    displayName?: string | null,\n): Promise&lt;[ISession | null, SyncStageSDKErrorCode]&gt;\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>sessionCode</code> - the session code</p> </li> <li> <p><code>userId</code> - id of your app user to match de data between SyncStage and your backend</p> </li> <li> <p><code>zoneId</code> - zone in which your session is hosted</p> </li> <li> <p><code>studioServerId</code> - studio server where you are running your session</p> </li> <li> <p><code>displayName</code> - your app user display name</p> </li> </ul>"},{"location":"web/versions/0.4.1/sdk-methods/#get-session-state","title":"Get session state","text":"<p>Gets state of currently joined session.</p> <pre><code>async session(): Promise&lt;[ISession | null, SyncStageSDKErrorCode]&gt; \n</code></pre>"},{"location":"web/versions/0.4.1/sdk-methods/#leave-the-session","title":"Leave the session","text":"<p>Leaves currently joined session.</p> <pre><code>async leave(): Promise&lt;SyncStageSDKErrorCode&gt; \n</code></pre>"},{"location":"web/versions/0.4.1/sdk-methods/#mute-unmute-microphone","title":"Mute / unmute microphone","text":"<p>Enables or disables microphone stream.</p> <pre><code>async toggleMicrophone(mute: boolean): Promise&lt;SyncStageSDKErrorCode&gt;\n</code></pre> <p>Parameters:</p> <ul> <li><code>mute</code> - desired state of the mute option</li> </ul>"},{"location":"web/versions/0.4.1/sdk-methods/#is-muted","title":"Is muted","text":"<p>Returns state of microphone stream.</p> <pre><code>async isMicrophoneMuted(): Promise&lt;[boolean | null, SyncStageSDKErrorCode]&gt;\n</code></pre>"},{"location":"web/versions/0.4.1/sdk-methods/#get-receiver-network-measurements","title":"Get receiver network measurements","text":"<p>Returns Mesurements object with network delay, jitter, and calculated network quality indicators.</p> <pre><code>async getReceiverMeasurements(identifier: string): Promise&lt;[IMeasurements | null, SyncStageSDKErrorCode]&gt;\n</code></pre> <p>Parameters:</p> <ul> <li><code>identifier</code> - receiver's identifier</li> </ul>"},{"location":"web/versions/0.4.1/sdk-methods/#get-transmitter-network-measurements","title":"Get transmitter network measurements","text":"<p>Returns Mesurements object with network delay, jitter, and calculated network quality indicators.</p> <pre><code>async getTransmitterMeasurements(): Promise&lt;[IMeasurements | null, SyncStageSDKErrorCode]&gt;\n</code></pre>"},{"location":"web/versions/0.4.1/sdk-methods/#start-recording","title":"Start recording","text":"<pre><code>async startRecording(): Promise&lt;SyncStageSDKErrorCode&gt;\n</code></pre>"},{"location":"web/versions/0.4.1/sdk-methods/#stop-recording","title":"Stop recording","text":"<pre><code>async stopRecording(): Promise&lt;SyncStageSDKErrorCode&gt;\n</code></pre>"},{"location":"web/versions/0.4.1/sdk-methods/#register-desktop-agent-reconnected-callback","title":"Register Desktop Agent Reconnected Callback","text":"<p>In case of reconnection UI application should be aware of this fact, to refetch the session state to keep it synchronized.</p> <pre><code>registerDesktopAgentReconnectedCallback(onWebsocketReconnected: () =&gt; void): void;\n</code></pre> <p>Parameters:</p> <ul> <li><code>onWebsocketReconnected</code> - callback</li> </ul>"},{"location":"web/versions/0.4.1/sdk-methods/#unregister-desktop-agent-reconnected-callback","title":"Unregister Desktop Agent Reconnected Callback","text":"<p>Remove the callback in the SyncStage.</p> <pre><code>unregisterDesktopAgentReconnectedCallback(): void;\n</code></pre>"},{"location":"web/versions/0.4.1/sdk-methods/#get-uri-for-opening-syncstage-agent-on-windows","title":"Get URI for opening SyncStage Agent on Windows","text":"<pre><code>getDesktopAgentProtocolHandler(): string;\n</code></pre>"},{"location":"web/versions/0.4.2/sdk-data-interfaces/","title":"Data interfaces","text":""},{"location":"web/versions/0.4.2/sdk-data-interfaces/#syncstage-data-interfaces","title":"SyncStage data interfaces","text":"<pre><code>interface IHostInfo {\n  port: number;\n  address: string;\n  audioServerId: string;\n  streamingUrl: string;\n}\n</code></pre> <pre><code>interface IConnectionInfo {\n  connectionId: string;\n  createdAt: string;\n  updatedAt: string;\n  userId: string;\n  isMuted: boolean;\n  displayName?: string | null;\n  hostInfo?: IHostInfo | null;\n\n  connection(): Connection;\n}\n</code></pre> <pre><code>interface ILatencyOptimizationLevel {\n  level: number;\n}\n</code></pre> <pre><code>interface IMeasurements {\n  networkDelayMs: number;\n  networkJitterMs: number;\n  quality: number;\n}\n</code></pre> <pre><code>interface IServerInstance {\n  zoneId: string;\n  zoneName: string;\n  studioServerId: string;\n}\n</code></pre> <pre><code>interface ISessionIdentifier {\n  sessionId: string;\n  sessionCode: string;\n  createdAt: string;\n}\n</code></pre> <pre><code>interface ISession {\n  sessionId: string;\n  sessionCode: string | null;\n  createdAt: string;\n  updatedAt: string;\n  transmitter?: IConnection | null;\n  receivers: Array&lt;IConnection&gt;;\n  isRecording: boolean;\n}\n</code></pre> <pre><code>interface IConnection {\n  identifier: string;\n  userId: string;\n  displayName?: string | null;\n  isMuted: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n</code></pre> <pre><code>interface ISessionInfo {\n  sessionId: string;\n  sessionCode: string | null;\n  sessionStatus: string;\n  serverIsReady: boolean;\n  websocketUrl: string;\n  transmitter?: IConnectionInfo | null;\n  receivers: Array&lt;IConnectionInfo&gt;;\n  createdAt: string;\n  updatedAt: string;\n  recordingStatus: string;\n}\n</code></pre> <pre><code>export interface IZoneLatency {\n  name: string;\n  latency: string;\n}\n</code></pre>"},{"location":"web/versions/0.4.2/sdk-delegates/","title":"Delegates","text":"<p>SyncStage class provide four delegates:</p> <ul> <li><code>ISyncStageUserDelegate</code></li> <li><code>ISyncStageConnectivityDelegate</code></li> <li><code>ISyncStageDiscoveryDelegate</code></li> <li><code>ISyncStageDesktopAgentDelegate</code></li> </ul> <p>which provide a set of callbacks to inform your application about asynchronous events from the SyncStage. </p> <p>You can define those object and provide to the SyncStage constructor or update public SyncStage properties <code>userDelegate</code>, <code>connectivityDelegate</code>, <code>discoveryDelegate</code>, and <code>desktopAgentDelegate</code> anytime.</p>"},{"location":"web/versions/0.4.2/sdk-delegates/#syncstageuserdelegate","title":"SyncStageUserDelegate","text":"<p>Responsible for getting callbacks about users' state in the session.</p> <pre><code>interface ISyncStageUserDelegate {\n  userJoined(connection: IConnection): void;\n  userLeft(identifier: string): void;\n  userMuted(identifier: string): void;\n  userUnmuted(identifier: string): void;\n  sessionRecordingStarted(): void;\n  sessionRecordingStopped(): void;\n  sessionOut(): void;\n}\n</code></pre>"},{"location":"web/versions/0.4.2/sdk-delegates/#syncstageconnectivitydelegate","title":"SyncStageConnectivityDelegate","text":"<p>Responsible for getting callbacks about users' connectivity in the session.</p> <pre><code>interface ISyncStageConnectivityDelegate {\n  transmitterConnectivityChanged(connected: boolean): void;\n  receiverConnectivityChanged(identifier: string, connected: boolean): void;\n  desktopAgentReconnected(): void;\n}\n</code></pre> <p><code>transmitterConnectivityChanged</code> and <code>receiverConnectivityChanged</code> can be used to update connectivity indicator of particular connections. The <code>desktopAgentReconnected</code> callback is suggested to be used to trigger rebuild of the session state in the application (during the disconnection, new connections might be added or removed to the session which result in the ui state inconsistency).</p>"},{"location":"web/versions/0.4.2/sdk-delegates/#syncstagediscoverydelegate","title":"SyncStageDiscoveryDelegate","text":"<p>Responsible for getting callbacks about available zones latency.</p> <pre><code>interface ISyncStageDiscoveryDelegate {\n  discoveryResults(zones: string[]): void;\n  discoveryLatencyTestResults(results: IZoneLatency[]): void;\n}\n</code></pre>"},{"location":"web/versions/0.4.2/sdk-delegates/#syncstagedesktopagentdelegate","title":"SyncStageDesktopAgentDelegate","text":"<p>Responsible for getting callbacks with information if SyncStage Desktop Agent is already acquired by some other browser tab to prevent parallel access, and general Desktop Agent connection events.</p> <pre><code>interface ISyncStageDesktopAgentDelegate {\n  desktopAgentAquired(): void;\n  desktopAgentReleased(): void;\n  desktopAgentConnected(): void;\n  desktopAgentDisconnected(): void;\n  desktopAgentConnectionKeepAlive(): void; // Triggered every 5s informing that Desktop Agent is connected and alive\n  desktopAgentLostConnection(): void; // Reports unexpected connection loss or lack of keep alive\n}\n</code></pre>"},{"location":"web/versions/0.4.2/sdk-error-codes/","title":"Error codes","text":"<p>Most of the SDK methods return SyncStageSDKErrorCode which can be decoded using following enum class.</p> <pre><code>enum SyncStageSDKErrorCode {\n  'TOKEN_EXPIRED' = -2002,\n  'SYNCSTAGE_OPENED_IN_ANOTHER_TAB' = -2001,\n  'NOT_IN_SESSION' = -1001,\n  'API_UNAUTHORIZED' = -1000,\n  'SYNCSTAGE_SERVICE_COMMUNICATION_ERROR' = -11,\n  'TIMEOUT_ERROR' = -10,\n  'UNKNOWN_ERROR' = -1,\n  'OK' = 0,\n  'CONFIGURATION_ERROR' = 1,\n  'API_ERROR' = 2,\n  'STREAM_DOES_NOT_EXIST' = 3,\n  'BAD_VOLUME_VALUE' = 4,\n  'NO_ZONE_AVAILABLE' = 5,\n  'NO_STUDIO_SERVER_AVAILABLE' = 6,\n  'NO_INPUT_DEVICE' = 7,\n}\n</code></pre>"},{"location":"web/versions/0.4.2/sdk-methods/","title":"Methods","text":""},{"location":"web/versions/0.4.2/sdk-methods/#constructor","title":"Constructor","text":"<pre><code>class SyncStage implements ISyncStage{\n    constructor(\n        userDelegate: ISyncStageUserDelegate | null,\n        connectivityDelegate: ISyncStageConnectivityDelegate | null,\n        discoveryDelegate: ISyncStageDiscoveryDelegate | null,\n        desktopAgentDelegate: ISyncStageDesktopAgentDelegate | null,\n        onTokenExpired: (() =&gt; Promise&lt;string&gt;) | null,\n    );\n}\n</code></pre> <p>Constructor parameters:</p> <ul> <li> <p><code>userDelegate</code> - delegate object to receive events about users in session state</p> </li> <li> <p><code>discoveryDelegate</code> - delegate object responsible for getting callbacks about available zones latency.</p> </li> <li> <p><code>connectivityDelegate</code> - delegate object to receive events with information about stream connection to Studio Server state</p> </li> <li> <p><code>desktopAgentDelegate</code> - delegate object to receive events with information of desktop agent acquisition and release to prevent users from using SyncStage in multiple browser tabs at once</p> </li> <li> <p><code>onTokenExpired</code> - callback to be called when <code>jwt</code> expires, callback should return new refetched <code>jwt</code></p> </li> </ul>"},{"location":"web/versions/0.4.2/sdk-methods/#initialize","title":"Initialize","text":"<p>Initializes the SDK SyncStage object.</p> <pre><code>async init(\n        jwt: string,\n    ): Promise&lt;SyncStageSDKErrorCode&gt;\n</code></pre> <p>Parameters:</p> <ul> <li><code>jwt</code> - token obtained in the provisioning process.</li> </ul>"},{"location":"web/versions/0.4.2/sdk-methods/#update-jwt","title":"Update JWT","text":"<p>You can update JWT anytime you want, even before expiration takes place.</p> <pre><code>async updateToken(jwt: string): Promise&lt;SyncStageSDKErrorCode&gt;\n</code></pre> <ul> <li><code>jwt</code> - token obtained in the provisioning process.</li> </ul>"},{"location":"web/versions/0.4.2/sdk-methods/#get-is-desktop-agent-connected","title":"Get is desktop agent connected","text":"<p>Checks if desktop agent is running and available on the localhost.</p> <pre><code>isDesktopAgentConnected(): boolean\n</code></pre>"},{"location":"web/versions/0.4.2/sdk-methods/#get-sdk-version","title":"Get SDK version","text":"<p>Gets SDK version.</p> <pre><code>getSDKVersion(): string\n</code></pre>"},{"location":"web/versions/0.4.2/sdk-methods/#update-sdk-to-syncstage-backend-connected-callback","title":"Update SDK to SyncStage backend connected callback","text":"<pre><code>public updateOnWebsocketReconnected(onWebsocketReconnected: () =&gt; void): void\n</code></pre> <p>Parameters:</p> <ul> <li><code>onWebsocketReconnected</code> - method to be called when the browser SDK reconnects to the SyncStage services. Session state should be refetched and synchronized on the UI in this callback.</li> </ul>"},{"location":"web/versions/0.4.2/sdk-methods/#get-best-available-server","title":"Get best available server","text":"<p>Get best available server, where a session can be created</p> <pre><code>async getBestAvailableServer(): Promise&lt;[IServerInstance | null, SyncStageSDKErrorCode]&gt;\n</code></pre>"},{"location":"web/versions/0.4.2/sdk-methods/#get-server-instances","title":"Get server instances","text":"<p>Get server instances so you can select the server that is suitable for your session.</p> <pre><code>  async getServerInstances(): Promise&lt;[IServerInstances | null, SyncStageSDKErrorCode]&gt;\n</code></pre>"},{"location":"web/versions/0.4.2/sdk-methods/#create-a-session","title":"Create a session","text":"<p>Creates a session in a given zone by a given user from your user pool.</p> <pre><code>async createSession(\n    zoneId: string,\n    studioServerId: string,\n    userId: string\n): Promise&lt;[ISessionIdentifier | null, SyncStageSDKErrorCode]&gt;\n</code></pre> <p>Parameters:</p> <ul> <li><code>zoneId</code> - zone in which your session is hosted</li> <li><code>studioServerId</code> - studio server where you are running your session</li> <li><code>userId</code> - id of your app user to match the data between SyncStage and your backend</li> </ul>"},{"location":"web/versions/0.4.2/sdk-methods/#join-the-session","title":"Join the session","text":"<p>Joins a particular session identified by <code>sessionCode</code>.</p> <pre><code>async join(\n    sessionCode: string,\n    userId: string,\n    zoneId: string,\n    studioServerId: string,\n    displayName?: string | null,\n): Promise&lt;[ISession | null, SyncStageSDKErrorCode]&gt;\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>sessionCode</code> - the session code</p> </li> <li> <p><code>userId</code> - id of your app user to match de data between SyncStage and your backend</p> </li> <li> <p><code>zoneId</code> - zone in which your session is hosted</p> </li> <li> <p><code>studioServerId</code> - studio server where you are running your session</p> </li> <li> <p><code>displayName</code> - your app user display name</p> </li> </ul>"},{"location":"web/versions/0.4.2/sdk-methods/#get-session-state","title":"Get session state","text":"<p>Gets state of currently joined session.</p> <pre><code>async session(): Promise&lt;[ISession | null, SyncStageSDKErrorCode]&gt; \n</code></pre>"},{"location":"web/versions/0.4.2/sdk-methods/#leave-the-session","title":"Leave the session","text":"<p>Leaves currently joined session.</p> <pre><code>async leave(): Promise&lt;SyncStageSDKErrorCode&gt; \n</code></pre>"},{"location":"web/versions/0.4.2/sdk-methods/#mute-unmute-microphone","title":"Mute / unmute microphone","text":"<p>Enables or disables microphone stream.</p> <pre><code>async toggleMicrophone(mute: boolean): Promise&lt;SyncStageSDKErrorCode&gt;\n</code></pre> <p>Parameters:</p> <ul> <li><code>mute</code> - desired state of the mute option</li> </ul>"},{"location":"web/versions/0.4.2/sdk-methods/#is-muted","title":"Is muted","text":"<p>Returns state of microphone stream.</p> <pre><code>async isMicrophoneMuted(): Promise&lt;[boolean | null, SyncStageSDKErrorCode]&gt;\n</code></pre>"},{"location":"web/versions/0.4.2/sdk-methods/#get-receiver-network-measurements","title":"Get receiver network measurements","text":"<p>Returns Measurements object with network delay, jitter, and calculated network quality indicators.</p> <pre><code>async getReceiverMeasurements(identifier: string): Promise&lt;[IMeasurements | null, SyncStageSDKErrorCode]&gt;\n</code></pre> <p>Parameters:</p> <ul> <li><code>identifier</code> - receiver's identifier</li> </ul>"},{"location":"web/versions/0.4.2/sdk-methods/#get-transmitter-network-measurements","title":"Get transmitter network measurements","text":"<p>Returns Measurements object with network delay, jitter, and calculated network quality indicators.</p> <pre><code>async getTransmitterMeasurements(): Promise&lt;[IMeasurements | null, SyncStageSDKErrorCode]&gt;\n</code></pre>"},{"location":"web/versions/0.4.2/sdk-methods/#start-recording","title":"Start recording","text":"<pre><code>async startRecording(): Promise&lt;SyncStageSDKErrorCode&gt;\n</code></pre>"},{"location":"web/versions/0.4.2/sdk-methods/#stop-recording","title":"Stop recording","text":"<pre><code>async stopRecording(): Promise&lt;SyncStageSDKErrorCode&gt;\n</code></pre>"},{"location":"web/versions/0.4.2/sdk-methods/#register-desktop-agent-reconnected-callback","title":"Register Desktop Agent Reconnected Callback","text":"<p>In case of reconnection UI application should be aware of this fact, to refetch the session state to keep it synchronized.</p> <pre><code>registerDesktopAgentReconnectedCallback(onWebsocketReconnected: () =&gt; void): void;\n</code></pre> <p>Parameters:</p> <ul> <li><code>onWebsocketReconnected</code> - callback</li> </ul>"},{"location":"web/versions/0.4.2/sdk-methods/#unregister-desktop-agent-reconnected-callback","title":"Unregister Desktop Agent Reconnected Callback","text":"<p>Remove the callback in the SyncStage.</p> <pre><code>unregisterDesktopAgentReconnectedCallback(): void;\n</code></pre>"},{"location":"web/versions/0.4.2/sdk-methods/#get-uri-for-opening-syncstage-agent-on-windows","title":"Get URI for opening SyncStage Agent on Windows","text":"<pre><code>getDesktopAgentProtocolHandler(): string;\n</code></pre>"},{"location":"web/versions/0.4.3/sdk-data-interfaces/","title":"Data interfaces","text":""},{"location":"web/versions/0.4.3/sdk-data-interfaces/#syncstage-data-interfaces","title":"SyncStage data interfaces","text":"<pre><code>interface IHostInfo {\n  port: number;\n  address: string;\n  audioServerId: string;\n  streamingUrl: string;\n}\n</code></pre> <pre><code>interface IConnectionInfo {\n  connectionId: string;\n  createdAt: string;\n  updatedAt: string;\n  userId: string;\n  isMuted: boolean;\n  displayName?: string | null;\n  hostInfo?: IHostInfo | null;\n\n  connection(): Connection;\n}\n</code></pre> <pre><code>interface ILatencyOptimizationLevel {\n  level: number;\n}\n</code></pre> <pre><code>interface IMeasurements {\n  networkDelayMs: number;\n  networkJitterMs: number;\n  quality: number;\n}\n</code></pre> <pre><code>interface IServerInstance {\n  zoneId: string;\n  zoneName: string;\n  studioServerId: string;\n}\n</code></pre> <pre><code>interface ISessionIdentifier {\n  sessionId: string;\n  sessionCode: string;\n  createdAt: string;\n}\n</code></pre> <pre><code>interface ISession {\n  sessionId: string;\n  sessionCode: string | null;\n  createdAt: string;\n  updatedAt: string;\n  transmitter?: IConnection | null;\n  receivers: Array&lt;IConnection&gt;;\n  isRecording: boolean;\n}\n</code></pre> <pre><code>interface IConnection {\n  identifier: string;\n  userId: string;\n  displayName?: string | null;\n  isMuted: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n</code></pre> <pre><code>interface ISessionInfo {\n  sessionId: string;\n  sessionCode: string | null;\n  sessionStatus: string;\n  serverIsReady: boolean;\n  websocketUrl: string;\n  transmitter?: IConnectionInfo | null;\n  receivers: Array&lt;IConnectionInfo&gt;;\n  createdAt: string;\n  updatedAt: string;\n  recordingStatus: string;\n}\n</code></pre> <pre><code>export interface IZoneLatency {\n  name: string;\n  latency: string;\n}\n</code></pre>"},{"location":"web/versions/0.4.3/sdk-delegates/","title":"Delegates","text":"<p>SyncStage class provide four delegates:</p> <ul> <li><code>ISyncStageUserDelegate</code></li> <li><code>ISyncStageConnectivityDelegate</code></li> <li><code>ISyncStageDiscoveryDelegate</code></li> <li><code>ISyncStageDesktopAgentDelegate</code></li> </ul> <p>which provide a set of callbacks to inform your application about asynchronous events from the SyncStage. </p> <p>You can define those object and provide to the SyncStage constructor or update public SyncStage properties <code>userDelegate</code>, <code>connectivityDelegate</code>, <code>discoveryDelegate</code>, and <code>desktopAgentDelegate</code> anytime.</p>"},{"location":"web/versions/0.4.3/sdk-delegates/#syncstageuserdelegate","title":"SyncStageUserDelegate","text":"<p>Responsible for getting callbacks about users' state in the session.</p> <pre><code>interface ISyncStageUserDelegate {\n  userJoined(connection: IConnection): void;\n  userLeft(identifier: string): void;\n  userMuted(identifier: string): void;\n  userUnmuted(identifier: string): void;\n  sessionRecordingStarted(): void;\n  sessionRecordingStopped(): void;\n  sessionOut(): void;\n}\n</code></pre>"},{"location":"web/versions/0.4.3/sdk-delegates/#syncstageconnectivitydelegate","title":"SyncStageConnectivityDelegate","text":"<p>Responsible for getting callbacks about users' connectivity in the session.</p> <pre><code>interface ISyncStageConnectivityDelegate {\n  transmitterConnectivityChanged(connected: boolean): void;\n  receiverConnectivityChanged(identifier: string, connected: boolean): void;\n  desktopAgentReconnected(): void;\n}\n</code></pre> <p><code>transmitterConnectivityChanged</code> and <code>receiverConnectivityChanged</code> can be used to update connectivity indicator of particular connections. The <code>desktopAgentReconnected</code> callback is suggested to be used to trigger rebuild of the session state in the application (during the disconnection, new connections might be added or removed to the session which result in the ui state inconsistency).</p>"},{"location":"web/versions/0.4.3/sdk-delegates/#syncstagediscoverydelegate","title":"SyncStageDiscoveryDelegate","text":"<p>Responsible for getting callbacks about available zones latency.</p> <pre><code>interface ISyncStageDiscoveryDelegate {\n  discoveryResults(zones: string[]): void;\n  discoveryLatencyTestResults(results: IZoneLatency[]): void;\n}\n</code></pre>"},{"location":"web/versions/0.4.3/sdk-delegates/#syncstagedesktopagentdelegate","title":"SyncStageDesktopAgentDelegate","text":"<p>Responsible for getting callbacks with information if SyncStage Desktop Agent is already acquired by some other browser tab to prevent parallel access, and general Desktop Agent connection events.</p> <pre><code>interface ISyncStageDesktopAgentDelegate {\n  desktopAgentAquired(): void;\n  desktopAgentReleased(): void;\n  desktopAgentConnected(): void;\n  desktopAgentDisconnected(): void;\n  desktopAgentConnectionKeepAlive(): void; // Triggered every 5s informing that Desktop Agent is connected and alive\n  desktopAgentLostConnection(): void; // Reports unexpected connection loss or lack of keep alive\n}\n</code></pre>"},{"location":"web/versions/0.4.3/sdk-error-codes/","title":"Error codes","text":"<p>Most of the SDK methods return SyncStageSDKErrorCode which can be decoded using following enum class.</p> <pre><code>enum SyncStageSDKErrorCode {\n  'TOKEN_EXPIRED' = -2002,\n  'SYNCSTAGE_OPENED_IN_ANOTHER_TAB' = -2001,\n  'NOT_IN_SESSION' = -1001,\n  'API_UNAUTHORIZED' = -1000,\n  'SYNCSTAGE_SERVICE_COMMUNICATION_ERROR' = -11,\n  'TIMEOUT_ERROR' = -10,\n  'UNKNOWN_ERROR' = -1,\n  'OK' = 0,\n  'CONFIGURATION_ERROR' = 1,\n  'API_ERROR' = 2,\n  'STREAM_DOES_NOT_EXIST' = 3,\n  'BAD_VOLUME_VALUE' = 4,\n  'NO_ZONE_AVAILABLE' = 5,\n  'NO_STUDIO_SERVER_AVAILABLE' = 6,\n  'NO_INPUT_DEVICE' = 7,\n}\n</code></pre>"},{"location":"web/versions/0.4.3/sdk-methods/","title":"Methods","text":""},{"location":"web/versions/0.4.3/sdk-methods/#constructor","title":"Constructor","text":"<pre><code>class SyncStage implements ISyncStage{\n    constructor(\n        userDelegate: ISyncStageUserDelegate | null,\n        connectivityDelegate: ISyncStageConnectivityDelegate | null,\n        discoveryDelegate: ISyncStageDiscoveryDelegate | null,\n        desktopAgentDelegate: ISyncStageDesktopAgentDelegate | null,\n        onTokenExpired: (() =&gt; Promise&lt;string&gt;) | null,\n    );\n}\n</code></pre> <p>Constructor parameters:</p> <ul> <li> <p><code>userDelegate</code> - delegate object to receive events about users in session state</p> </li> <li> <p><code>discoveryDelegate</code> - delegate object responsible for getting callbacks about available zones latency.</p> </li> <li> <p><code>connectivityDelegate</code> - delegate object to receive events with information about stream connection to Studio Server state</p> </li> <li> <p><code>desktopAgentDelegate</code> - delegate object to receive events with information of desktop agent acquisition and release to prevent users from using SyncStage in multiple browser tabs at once</p> </li> <li> <p><code>onTokenExpired</code> - callback to be called when <code>jwt</code> expires, callback should return new refetched <code>jwt</code></p> </li> </ul>"},{"location":"web/versions/0.4.3/sdk-methods/#initialize","title":"Initialize","text":"<p>Initializes the SDK SyncStage object.</p> <pre><code>async init(\n        jwt: string,\n    ): Promise&lt;SyncStageSDKErrorCode&gt;\n</code></pre> <p>Parameters:</p> <ul> <li><code>jwt</code> - token obtained in the provisioning process.</li> </ul>"},{"location":"web/versions/0.4.3/sdk-methods/#update-jwt","title":"Update JWT","text":"<p>You can update JWT anytime you want, even before expiration takes place.</p> <pre><code>async updateToken(jwt: string): Promise&lt;SyncStageSDKErrorCode&gt;\n</code></pre> <ul> <li><code>jwt</code> - token obtained in the provisioning process.</li> </ul>"},{"location":"web/versions/0.4.3/sdk-methods/#get-is-desktop-agent-connected","title":"Get is desktop agent connected","text":"<p>Checks if desktop agent is running and available on the localhost.</p> <pre><code>isDesktopAgentConnected(): boolean\n</code></pre>"},{"location":"web/versions/0.4.3/sdk-methods/#get-sdk-version","title":"Get SDK version","text":"<p>Gets SDK version.</p> <pre><code>getSDKVersion(): string\n</code></pre>"},{"location":"web/versions/0.4.3/sdk-methods/#update-sdk-to-syncstage-backend-connected-callback","title":"Update SDK to SyncStage backend connected callback","text":"<pre><code>public updateOnWebsocketReconnected(onWebsocketReconnected: () =&gt; void): void\n</code></pre> <p>Parameters:</p> <ul> <li><code>onWebsocketReconnected</code> - method to be called when the browser SDK reconnects to the SyncStage services. Session state should be refetched and synchronized on the UI in this callback.</li> </ul>"},{"location":"web/versions/0.4.3/sdk-methods/#get-best-available-server","title":"Get best available server","text":"<p>Get best available server, where a session can be created</p> <pre><code>async getBestAvailableServer(): Promise&lt;[IServerInstance | null, SyncStageSDKErrorCode]&gt;\n</code></pre>"},{"location":"web/versions/0.4.3/sdk-methods/#get-server-instances","title":"Get server instances","text":"<p>Get server instances so you can select the server that is suitable for your session.</p> <pre><code>  async getServerInstances(): Promise&lt;[IServerInstances | null, SyncStageSDKErrorCode]&gt;\n</code></pre>"},{"location":"web/versions/0.4.3/sdk-methods/#create-a-session","title":"Create a session","text":"<p>Creates a session in a given zone by a given user from your user pool.</p> <pre><code>async createSession(\n    zoneId: string,\n    studioServerId: string,\n    userId: string\n): Promise&lt;[ISessionIdentifier | null, SyncStageSDKErrorCode]&gt;\n</code></pre> <p>Parameters:</p> <ul> <li><code>zoneId</code> - zone in which your session is hosted</li> <li><code>studioServerId</code> - studio server where you are running your session</li> <li><code>userId</code> - id of your app user to match the data between SyncStage and your backend</li> </ul>"},{"location":"web/versions/0.4.3/sdk-methods/#join-the-session","title":"Join the session","text":"<p>Joins a particular session identified by <code>sessionCode</code>.</p> <pre><code>async join(\n    sessionCode: string,\n    userId: string,\n    zoneId: string,\n    studioServerId: string,\n    displayName?: string | null,\n): Promise&lt;[ISession | null, SyncStageSDKErrorCode]&gt;\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>sessionCode</code> - the session code</p> </li> <li> <p><code>userId</code> - id of your app user to match de data between SyncStage and your backend</p> </li> <li> <p><code>zoneId</code> - zone in which your session is hosted</p> </li> <li> <p><code>studioServerId</code> - studio server where you are running your session</p> </li> <li> <p><code>displayName</code> - your app user display name</p> </li> </ul>"},{"location":"web/versions/0.4.3/sdk-methods/#get-session-state","title":"Get session state","text":"<p>Gets state of currently joined session.</p> <pre><code>async session(): Promise&lt;[ISession | null, SyncStageSDKErrorCode]&gt; \n</code></pre>"},{"location":"web/versions/0.4.3/sdk-methods/#leave-the-session","title":"Leave the session","text":"<p>Leaves currently joined session.</p> <pre><code>async leave(): Promise&lt;SyncStageSDKErrorCode&gt; \n</code></pre>"},{"location":"web/versions/0.4.3/sdk-methods/#mute-unmute-microphone","title":"Mute / unmute microphone","text":"<p>Enables or disables microphone stream.</p> <pre><code>async toggleMicrophone(mute: boolean): Promise&lt;SyncStageSDKErrorCode&gt;\n</code></pre> <p>Parameters:</p> <ul> <li><code>mute</code> - desired state of the mute option</li> </ul>"},{"location":"web/versions/0.4.3/sdk-methods/#is-muted","title":"Is muted","text":"<p>Returns state of microphone stream.</p> <pre><code>async isMicrophoneMuted(): Promise&lt;[boolean | null, SyncStageSDKErrorCode]&gt;\n</code></pre>"},{"location":"web/versions/0.4.3/sdk-methods/#get-receiver-network-measurements","title":"Get receiver network measurements","text":"<p>Returns Measurements object with network delay, jitter, and calculated network quality indicators.</p> <pre><code>async getReceiverMeasurements(identifier: string): Promise&lt;[IMeasurements | null, SyncStageSDKErrorCode]&gt;\n</code></pre> <p>Parameters:</p> <ul> <li><code>identifier</code> - receiver's identifier</li> </ul>"},{"location":"web/versions/0.4.3/sdk-methods/#get-transmitter-network-measurements","title":"Get transmitter network measurements","text":"<p>Returns Measurements object with network delay, jitter, and calculated network quality indicators.</p> <pre><code>async getTransmitterMeasurements(): Promise&lt;[IMeasurements | null, SyncStageSDKErrorCode]&gt;\n</code></pre>"},{"location":"web/versions/0.4.3/sdk-methods/#start-recording","title":"Start recording","text":"<pre><code>async startRecording(): Promise&lt;SyncStageSDKErrorCode&gt;\n</code></pre>"},{"location":"web/versions/0.4.3/sdk-methods/#stop-recording","title":"Stop recording","text":"<pre><code>async stopRecording(): Promise&lt;SyncStageSDKErrorCode&gt;\n</code></pre>"},{"location":"web/versions/0.4.3/sdk-methods/#register-desktop-agent-reconnected-callback","title":"Register Desktop Agent Reconnected Callback","text":"<p>In case of reconnection UI application should be aware of this fact, to refetch the session state to keep it synchronized.</p> <pre><code>registerDesktopAgentReconnectedCallback(onWebsocketReconnected: () =&gt; void): void;\n</code></pre> <p>Parameters:</p> <ul> <li><code>onWebsocketReconnected</code> - callback</li> </ul>"},{"location":"web/versions/0.4.3/sdk-methods/#unregister-desktop-agent-reconnected-callback","title":"Unregister Desktop Agent Reconnected Callback","text":"<p>Remove the callback in the SyncStage.</p> <pre><code>unregisterDesktopAgentReconnectedCallback(): void;\n</code></pre>"},{"location":"web/versions/0.4.3/sdk-methods/#get-uri-for-opening-syncstage-agent-on-windows","title":"Get URI for opening SyncStage Agent on Windows","text":"<pre><code>getDesktopAgentProtocolHandler(): string;\n</code></pre>"},{"location":"web/versions/0.5.0/sdk-data-interfaces/","title":"Data interfaces","text":""},{"location":"web/versions/0.5.0/sdk-data-interfaces/#syncstage-data-interfaces","title":"SyncStage data interfaces","text":"<pre><code>interface IHostInfo {\n  port: number;\n  address: string;\n  audioServerId: string;\n  streamingUrl: string;\n}\n</code></pre> <pre><code>interface IConnectionInfo {\n  connectionId: string;\n  createdAt: string;\n  updatedAt: string;\n  userId: string;\n  isMuted: boolean;\n  displayName?: string | null;\n  hostInfo?: IHostInfo | null;\n\n  connection(): Connection;\n}\n</code></pre> <pre><code>interface ILatencyOptimizationLevel {\n  level: number;\n}\n</code></pre> <pre><code>interface IMeasurements {\n  networkDelayMs: number;\n  networkJitterMs: number;\n  quality: number;\n}\n</code></pre> <pre><code>interface IServerInstance {\n  zoneId: string;\n  zoneName: string;\n  studioServerId: string;\n}\n</code></pre> <pre><code>interface ISessionIdentifier {\n  sessionId: string;\n  sessionCode: string;\n  createdAt: string;\n}\n</code></pre> <pre><code>interface ISession {\n  sessionId: string;\n  sessionCode: string | null;\n  createdAt: string;\n  updatedAt: string;\n  transmitter?: IConnection | null;\n  receivers: Array&lt;IConnection&gt;;\n  isRecording: boolean;\n}\n</code></pre> <pre><code>interface IConnection {\n  identifier: string;\n  userId: string;\n  displayName?: string | null;\n  isMuted: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n</code></pre> <pre><code>interface ISessionInfo {\n  sessionId: string;\n  sessionCode: string | null;\n  sessionStatus: string;\n  serverIsReady: boolean;\n  websocketUrl: string;\n  transmitter?: IConnectionInfo | null;\n  receivers: Array&lt;IConnectionInfo&gt;;\n  createdAt: string;\n  updatedAt: string;\n  recordingStatus: string;\n}\n</code></pre> <pre><code>export interface IZoneLatency {\n  name: string;\n  latency: string;\n}\n</code></pre>"},{"location":"web/versions/0.5.0/sdk-delegates/","title":"Delegates","text":"<p>SyncStage class provide four delegates:</p> <ul> <li><code>ISyncStageUserDelegate</code></li> <li><code>ISyncStageConnectivityDelegate</code></li> <li><code>ISyncStageDiscoveryDelegate</code></li> <li><code>ISyncStageDesktopAgentDelegate</code></li> </ul> <p>which provide a set of callbacks to inform your application about asynchronous events from the SyncStage. </p> <p>You can define those object and provide to the SyncStage constructor or update public SyncStage properties <code>userDelegate</code>, <code>connectivityDelegate</code>, <code>discoveryDelegate</code>, and <code>desktopAgentDelegate</code> anytime.</p>"},{"location":"web/versions/0.5.0/sdk-delegates/#syncstageuserdelegate","title":"SyncStageUserDelegate","text":"<p>Responsible for getting callbacks about users' state in the session.</p> <pre><code>interface ISyncStageUserDelegate {\n  userJoined(connection: IConnection): void;\n  userLeft(identifier: string): void;\n  userMuted(identifier: string): void;\n  userUnmuted(identifier: string): void;\n  sessionRecordingStarted(): void;\n  sessionRecordingStopped(): void;\n  sessionOut(): void;\n}\n</code></pre>"},{"location":"web/versions/0.5.0/sdk-delegates/#syncstageconnectivitydelegate","title":"SyncStageConnectivityDelegate","text":"<p>Responsible for getting callbacks about users' connectivity in the session.</p> <pre><code>interface ISyncStageConnectivityDelegate {\n  transmitterConnectivityChanged(connected: boolean): void;\n  receiverConnectivityChanged(identifier: string, connected: boolean): void;\n  desktopAgentReconnected(): void;\n}\n</code></pre> <p><code>transmitterConnectivityChanged</code> and <code>receiverConnectivityChanged</code> can be used to update connectivity indicator of particular connections. The <code>desktopAgentReconnected</code> callback is suggested to be used to trigger rebuild of the session state in the application (during the disconnection, new connections might be added or removed to the session which result in the ui state inconsistency).</p>"},{"location":"web/versions/0.5.0/sdk-delegates/#syncstagedesktopagentdelegate","title":"SyncStageDesktopAgentDelegate","text":"<p>Responsible for getting callbacks with information if SyncStage Desktop Agent is already acquired by some other browser tab to prevent parallel access, and general Desktop Agent connection events.</p> <pre><code>interface ISyncStageDesktopAgentDelegate {\n  desktopAgentAquired(): void;\n  desktopAgentReleased(): void;\n  desktopAgentConnected(): void; // Reports if Desktop Agent is alive (will be triggered periodicaly on Dekstop Agent keep alive messages)\n  desktopAgentDisconnected(): void; // Reports Desktop Agent connection loss or lack of keep alive\n}\n</code></pre>"},{"location":"web/versions/0.5.0/sdk-error-codes/","title":"Error codes","text":"<p>Most of the SDK methods return SyncStageSDKErrorCode which can be decoded using following enum class.</p> <pre><code>enum SyncStageSDKErrorCode {\n  'TOKEN_EXPIRED' = -2002,\n  'SYNCSTAGE_OPENED_IN_ANOTHER_TAB' = -2001,\n  'INCOMPATIBLE_CONTENT' = -1002,\n  'NOT_IN_SESSION' = -1001,\n  'API_UNAUTHORIZED' = -1000,\n  'STUDIO_SERVER_NOT_FOUND' = -12,\n  'SYNCSTAGE_SERVICE_COMMUNICATION_ERROR' = -11,\n  'TIMEOUT_ERROR' = -10,\n  'UNKNOWN_ERROR' = -1,\n  'OK' = 0,\n  'CONFIGURATION_ERROR' = 1,\n  'API_ERROR' = 2,\n  'STREAM_DOES_NOT_EXIST' = 3,\n  'BAD_VOLUME_VALUE' = 4,\n  'NO_ZONE_AVAILABLE' = 5,\n  'NO_STUDIO_SERVER_AVAILABLE' = 6,\n  'NO_INPUT_DEVICE' = 7,\n}\n</code></pre>"},{"location":"web/versions/0.5.0/sdk-methods/","title":"Methods","text":""},{"location":"web/versions/0.5.0/sdk-methods/#constructor","title":"Constructor","text":"<pre><code>class SyncStage implements ISyncStage{\n    constructor(\n        userDelegate: ISyncStageUserDelegate | null,\n        connectivityDelegate: ISyncStageConnectivityDelegate | null,\n        discoveryDelegate: ISyncStageDiscoveryDelegate | null,\n        desktopAgentDelegate: ISyncStageDesktopAgentDelegate | null,\n        onTokenExpired: (() =&gt; Promise&lt;string&gt;) | null,\n    );\n}\n</code></pre> <p>Constructor parameters:</p> <ul> <li> <p><code>userDelegate</code> - delegate object to receive events about users in session state</p> </li> <li> <p><code>connectivityDelegate</code> - delegate object to receive events with information about stream connection to Studio Server state</p> </li> <li> <p><code>desktopAgentDelegate</code> - delegate object to receive events with information of desktop agent acquisition and release to prevent users from using SyncStage in multiple browser tabs at once</p> </li> <li> <p><code>onTokenExpired</code> - callback to be called when <code>jwt</code> expires, callback should return new refetched <code>jwt</code></p> </li> </ul>"},{"location":"web/versions/0.5.0/sdk-methods/#initialize","title":"Initialize","text":"<p>Initializes the SDK SyncStage object.</p> <pre><code>async init(\n        jwt: string,\n    ): Promise&lt;SyncStageSDKErrorCode&gt;\n</code></pre> <p>Parameters:</p> <ul> <li><code>jwt</code> - token obtained in the provisioning process.</li> </ul>"},{"location":"web/versions/0.5.0/sdk-methods/#update-jwt","title":"Update JWT","text":"<p>You can update JWT anytime you want, even before expiration takes place.</p> <pre><code>async updateToken(jwt: string): Promise&lt;SyncStageSDKErrorCode&gt;\n</code></pre> <ul> <li><code>jwt</code> - token obtained in the provisioning process.</li> </ul>"},{"location":"web/versions/0.5.0/sdk-methods/#get-is-desktop-agent-connected","title":"Get is desktop agent connected","text":"<p>Checks if desktop agent is running and available on the localhost.</p> <pre><code>isDesktopAgentConnected(): boolean\n</code></pre>"},{"location":"web/versions/0.5.0/sdk-methods/#get-sdk-version","title":"Get SDK version","text":"<p>Gets SDK version.</p> <pre><code>getSDKVersion(): string\n</code></pre>"},{"location":"web/versions/0.5.0/sdk-methods/#gets-autoselected-studio-server","title":"Gets autoselected Studio Server","text":"<p>Get autoselected server instance info</p> <pre><code>async getSelectedServer(): Promise&lt;[IServerInstance | null, SyncStageSDKErrorCode]&gt;;\n</code></pre>"},{"location":"web/versions/0.5.0/sdk-methods/#get-best-available-studio-server-deprecated","title":"Get best available Studio Server DEPRECATED","text":"<p>Get best available server, where a session can be created</p> <pre><code>async getBestAvailableServer(): Promise&lt;[IServerInstance | null, SyncStageSDKErrorCode]&gt;\n</code></pre>"},{"location":"web/versions/0.5.0/sdk-methods/#update-sdk-to-syncstage-backend-connected-callback","title":"Update SDK to SyncStage backend connected callback","text":"<pre><code>  updateOnWebsocketReconnected(onWebsocketReconnected: () =&gt; void): void\n</code></pre> <p>Parameters:</p> <ul> <li><code>onWebsocketReconnected</code> - method to be called when the browser SDK reconnects to the SyncStage services. Session state should be refetched and synchronized on the UI in this callback.</li> </ul>"},{"location":"web/versions/0.5.0/sdk-methods/#get-server-instances","title":"Get server instances","text":"<p>Get server instances so you can select the server that is suitable for your session.</p> <pre><code>  async getServerInstances(): Promise&lt;[IServerInstances | null, SyncStageSDKErrorCode]&gt;\n</code></pre>"},{"location":"web/versions/0.5.0/sdk-methods/#create-a-session","title":"Create a session","text":"<p>Creates a session in a given zone by a given user from your user pool.</p> <pre><code>createSession(\n    userId: string,\n    zoneId?: string | null,\n    studioServerId?: string | null,\n  ): Promise&lt;[ISessionIdentifier | null, SyncStageSDKErrorCode]&gt;\n</code></pre> <p>Parameters:</p> <ul> <li><code>zoneId</code> - zone in which your session is hosted</li> <li><code>studioServerId</code> - studio server where you are running your session</li> <li><code>userId</code> - id of your app user to match the data between SyncStage and your backend</li> </ul>"},{"location":"web/versions/0.5.0/sdk-methods/#join-the-session","title":"Join the session","text":"<p>Joins a particular session identified by <code>sessionCode</code>.</p> <pre><code>async join(\n    sessionCode: string,\n    userId: string,\n    displayName?: string | null,\n    zoneId?: string | null,\n    studioServerId?: string | null,\n  ): Promise&lt;[ISession | null, SyncStageSDKErrorCode]&gt;;\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>sessionCode</code> - the session code</p> </li> <li> <p><code>userId</code> - id of your app user to match de data between SyncStage and your backend</p> </li> <li> <p><code>zoneId</code> - zone in which your session is hosted</p> </li> <li> <p><code>studioServerId</code> - studio server where you are running your session</p> </li> <li> <p><code>displayName</code> - your app user display name</p> </li> </ul>"},{"location":"web/versions/0.5.0/sdk-methods/#get-session-state","title":"Get session state","text":"<p>Gets state of currently joined session.</p> <pre><code>async session(): Promise&lt;[ISession | null, SyncStageSDKErrorCode]&gt; \n</code></pre>"},{"location":"web/versions/0.5.0/sdk-methods/#leave-the-session","title":"Leave the session","text":"<p>Leaves currently joined session.</p> <pre><code>async leave(): Promise&lt;SyncStageSDKErrorCode&gt; \n</code></pre>"},{"location":"web/versions/0.5.0/sdk-methods/#mute-unmute-microphone","title":"Mute / unmute microphone","text":"<p>Enables or disables microphone stream.</p> <pre><code>async toggleMicrophone(mute: boolean): Promise&lt;SyncStageSDKErrorCode&gt;\n</code></pre> <p>Parameters:</p> <ul> <li><code>mute</code> - desired state of the mute option</li> </ul>"},{"location":"web/versions/0.5.0/sdk-methods/#is-muted","title":"Is muted","text":"<p>Returns state of microphone stream.</p> <pre><code>async isMicrophoneMuted(): Promise&lt;[boolean | null, SyncStageSDKErrorCode]&gt;\n</code></pre>"},{"location":"web/versions/0.5.0/sdk-methods/#get-receiver-network-measurements","title":"Get receiver network measurements","text":"<p>Returns Measurements object with network delay, jitter, and calculated network quality indicators.</p> <pre><code>async getReceiverMeasurements(identifier: string): Promise&lt;[IMeasurements | null, SyncStageSDKErrorCode]&gt;\n</code></pre> <p>Parameters:</p> <ul> <li><code>identifier</code> - receiver's identifier</li> </ul>"},{"location":"web/versions/0.5.0/sdk-methods/#get-transmitter-network-measurements","title":"Get transmitter network measurements","text":"<p>Returns Measurements object with network delay, jitter, and calculated network quality indicators.</p> <pre><code>async getTransmitterMeasurements(): Promise&lt;[IMeasurements | null, SyncStageSDKErrorCode]&gt;\n</code></pre>"},{"location":"web/versions/0.5.0/sdk-methods/#start-recording","title":"Start recording","text":"<pre><code>async startRecording(): Promise&lt;SyncStageSDKErrorCode&gt;\n</code></pre>"},{"location":"web/versions/0.5.0/sdk-methods/#stop-recording","title":"Stop recording","text":"<pre><code>async stopRecording(): Promise&lt;SyncStageSDKErrorCode&gt;\n</code></pre>"},{"location":"web/versions/0.5.0/sdk-methods/#register-desktop-agent-reconnected-callback","title":"Register Desktop Agent Reconnected Callback","text":"<p>In case of reconnection UI application should be aware of this fact, to refetch the session state to keep it synchronized.</p> <pre><code>registerDesktopAgentReconnectedCallback(onWebsocketReconnected: () =&gt; void): void;\n</code></pre> <p>Parameters:</p> <ul> <li><code>onWebsocketReconnected</code> - callback</li> </ul>"},{"location":"web/versions/0.5.0/sdk-methods/#unregister-desktop-agent-reconnected-callback","title":"Unregister Desktop Agent Reconnected Callback","text":"<p>Remove the callback in the SyncStage.</p> <pre><code>unregisterDesktopAgentReconnectedCallback(): void;\n</code></pre>"},{"location":"web/versions/0.5.0/sdk-methods/#get-uri-for-opening-syncstage-agent-on-windows","title":"Get URI for opening SyncStage Agent on Windows","text":"<pre><code>getDesktopAgentProtocolHandler(): string;\n</code></pre>"},{"location":"web/versions/0.6.0/sdk-data-interfaces/","title":"Data interfaces","text":""},{"location":"web/versions/0.6.0/sdk-data-interfaces/#syncstage-data-interfaces","title":"SyncStage data interfaces","text":"<pre><code>interface IHostInfo {\n  port: number;\n  address: string;\n  audioServerId: string;\n  streamingUrl: string;\n}\n</code></pre> <pre><code>interface IConnectionInfo {\n  connectionId: string;\n  createdAt: string;\n  updatedAt: string;\n  userId: string;\n  isMuted: boolean;\n  displayName?: string | null;\n  hostInfo?: IHostInfo | null;\n\n  connection(): Connection;\n}\n</code></pre> <pre><code>interface ILatencyOptimizationLevel {\n  level: number;\n}\n</code></pre> <pre><code>interface IMeasurements {\n  networkDelayMs: number;\n  networkJitterMs: number;\n  quality: number;\n}\n</code></pre> <pre><code>interface IServerInstance {\n  zoneId: string;\n  zoneName: string;\n  studioServerId: string;\n}\n</code></pre> <pre><code>interface ISessionIdentifier {\n  sessionId: string;\n  sessionCode: string;\n  createdAt: string;\n}\n</code></pre> <pre><code>interface ISession {\n  sessionId: string;\n  sessionCode: string | null;\n  createdAt: string;\n  updatedAt: string;\n  transmitter?: IConnection | null;\n  receivers: Array&lt;IConnection&gt;;\n  isRecording: boolean;\n}\n</code></pre> <pre><code>interface IConnection {\n  identifier: string;\n  userId: string;\n  displayName?: string | null;\n  isMuted: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n</code></pre> <pre><code>interface ISessionInfo {\n  sessionId: string;\n  sessionCode: string | null;\n  sessionStatus: string;\n  serverIsReady: boolean;\n  websocketUrl: string;\n  transmitter?: IConnectionInfo | null;\n  receivers: Array&lt;IConnectionInfo&gt;;\n  createdAt: string;\n  updatedAt: string;\n  recordingStatus: string;\n}\n</code></pre> <pre><code>export interface IZoneLatency {\n  name: string;\n  latency: string;\n}\n</code></pre>"},{"location":"web/versions/0.6.0/sdk-delegates/","title":"Delegates","text":"<p>SyncStage class provide four delegates:</p> <ul> <li><code>ISyncStageUserDelegate</code></li> <li><code>ISyncStageConnectivityDelegate</code></li> <li><code>ISyncStageDiscoveryDelegate</code></li> <li><code>ISyncStageDesktopAgentDelegate</code></li> </ul> <p>which provide a set of callbacks to inform your application about asynchronous events from the SyncStage. </p> <p>You can define those object and provide to the SyncStage constructor or update public SyncStage properties <code>userDelegate</code>, <code>connectivityDelegate</code>, <code>discoveryDelegate</code>, and <code>desktopAgentDelegate</code> anytime.</p>"},{"location":"web/versions/0.6.0/sdk-delegates/#syncstageuserdelegate","title":"SyncStageUserDelegate","text":"<p>Responsible for getting callbacks about users' state in the session.</p> <pre><code>interface ISyncStageUserDelegate {\n  userJoined(connection: IConnection): void;\n  userLeft(identifier: string): void;\n  userMuted(identifier: string): void;\n  userUnmuted(identifier: string): void;\n  sessionRecordingStarted(): void;\n  sessionRecordingStopped(): void;\n  sessionOut(): void;\n}\n</code></pre>"},{"location":"web/versions/0.6.0/sdk-delegates/#syncstageconnectivitydelegate","title":"SyncStageConnectivityDelegate","text":"<p>Responsible for getting callbacks about users' connectivity in the session.</p> <pre><code>interface ISyncStageConnectivityDelegate {\n  transmitterConnectivityChanged(connected: boolean): void;\n  receiverConnectivityChanged(identifier: string, connected: boolean): void;\n  desktopAgentReconnected(): void;\n}\n</code></pre> <p><code>transmitterConnectivityChanged</code> and <code>receiverConnectivityChanged</code> can be used to update connectivity indicator of particular connections. The <code>desktopAgentReconnected</code> callback is suggested to be used to trigger rebuild of the session state in the application (during the disconnection, new connections might be added or removed to the session which result in the ui state inconsistency).</p>"},{"location":"web/versions/0.6.0/sdk-delegates/#syncstagedesktopagentdelegate","title":"SyncStageDesktopAgentDelegate","text":"<p>Responsible for getting callbacks with information if SyncStage Desktop Agent is already acquired by some other browser tab to prevent parallel access, and general Desktop Agent connection events.</p> <pre><code>interface ISyncStageDesktopAgentDelegate {\n  desktopAgentAquired(): void;\n  desktopAgentReleased(): void;\n  desktopAgentConnected(): void; // Reports if Desktop Agent is alive (will be triggered periodicaly on Dekstop Agent keep alive messages)\n  desktopAgentDisconnected(): void; // Reports Desktop Agent connection loss or lack of keep alive\n  onDesktopAgentDeprovisioned(): void; // Reports if Desktop Agent got deprovitioned - can happen if Desktop Agent is restarted \n  onDesktopAgentProvisioned(): void; // Periodically confirms that Desktop Agent is still provisioned (was not restarted)\n}\n</code></pre>"},{"location":"web/versions/0.6.0/sdk-error-codes/","title":"Error codes","text":"<p>Most of the SDK methods return SyncStageSDKErrorCode which can be decoded using following enum class.</p> <pre><code>enum SyncStageSDKErrorCode {\n  'TOKEN_EXPIRED' = -2002,\n  'SYNCSTAGE_OPENED_IN_ANOTHER_TAB' = -2001,\n  'NOT_IN_SESSION' = -1001,\n  'API_UNAUTHORIZED' = -1000,\n  'STUDIO_SERVER_NOT_FOUND' = -12,\n  'SYNCSTAGE_SERVICE_COMMUNICATION_ERROR' = -11,\n  'TIMEOUT_ERROR' = -10,\n  'UNKNOWN_ERROR' = -1,\n  'OK' = 0,\n  'CONFIGURATION_ERROR' = 1,\n  'API_ERROR' = 2,\n  'STREAM_DOES_NOT_EXIST' = 3,\n  'BAD_VOLUME_VALUE' = 4,\n  'NO_ZONE_AVAILABLE' = 5,\n  'NO_STUDIO_SERVER_AVAILABLE' = 6,\n  'NO_INPUT_DEVICE' = 7,\n}\n</code></pre>"},{"location":"web/versions/0.6.0/sdk-methods/","title":"Methods","text":""},{"location":"web/versions/0.6.0/sdk-methods/#060","title":"0.6.0","text":""},{"location":"web/versions/0.6.0/sdk-methods/#constructor","title":"Constructor","text":"<pre><code>class SyncStage implements ISyncStage{\n    constructor(\n        userDelegate: ISyncStageUserDelegate | null,\n        connectivityDelegate: ISyncStageConnectivityDelegate | null,\n        discoveryDelegate: ISyncStageDiscoveryDelegate | null,\n        desktopAgentDelegate: ISyncStageDesktopAgentDelegate | null,\n        onTokenExpired: (() =&gt; Promise&lt;string&gt;) | null,\n    );\n}\n</code></pre> <p>Constructor parameters:</p> <ul> <li> <p><code>userDelegate</code> - delegate object to receive events about users in session state</p> </li> <li> <p><code>connectivityDelegate</code> - delegate object to receive events with information about stream connection to Studio Server state</p> </li> <li> <p><code>desktopAgentDelegate</code> - delegate object to receive events with information of desktop agent acquisition and release to prevent users from using SyncStage in multiple browser tabs at once</p> </li> <li> <p><code>onTokenExpired</code> - callback to be called when <code>jwt</code> expires, callback should return new refetched <code>jwt</code></p> </li> </ul>"},{"location":"web/versions/0.6.0/sdk-methods/#check-compatibility","title":"Check compatibility","text":"<p>Checks if SyncStage SDK is compatible with currently installed Desktop Agent</p> <pre><code>async isCompatible(currentOs: string): Promise&lt;boolean&gt;;\n</code></pre> <p>Parameters:</p> <ul> <li><code>currentOS</code> - operating system should be provided. Accepted values from list: <code>['Windows', 'macOS']</code></li> </ul>"},{"location":"web/versions/0.6.0/sdk-methods/#get-latest-compatible-desktop-agent-version","title":"Get latest Compatible Desktop Agent version","text":"<pre><code>getLatestCompatibleDesktopAgentVersion(currentOs: string): Promise&lt;string | null&gt;;\n</code></pre> <p>Parameters:</p> <ul> <li><code>currentOS</code> - operating system should be provided. Accepted values from list: <code>['Windows', 'macOS']</code></li> </ul>"},{"location":"web/versions/0.6.0/sdk-methods/#initialize","title":"Initialize","text":"<p>Initializes and provisions the SDK SyncStage object.</p> <pre><code>async init(\n        jwt: string,\n    ): Promise&lt;SyncStageSDKErrorCode&gt;\n</code></pre> <p>Parameters:</p>"},{"location":"web/versions/0.6.0/sdk-methods/#check-if-syncstage-agent-is-provisioned","title":"Check if SyncStage Agent is provisioned","text":"<p>Returns if Desktop Agent has been already provisioned.</p> <pre><code>async checkProvisionedStatus(): Promise&lt;boolean&gt;;\n</code></pre>"},{"location":"web/versions/0.6.0/sdk-methods/#update-jwt","title":"Update JWT","text":"<p>You can update JWT anytime you want, even before expiration takes place.</p> <pre><code>async updateToken(jwt: string): Promise&lt;SyncStageSDKErrorCode&gt;\n</code></pre> <ul> <li><code>jwt</code> - token obtained in the provisioning process.</li> </ul>"},{"location":"web/versions/0.6.0/sdk-methods/#get-is-desktop-agent-connected","title":"Get is desktop agent connected","text":"<p>Checks if desktop agent is running and available on the localhost.</p> <pre><code>isDesktopAgentConnected(): boolean\n</code></pre>"},{"location":"web/versions/0.6.0/sdk-methods/#get-sdk-version","title":"Get SDK version","text":"<p>Gets SDK version.</p> <pre><code>getSDKVersion(): string\n</code></pre>"},{"location":"web/versions/0.6.0/sdk-methods/#gets-autoselected-studio-server","title":"Gets autoselected Studio Server","text":"<p>Get autoselected server instance info</p> <pre><code>async getSelectedServer(): Promise&lt;[IServerInstance | null, SyncStageSDKErrorCode]&gt;;\n</code></pre>"},{"location":"web/versions/0.6.0/sdk-methods/#get-best-available-studio-server","title":"Get best available Studio Server","text":"<p>Get best available server, where a session can be created</p> <pre><code>async getBestAvailableServer(): Promise&lt;[IServerInstance | null, SyncStageSDKErrorCode]&gt;\n</code></pre>"},{"location":"web/versions/0.6.0/sdk-methods/#update-sdk-to-syncstage-backend-connected-callback","title":"Update SDK to SyncStage backend connected callback","text":"<pre><code>  updateOnDesktopAgentReconnected(onDesktopAgentReconnected: () =&gt; void): void;\n</code></pre> <p>Parameters:</p> <ul> <li><code>onDesktopAgentReconnected</code> - method to be called when the browser SDK reconnects to Desktop Agent. Session state should be refetched and synchronized on the UI in this callback.</li> </ul>"},{"location":"web/versions/0.6.0/sdk-methods/#get-server-instances","title":"Get server instances","text":"<p>Get server instances so you can select the server that is suitable for your session.</p> <pre><code>  async getServerInstances(): Promise&lt;[IServerInstances | null, SyncStageSDKErrorCode]&gt;\n</code></pre>"},{"location":"web/versions/0.6.0/sdk-methods/#create-a-session","title":"Create a session","text":"<p>Creates a session in a given zone by a given user from your user pool.</p> <pre><code>async createSession(\n    userId: string,\n    zoneId?: string | null,\n    studioServerId?: string | null,\n  ): Promise&lt;[ISessionIdentifier | null, SyncStageSDKErrorCode]&gt;\n</code></pre> <p>Parameters:</p> <ul> <li><code>zoneId</code> - zone in which your session is hosted</li> <li><code>studioServerId</code> - studio server where you are running your session</li> <li><code>userId</code> - id of your app user to match the data between SyncStage and your backend</li> </ul>"},{"location":"web/versions/0.6.0/sdk-methods/#join-the-session","title":"Join the session","text":"<p>Joins a particular session identified by <code>sessionCode</code>.</p> <pre><code>async join(\n    sessionCode: string,\n    userId: string,\n    displayName?: string | null,\n    zoneId?: string | null,\n    studioServerId?: string | null,\n  ): Promise&lt;[ISession | null, SyncStageSDKErrorCode]&gt;;\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>sessionCode</code> - the session code</p> </li> <li> <p><code>userId</code> - id of your app user to match de data between SyncStage and your backend</p> </li> <li> <p><code>zoneId</code> - zone in which your session is hosted</p> </li> <li> <p><code>studioServerId</code> - studio server where you are running your session</p> </li> <li> <p><code>displayName</code> - your app user display name</p> </li> </ul>"},{"location":"web/versions/0.6.0/sdk-methods/#get-session-state","title":"Get session state","text":"<p>Gets state of currently joined session.</p> <pre><code>async session(): Promise&lt;[ISession | null, SyncStageSDKErrorCode]&gt; \n</code></pre>"},{"location":"web/versions/0.6.0/sdk-methods/#leave-the-session","title":"Leave the session","text":"<p>Leaves currently joined session.</p> <pre><code>async leave(): Promise&lt;SyncStageSDKErrorCode&gt; \n</code></pre>"},{"location":"web/versions/0.6.0/sdk-methods/#mute-unmute-microphone","title":"Mute / unmute microphone","text":"<p>Enables or disables microphone stream.</p> <pre><code>async toggleMicrophone(mute: boolean): Promise&lt;SyncStageSDKErrorCode&gt;\n</code></pre> <p>Parameters:</p> <ul> <li><code>mute</code> - desired state of the mute option</li> </ul>"},{"location":"web/versions/0.6.0/sdk-methods/#is-muted","title":"Is muted","text":"<p>Returns state of microphone stream.</p> <pre><code>async isMicrophoneMuted(): Promise&lt;[boolean | null, SyncStageSDKErrorCode]&gt;\n</code></pre>"},{"location":"web/versions/0.6.0/sdk-methods/#get-receiver-network-measurements","title":"Get receiver network measurements","text":"<p>Returns Measurements object with network delay, jitter, and calculated network quality indicators.</p> <pre><code>async getReceiverMeasurements(identifier: string): Promise&lt;[IMeasurements | null, SyncStageSDKErrorCode]&gt;\n</code></pre> <p>Parameters:</p> <ul> <li><code>identifier</code> - receiver's identifier</li> </ul>"},{"location":"web/versions/0.6.0/sdk-methods/#get-transmitter-network-measurements","title":"Get transmitter network measurements","text":"<p>Returns Measurements object with network delay, jitter, and calculated network quality indicators.</p> <pre><code>async getTransmitterMeasurements(): Promise&lt;[IMeasurements | null, SyncStageSDKErrorCode]&gt;\n</code></pre>"},{"location":"web/versions/0.6.0/sdk-methods/#start-recording","title":"Start recording","text":"<pre><code>async startRecording(): Promise&lt;SyncStageSDKErrorCode&gt;\n</code></pre>"},{"location":"web/versions/0.6.0/sdk-methods/#stop-recording","title":"Stop recording","text":"<pre><code>async stopRecording(): Promise&lt;SyncStageSDKErrorCode&gt;\n</code></pre>"},{"location":"web/versions/0.6.0/sdk-methods/#register-desktop-agent-reconnected-callback","title":"Register Desktop Agent Reconnected Callback","text":"<p>In case of reconnection UI application should be aware of this fact, to refetch the session state to keep it synchronized.</p> <pre><code>registerDesktopAgentReconnectedCallback(onWebsocketReconnected: () =&gt; void): void;\n</code></pre> <p>Parameters:</p> <ul> <li><code>onWebsocketReconnected</code> - callback</li> </ul>"},{"location":"web/versions/0.6.0/sdk-methods/#unregister-desktop-agent-reconnected-callback","title":"Unregister Desktop Agent Reconnected Callback","text":"<p>Remove the callback in the SyncStage.</p> <pre><code>unregisterDesktopAgentReconnectedCallback(): void;\n</code></pre>"},{"location":"web/versions/0.6.0/sdk-methods/#get-uri-for-opening-syncstage-agent-on-macos-or-on-windows","title":"Get URI for opening SyncStage Agent on macOS or on Windows","text":"<pre><code>async getDesktopAgentProtocolHandler(): Promise&lt;string&gt;;\n</code></pre>"},{"location":"web/versions/0.6.1/sdk-data-interfaces/","title":"Data interfaces","text":""},{"location":"web/versions/0.6.1/sdk-data-interfaces/#syncstage-data-interfaces","title":"SyncStage data interfaces","text":"<pre><code>interface IHostInfo {\n  port: number;\n  address: string;\n  audioServerId: string;\n  streamingUrl: string;\n}\n</code></pre> <pre><code>interface IConnectionInfo {\n  connectionId: string;\n  createdAt: string;\n  updatedAt: string;\n  userId: string;\n  isMuted: boolean;\n  displayName?: string | null;\n  hostInfo?: IHostInfo | null;\n\n  connection(): Connection;\n}\n</code></pre> <pre><code>interface ILatencyOptimizationLevel {\n  level: number;\n}\n</code></pre> <pre><code>interface IMeasurements {\n  networkDelayMs: number;\n  networkJitterMs: number;\n  quality: number;\n}\n</code></pre> <pre><code>interface IServerInstance {\n  zoneId: string;\n  zoneName: string;\n  studioServerId: string;\n}\n</code></pre> <pre><code>interface ISessionIdentifier {\n  sessionId: string;\n  sessionCode: string;\n  createdAt: string;\n}\n</code></pre> <pre><code>interface ISession {\n  sessionId: string;\n  sessionCode: string | null;\n  createdAt: string;\n  updatedAt: string;\n  transmitter?: IConnection | null;\n  receivers: Array&lt;IConnection&gt;;\n  isRecording: boolean;\n}\n</code></pre> <pre><code>interface IConnection {\n  identifier: string;\n  userId: string;\n  displayName?: string | null;\n  isMuted: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n</code></pre> <pre><code>interface ISessionInfo {\n  sessionId: string;\n  sessionCode: string | null;\n  sessionStatus: string;\n  serverIsReady: boolean;\n  websocketUrl: string;\n  transmitter?: IConnectionInfo | null;\n  receivers: Array&lt;IConnectionInfo&gt;;\n  createdAt: string;\n  updatedAt: string;\n  recordingStatus: string;\n}\n</code></pre> <pre><code>export interface IZoneLatency {\n  name: string;\n  latency: string;\n}\n</code></pre>"},{"location":"web/versions/0.6.1/sdk-delegates/","title":"Delegates","text":"<p>SyncStage class provide four delegates:</p> <ul> <li><code>ISyncStageUserDelegate</code></li> <li><code>ISyncStageConnectivityDelegate</code></li> <li><code>ISyncStageDiscoveryDelegate</code></li> <li><code>ISyncStageDesktopAgentDelegate</code></li> </ul> <p>which provide a set of callbacks to inform your application about asynchronous events from the SyncStage. </p> <p>You can define those object and provide to the SyncStage constructor or update public SyncStage properties <code>userDelegate</code>, <code>connectivityDelegate</code>, <code>discoveryDelegate</code>, and <code>desktopAgentDelegate</code> anytime.</p>"},{"location":"web/versions/0.6.1/sdk-delegates/#syncstageuserdelegate","title":"SyncStageUserDelegate","text":"<p>Responsible for getting callbacks about users' state in the session.</p> <pre><code>interface ISyncStageUserDelegate {\n  userJoined(connection: IConnection): void;\n  userLeft(identifier: string): void;\n  userMuted(identifier: string): void;\n  userUnmuted(identifier: string): void;\n  sessionRecordingStarted(): void;\n  sessionRecordingStopped(): void;\n  sessionOut(): void;\n}\n</code></pre>"},{"location":"web/versions/0.6.1/sdk-delegates/#syncstageconnectivitydelegate","title":"SyncStageConnectivityDelegate","text":"<p>Responsible for getting callbacks about users' connectivity in the session.</p> <pre><code>interface ISyncStageConnectivityDelegate {\n  transmitterConnectivityChanged(connected: boolean): void;\n  receiverConnectivityChanged(identifier: string, connected: boolean): void;\n  desktopAgentReconnected(): void;\n}\n</code></pre> <p><code>transmitterConnectivityChanged</code> and <code>receiverConnectivityChanged</code> can be used to update connectivity indicator of particular connections. The <code>desktopAgentReconnected</code> callback is suggested to be used to trigger rebuild of the session state in the application (during the disconnection, new connections might be added or removed to the session which result in the ui state inconsistency).</p>"},{"location":"web/versions/0.6.1/sdk-delegates/#syncstagedesktopagentdelegate","title":"SyncStageDesktopAgentDelegate","text":"<p>Responsible for getting callbacks with information if SyncStage Desktop Agent is already acquired by some other browser tab to prevent parallel access, and general Desktop Agent connection events.</p> <pre><code>interface ISyncStageDesktopAgentDelegate {\n  desktopAgentAquired(): void;\n  desktopAgentReleased(): void;\n  desktopAgentConnected(): void; // Reports if Desktop Agent is alive (will be triggered periodicaly on Dekstop Agent keep alive messages)\n  desktopAgentDisconnected(): void; // Reports Desktop Agent connection loss or lack of keep alive\n  onDesktopAgentDeprovisioned(): void; // Reports if Desktop Agent got deprovitioned - can happen if Desktop Agent is restarted \n  onDesktopAgentProvisioned(): void; // Periodically confirms that Desktop Agent is still provisioned (was not restarted)\n}\n</code></pre>"},{"location":"web/versions/0.6.1/sdk-error-codes/","title":"Error codes","text":"<p>Most of the SDK methods return SyncStageSDKErrorCode which can be decoded using following enum class.</p> <pre><code>enum SyncStageSDKErrorCode {\n  'TOKEN_EXPIRED' = -2002,\n  'SYNCSTAGE_OPENED_IN_ANOTHER_TAB' = -2001,\n  'NOT_IN_SESSION' = -1001,\n  'API_UNAUTHORIZED' = -1000,\n  'STUDIO_SERVER_NOT_FOUND' = -12,\n  'SYNCSTAGE_SERVICE_COMMUNICATION_ERROR' = -11,\n  'TIMEOUT_ERROR' = -10,\n  'UNKNOWN_ERROR' = -1,\n  'OK' = 0,\n  'CONFIGURATION_ERROR' = 1,\n  'API_ERROR' = 2,\n  'STREAM_DOES_NOT_EXIST' = 3,\n  'BAD_VOLUME_VALUE' = 4,\n  'NO_ZONE_AVAILABLE' = 5,\n  'NO_STUDIO_SERVER_AVAILABLE' = 6,\n  'NO_INPUT_DEVICE' = 7,\n}\n</code></pre>"},{"location":"web/versions/0.6.1/sdk-methods/","title":"Methods","text":""},{"location":"web/versions/0.6.1/sdk-methods/#070","title":"0.7.0","text":""},{"location":"web/versions/0.6.1/sdk-methods/#constructor","title":"Constructor","text":"<pre><code>class SyncStage implements ISyncStage{\n    constructor(\n        userDelegate: ISyncStageUserDelegate | null,\n        connectivityDelegate: ISyncStageConnectivityDelegate | null,\n        discoveryDelegate: ISyncStageDiscoveryDelegate | null,\n        desktopAgentDelegate: ISyncStageDesktopAgentDelegate | null,\n        onTokenExpired: (() =&gt; Promise&lt;string&gt;) | null,\n    );\n}\n</code></pre> <p>Constructor parameters:</p> <ul> <li> <p><code>userDelegate</code> - delegate object to receive events about users in session state</p> </li> <li> <p><code>connectivityDelegate</code> - delegate object to receive events with information about stream connection to Studio Server state</p> </li> <li> <p><code>desktopAgentDelegate</code> - delegate object to receive events with information of desktop agent acquisition and release to prevent users from using SyncStage in multiple browser tabs at once</p> </li> <li> <p><code>onTokenExpired</code> - callback to be called when <code>jwt</code> expires, callback should return new refetched <code>jwt</code></p> </li> </ul>"},{"location":"web/versions/0.6.1/sdk-methods/#check-compatibility","title":"Check compatibility","text":"<p>Checks if SyncStage SDK is compatible with currently installed Desktop Agent</p> <pre><code>async isCompatible(currentOs: string): Promise&lt;boolean&gt;;\n</code></pre> <p>Parameters:</p> <ul> <li><code>currentOS</code> - operating system should be provided. Accepted values from list: <code>['Windows', 'macOS']</code></li> </ul>"},{"location":"web/versions/0.6.1/sdk-methods/#get-latest-compatible-desktop-agent-version","title":"Get latest Compatible Desktop Agent version","text":"<pre><code>getLatestCompatibleDesktopAgentVersion(currentOs: string): Promise&lt;string | null&gt;;\n</code></pre> <p>Parameters:</p> <ul> <li><code>currentOS</code> - operating system should be provided. Accepted values from list: <code>['Windows', 'macOS']</code></li> </ul>"},{"location":"web/versions/0.6.1/sdk-methods/#initialize","title":"Initialize","text":"<p>Initializes and provisions the SDK SyncStage object.</p> <pre><code>async init(\n        jwt: string,\n    ): Promise&lt;SyncStageSDKErrorCode&gt;\n</code></pre> <p>Parameters:</p> <ul> <li><code>jwt</code> - token obtained in the provisioning process.</li> </ul>"},{"location":"web/versions/0.6.1/sdk-methods/#check-if-syncstage-agent-is-provisioned","title":"Check if SyncStage Agent is provisioned","text":"<p>Returns if Desktop Agent has been already provisioned.</p> <pre><code>async checkProvisionedStatus(): Promise&lt;boolean&gt;;\n</code></pre>"},{"location":"web/versions/0.6.1/sdk-methods/#update-jwt","title":"Update JWT","text":"<p>You can update JWT anytime you want, even before expiration takes place.</p> <pre><code>async updateToken(jwt: string): Promise&lt;SyncStageSDKErrorCode&gt;\n</code></pre> <ul> <li><code>jwt</code> - token obtained in the provisioning process.</li> </ul>"},{"location":"web/versions/0.6.1/sdk-methods/#get-is-desktop-agent-connected","title":"Get is desktop agent connected","text":"<p>Checks if desktop agent is running and available on the localhost.</p> <pre><code>isDesktopAgentConnected(): boolean\n</code></pre>"},{"location":"web/versions/0.6.1/sdk-methods/#get-sdk-version","title":"Get SDK version","text":"<p>Gets SDK version.</p> <pre><code>getSDKVersion(): string\n</code></pre>"},{"location":"web/versions/0.6.1/sdk-methods/#gets-autoselected-studio-server","title":"Gets autoselected Studio Server","text":"<p>Get autoselected server instance info</p> <pre><code>async getSelectedServer(): Promise&lt;[IServerInstance | null, SyncStageSDKErrorCode]&gt;;\n</code></pre>"},{"location":"web/versions/0.6.1/sdk-methods/#get-best-available-studio-server","title":"Get best available Studio Server","text":"<p>Get best available server, where a session can be created</p> <pre><code>async getBestAvailableServer(): Promise&lt;[IServerInstance | null, SyncStageSDKErrorCode]&gt;\n</code></pre>"},{"location":"web/versions/0.6.1/sdk-methods/#update-sdk-to-syncstage-backend-connected-callback","title":"Update SDK to SyncStage backend connected callback","text":"<pre><code>  updateOnDesktopAgentReconnected(onDesktopAgentReconnected: () =&gt; void): void;\n</code></pre> <p>Parameters:</p> <ul> <li><code>onDesktopAgentReconnected</code> - method to be called when the browser SDK reconnects to Desktop Agent. Session state should be refetched and synchronized on the UI in this callback.</li> </ul>"},{"location":"web/versions/0.6.1/sdk-methods/#get-server-instances","title":"Get server instances","text":"<p>Get server instances so you can select the server that is suitable for your session.</p> <pre><code>  async getServerInstances(): Promise&lt;[IServerInstances | null, SyncStageSDKErrorCode]&gt;\n</code></pre>"},{"location":"web/versions/0.6.1/sdk-methods/#create-a-session","title":"Create a session","text":"<p>Creates a session in a given zone by a given user from your user pool.</p> <pre><code>async createSession(\n    userId: string,\n    zoneId?: string | null,\n    studioServerId?: string | null,\n  ): Promise&lt;[ISessionIdentifier | null, SyncStageSDKErrorCode]&gt;\n</code></pre> <p>Parameters:</p> <ul> <li><code>zoneId</code> - zone in which your session is hosted</li> <li><code>studioServerId</code> - studio server where you are running your session</li> <li><code>userId</code> - id of your app user to match the data between SyncStage and your backend</li> </ul>"},{"location":"web/versions/0.6.1/sdk-methods/#join-the-session","title":"Join the session","text":"<p>Joins a particular session identified by <code>sessionCode</code>.</p> <pre><code>async join(\n    sessionCode: string,\n    userId: string,\n    displayName?: string | null,\n    zoneId?: string | null,\n    studioServerId?: string | null,\n  ): Promise&lt;[ISession | null, SyncStageSDKErrorCode]&gt;;\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>sessionCode</code> - the session code</p> </li> <li> <p><code>userId</code> - id of your app user to match de data between SyncStage and your backend</p> </li> <li> <p><code>zoneId</code> - zone in which your session is hosted</p> </li> <li> <p><code>studioServerId</code> - studio server where you are running your session</p> </li> <li> <p><code>displayName</code> - your app user display name</p> </li> </ul>"},{"location":"web/versions/0.6.1/sdk-methods/#get-session-state","title":"Get session state","text":"<p>Gets state of currently joined session.</p> <pre><code>async session(): Promise&lt;[ISession | null, SyncStageSDKErrorCode]&gt; \n</code></pre>"},{"location":"web/versions/0.6.1/sdk-methods/#leave-the-session","title":"Leave the session","text":"<p>Leaves currently joined session.</p> <pre><code>async leave(): Promise&lt;SyncStageSDKErrorCode&gt; \n</code></pre>"},{"location":"web/versions/0.6.1/sdk-methods/#mute-unmute-microphone","title":"Mute / unmute microphone","text":"<p>Enables or disables microphone stream.</p> <pre><code>async toggleMicrophone(mute: boolean): Promise&lt;SyncStageSDKErrorCode&gt;\n</code></pre> <p>Parameters:</p> <ul> <li><code>mute</code> - desired state of the mute option</li> </ul>"},{"location":"web/versions/0.6.1/sdk-methods/#is-muted","title":"Is muted","text":"<p>Returns state of microphone stream.</p> <pre><code>async isMicrophoneMuted(): Promise&lt;[boolean | null, SyncStageSDKErrorCode]&gt;\n</code></pre>"},{"location":"web/versions/0.6.1/sdk-methods/#get-receiver-network-measurements","title":"Get receiver network measurements","text":"<p>Returns Measurements object with network delay, jitter, and calculated network quality indicators.</p> <pre><code>async getReceiverMeasurements(identifier: string): Promise&lt;[IMeasurements | null, SyncStageSDKErrorCode]&gt;\n</code></pre> <p>Parameters:</p> <ul> <li><code>identifier</code> - receiver's identifier</li> </ul>"},{"location":"web/versions/0.6.1/sdk-methods/#get-transmitter-network-measurements","title":"Get transmitter network measurements","text":"<p>Returns Measurements object with network delay, jitter, and calculated network quality indicators.</p> <pre><code>async getTransmitterMeasurements(): Promise&lt;[IMeasurements | null, SyncStageSDKErrorCode]&gt;\n</code></pre>"},{"location":"web/versions/0.6.1/sdk-methods/#start-recording","title":"Start recording","text":"<pre><code>async startRecording(): Promise&lt;SyncStageSDKErrorCode&gt;\n</code></pre>"},{"location":"web/versions/0.6.1/sdk-methods/#stop-recording","title":"Stop recording","text":"<pre><code>async stopRecording(): Promise&lt;SyncStageSDKErrorCode&gt;\n</code></pre>"},{"location":"web/versions/0.6.1/sdk-methods/#register-desktop-agent-reconnected-callback","title":"Register Desktop Agent Reconnected Callback","text":"<p>In case of reconnection UI application should be aware of this fact, to refetch the session state to keep it synchronized.</p> <pre><code>registerDesktopAgentReconnectedCallback(onWebsocketReconnected: () =&gt; void): void;\n</code></pre> <p>Parameters:</p> <ul> <li><code>onWebsocketReconnected</code> - callback</li> </ul>"},{"location":"web/versions/0.6.1/sdk-methods/#unregister-desktop-agent-reconnected-callback","title":"Unregister Desktop Agent Reconnected Callback","text":"<p>Remove the callback in the SyncStage.</p> <pre><code>unregisterDesktopAgentReconnectedCallback(): void;\n</code></pre>"},{"location":"web/versions/0.6.1/sdk-methods/#get-uri-for-opening-syncstage-agent-on-macos-or-on-windows","title":"Get URI for opening SyncStage Agent on macOS or on Windows","text":"<pre><code>async getDesktopAgentProtocolHandler(): Promise&lt;string&gt;;\n</code></pre>"},{"location":"web/versions/0.6.2/sdk-data-interfaces/","title":"Data interfaces","text":""},{"location":"web/versions/0.6.2/sdk-data-interfaces/#syncstage-data-interfaces","title":"SyncStage data interfaces","text":"<pre><code>interface IHostInfo {\n  port: number;\n  address: string;\n  audioServerId: string;\n  streamingUrl: string;\n}\n</code></pre> <pre><code>interface IConnectionInfo {\n  connectionId: string;\n  createdAt: string;\n  updatedAt: string;\n  userId: string;\n  isMuted: boolean;\n  displayName?: string | null;\n  hostInfo?: IHostInfo | null;\n\n  connection(): Connection;\n}\n</code></pre> <pre><code>interface ILatencyOptimizationLevel {\n  level: number;\n}\n</code></pre> <pre><code>interface IMeasurements {\n  networkDelayMs: number;\n  networkJitterMs: number;\n  quality: number;\n}\n</code></pre> <pre><code>interface IServerInstance {\n  zoneId: string;\n  zoneName: string;\n  studioServerId: string;\n}\n</code></pre> <pre><code>interface ISessionIdentifier {\n  sessionId: string;\n  sessionCode: string;\n  createdAt: string;\n}\n</code></pre> <pre><code>interface ISession {\n  sessionId: string;\n  sessionCode: string | null;\n  createdAt: string;\n  updatedAt: string;\n  transmitter?: IConnection | null;\n  receivers: Array&lt;IConnection&gt;;\n  isRecording: boolean;\n}\n</code></pre> <pre><code>interface IConnection {\n  identifier: string;\n  userId: string;\n  displayName?: string | null;\n  isMuted: boolean;\n  createdAt: string;\n  updatedAt: string;\n}\n</code></pre> <pre><code>interface ISessionInfo {\n  sessionId: string;\n  sessionCode: string | null;\n  sessionStatus: string;\n  serverIsReady: boolean;\n  websocketUrl: string;\n  transmitter?: IConnectionInfo | null;\n  receivers: Array&lt;IConnectionInfo&gt;;\n  createdAt: string;\n  updatedAt: string;\n  recordingStatus: string;\n}\n</code></pre> <pre><code>export interface IZoneLatency {\n  name: string;\n  latency: string;\n}\n</code></pre>"},{"location":"web/versions/0.6.2/sdk-delegates/","title":"Delegates","text":"<p>SyncStage class provide four delegates:</p> <ul> <li><code>ISyncStageUserDelegate</code></li> <li><code>ISyncStageConnectivityDelegate</code></li> <li><code>ISyncStageDiscoveryDelegate</code></li> <li><code>ISyncStageDesktopAgentDelegate</code></li> </ul> <p>which provide a set of callbacks to inform your application about asynchronous events from the SyncStage. </p> <p>You can define those object and provide to the SyncStage constructor or update public SyncStage properties <code>userDelegate</code>, <code>connectivityDelegate</code>, <code>discoveryDelegate</code>, and <code>desktopAgentDelegate</code> anytime.</p>"},{"location":"web/versions/0.6.2/sdk-delegates/#syncstageuserdelegate","title":"SyncStageUserDelegate","text":"<p>Responsible for getting callbacks about users' state in the session.</p> <pre><code>interface ISyncStageUserDelegate {\n  userJoined(connection: IConnection): void;\n  userLeft(identifier: string): void;\n  userMuted(identifier: string): void;\n  userUnmuted(identifier: string): void;\n  sessionRecordingStarted(): void;\n  sessionRecordingStopped(): void;\n  sessionOut(): void;\n}\n</code></pre>"},{"location":"web/versions/0.6.2/sdk-delegates/#syncstageconnectivitydelegate","title":"SyncStageConnectivityDelegate","text":"<p>Responsible for getting callbacks about users' connectivity in the session.</p> <pre><code>interface ISyncStageConnectivityDelegate {\n  transmitterConnectivityChanged(connected: boolean): void;\n  receiverConnectivityChanged(identifier: string, connected: boolean): void;\n  desktopAgentReconnected(): void;\n}\n</code></pre> <p><code>transmitterConnectivityChanged</code> and <code>receiverConnectivityChanged</code> can be used to update connectivity indicator of particular connections. The <code>desktopAgentReconnected</code> callback is suggested to be used to trigger rebuild of the session state in the application (during the disconnection, new connections might be added or removed to the session which result in the ui state inconsistency).</p>"},{"location":"web/versions/0.6.2/sdk-delegates/#syncstagedesktopagentdelegate","title":"SyncStageDesktopAgentDelegate","text":"<p>Responsible for getting callbacks with information if SyncStage Desktop Agent is already acquired by some other browser tab to prevent parallel access, and general Desktop Agent connection events.</p> <pre><code>interface ISyncStageDesktopAgentDelegate {\n  desktopAgentAquired(): void;\n  desktopAgentReleased(): void;\n  desktopAgentConnected(): void; // Reports if Desktop Agent is alive (will be triggered periodicaly on Dekstop Agent keep alive messages)\n  desktopAgentDisconnected(): void; // Reports Desktop Agent connection loss or lack of keep alive\n  onDesktopAgentDeprovisioned(): void; // Reports if Desktop Agent got deprovitioned - can happen if Desktop Agent is restarted \n  onDesktopAgentProvisioned(): void; // Periodically confirms that Desktop Agent is still provisioned (was not restarted)\n}\n</code></pre>"},{"location":"web/versions/0.6.2/sdk-error-codes/","title":"Error codes","text":"<p>Most of the SDK methods return SyncStageSDKErrorCode which can be decoded using following enum class.</p> <pre><code>enum SyncStageSDKErrorCode {\n  'TOKEN_EXPIRED' = -2002,\n  'SYNCSTAGE_OPENED_IN_ANOTHER_TAB' = -2001,\n  'NOT_IN_SESSION' = -1001,\n  'API_UNAUTHORIZED' = -1000,\n  'STUDIO_SERVER_NOT_FOUND' = -12,\n  'SYNCSTAGE_SERVICE_COMMUNICATION_ERROR' = -11,\n  'TIMEOUT_ERROR' = -10,\n  'UNKNOWN_ERROR' = -1,\n  'OK' = 0,\n  'CONFIGURATION_ERROR' = 1,\n  'API_ERROR' = 2,\n  'STREAM_DOES_NOT_EXIST' = 3,\n  'BAD_VOLUME_VALUE' = 4,\n  'NO_ZONE_AVAILABLE' = 5,\n  'NO_STUDIO_SERVER_AVAILABLE' = 6,\n  'NO_INPUT_DEVICE' = 7,\n}\n</code></pre>"},{"location":"web/versions/0.6.2/sdk-methods/","title":"Methods","text":""},{"location":"web/versions/0.6.2/sdk-methods/#070","title":"0.7.0","text":""},{"location":"web/versions/0.6.2/sdk-methods/#constructor","title":"Constructor","text":"<pre><code>class SyncStage implements ISyncStage{\n    constructor(\n        userDelegate: ISyncStageUserDelegate | null,\n        connectivityDelegate: ISyncStageConnectivityDelegate | null,\n        discoveryDelegate: ISyncStageDiscoveryDelegate | null,\n        desktopAgentDelegate: ISyncStageDesktopAgentDelegate | null,\n        onTokenExpired: (() =&gt; Promise&lt;string&gt;) | null,\n    );\n}\n</code></pre> <p>Constructor parameters:</p> <ul> <li> <p><code>userDelegate</code> - delegate object to receive events about users in session state</p> </li> <li> <p><code>connectivityDelegate</code> - delegate object to receive events with information about stream connection to Studio Server state</p> </li> <li> <p><code>desktopAgentDelegate</code> - delegate object to receive events with information of desktop agent acquisition and release to prevent users from using SyncStage in multiple browser tabs at once</p> </li> <li> <p><code>onTokenExpired</code> - callback to be called when <code>jwt</code> expires, callback should return new refetched <code>jwt</code></p> </li> </ul>"},{"location":"web/versions/0.6.2/sdk-methods/#check-compatibility","title":"Check compatibility","text":"<p>Checks if SyncStage SDK is compatible with currently installed Desktop Agent</p> <pre><code>async isCompatible(currentOs: string): Promise&lt;boolean&gt;;\n</code></pre> <p>Parameters:</p> <ul> <li><code>currentOS</code> - operating system should be provided. Accepted values from list: <code>['Windows', 'macOS']</code></li> </ul>"},{"location":"web/versions/0.6.2/sdk-methods/#get-latest-compatible-desktop-agent-version","title":"Get latest Compatible Desktop Agent version","text":"<pre><code>getLatestCompatibleDesktopAgentVersion(currentOs: string): Promise&lt;string | null&gt;;\n</code></pre> <p>Parameters:</p> <ul> <li><code>currentOS</code> - operating system should be provided. Accepted values from list: <code>['Windows', 'macOS']</code></li> </ul>"},{"location":"web/versions/0.6.2/sdk-methods/#initialize","title":"Initialize","text":"<p>Initializes and provisions the SDK SyncStage object.</p> <pre><code>async init(\n        jwt: string,\n    ): Promise&lt;SyncStageSDKErrorCode&gt;\n</code></pre> <p>Parameters:</p> <ul> <li><code>jwt</code> - token obtained in the provisioning process.</li> </ul>"},{"location":"web/versions/0.6.2/sdk-methods/#check-if-syncstage-agent-is-provisioned","title":"Check if SyncStage Agent is provisioned","text":"<p>Returns if Desktop Agent has been already provisioned.</p> <pre><code>async checkProvisionedStatus(): Promise&lt;boolean&gt;;\n</code></pre>"},{"location":"web/versions/0.6.2/sdk-methods/#update-jwt","title":"Update JWT","text":"<p>You can update JWT anytime you want, even before expiration takes place.</p> <pre><code>async updateToken(jwt: string): Promise&lt;SyncStageSDKErrorCode&gt;\n</code></pre> <ul> <li><code>jwt</code> - token obtained in the provisioning process.</li> </ul>"},{"location":"web/versions/0.6.2/sdk-methods/#get-is-desktop-agent-connected","title":"Get is desktop agent connected","text":"<p>Checks if desktop agent is running and available on the localhost.</p> <pre><code>isDesktopAgentConnected(): boolean\n</code></pre>"},{"location":"web/versions/0.6.2/sdk-methods/#get-sdk-version","title":"Get SDK version","text":"<p>Gets SDK version.</p> <pre><code>getSDKVersion(): string\n</code></pre>"},{"location":"web/versions/0.6.2/sdk-methods/#gets-autoselected-studio-server","title":"Gets autoselected Studio Server","text":"<p>Get autoselected server instance info</p> <pre><code>async getSelectedServer(): Promise&lt;[IServerInstance | null, SyncStageSDKErrorCode]&gt;;\n</code></pre>"},{"location":"web/versions/0.6.2/sdk-methods/#get-best-available-studio-server","title":"Get best available Studio Server","text":"<p>Get best available server, where a session can be created</p> <pre><code>async getBestAvailableServer(): Promise&lt;[IServerInstance | null, SyncStageSDKErrorCode]&gt;\n</code></pre>"},{"location":"web/versions/0.6.2/sdk-methods/#update-sdk-to-syncstage-backend-connected-callback","title":"Update SDK to SyncStage backend connected callback","text":"<pre><code>  updateOnDesktopAgentReconnected(onDesktopAgentReconnected: () =&gt; void): void;\n</code></pre> <p>Parameters:</p> <ul> <li><code>onDesktopAgentReconnected</code> - method to be called when the browser SDK reconnects to Desktop Agent. Session state should be refetched and synchronized on the UI in this callback.</li> </ul>"},{"location":"web/versions/0.6.2/sdk-methods/#get-server-instances","title":"Get server instances","text":"<p>Get server instances so you can select the server that is suitable for your session.</p> <pre><code>  async getServerInstances(): Promise&lt;[IServerInstances | null, SyncStageSDKErrorCode]&gt;\n</code></pre>"},{"location":"web/versions/0.6.2/sdk-methods/#create-a-session","title":"Create a session","text":"<p>Creates a session in a given zone by a given user from your user pool.</p> <pre><code>async createSession(\n    userId: string,\n    zoneId?: string | null,\n    studioServerId?: string | null,\n  ): Promise&lt;[ISessionIdentifier | null, SyncStageSDKErrorCode]&gt;\n</code></pre> <p>Parameters:</p> <ul> <li><code>zoneId</code> - zone in which your session is hosted</li> <li><code>studioServerId</code> - studio server where you are running your session</li> <li><code>userId</code> - id of your app user to match the data between SyncStage and your backend</li> </ul>"},{"location":"web/versions/0.6.2/sdk-methods/#join-the-session","title":"Join the session","text":"<p>Joins a particular session identified by <code>sessionCode</code>.</p> <pre><code>async join(\n    sessionCode: string,\n    userId: string,\n    displayName?: string | null,\n    zoneId?: string | null,\n    studioServerId?: string | null,\n  ): Promise&lt;[ISession | null, SyncStageSDKErrorCode]&gt;;\n</code></pre> <p>Parameters:</p> <ul> <li> <p><code>sessionCode</code> - the session code</p> </li> <li> <p><code>userId</code> - id of your app user to match de data between SyncStage and your backend</p> </li> <li> <p><code>zoneId</code> - zone in which your session is hosted</p> </li> <li> <p><code>studioServerId</code> - studio server where you are running your session</p> </li> <li> <p><code>displayName</code> - your app user display name</p> </li> </ul>"},{"location":"web/versions/0.6.2/sdk-methods/#get-session-state","title":"Get session state","text":"<p>Gets state of currently joined session.</p> <pre><code>async session(): Promise&lt;[ISession | null, SyncStageSDKErrorCode]&gt; \n</code></pre>"},{"location":"web/versions/0.6.2/sdk-methods/#leave-the-session","title":"Leave the session","text":"<p>Leaves currently joined session.</p> <pre><code>async leave(): Promise&lt;SyncStageSDKErrorCode&gt; \n</code></pre>"},{"location":"web/versions/0.6.2/sdk-methods/#mute-unmute-microphone","title":"Mute / unmute microphone","text":"<p>Enables or disables microphone stream.</p> <pre><code>async toggleMicrophone(mute: boolean): Promise&lt;SyncStageSDKErrorCode&gt;\n</code></pre> <p>Parameters:</p> <ul> <li><code>mute</code> - desired state of the mute option</li> </ul>"},{"location":"web/versions/0.6.2/sdk-methods/#is-muted","title":"Is muted","text":"<p>Returns state of microphone stream.</p> <pre><code>async isMicrophoneMuted(): Promise&lt;[boolean | null, SyncStageSDKErrorCode]&gt;\n</code></pre>"},{"location":"web/versions/0.6.2/sdk-methods/#get-receiver-network-measurements","title":"Get receiver network measurements","text":"<p>Returns Measurements object with network delay, jitter, and calculated network quality indicators.</p> <pre><code>async getReceiverMeasurements(identifier: string): Promise&lt;[IMeasurements | null, SyncStageSDKErrorCode]&gt;\n</code></pre> <p>Parameters:</p> <ul> <li><code>identifier</code> - receiver's identifier</li> </ul>"},{"location":"web/versions/0.6.2/sdk-methods/#get-transmitter-network-measurements","title":"Get transmitter network measurements","text":"<p>Returns Measurements object with network delay, jitter, and calculated network quality indicators.</p> <pre><code>async getTransmitterMeasurements(): Promise&lt;[IMeasurements | null, SyncStageSDKErrorCode]&gt;\n</code></pre>"},{"location":"web/versions/0.6.2/sdk-methods/#start-recording","title":"Start recording","text":"<pre><code>async startRecording(): Promise&lt;SyncStageSDKErrorCode&gt;\n</code></pre>"},{"location":"web/versions/0.6.2/sdk-methods/#stop-recording","title":"Stop recording","text":"<pre><code>async stopRecording(): Promise&lt;SyncStageSDKErrorCode&gt;\n</code></pre>"},{"location":"web/versions/0.6.2/sdk-methods/#register-desktop-agent-reconnected-callback","title":"Register Desktop Agent Reconnected Callback","text":"<p>In case of reconnection UI application should be aware of this fact, to refetch the session state to keep it synchronized.</p> <pre><code>registerDesktopAgentReconnectedCallback(onWebsocketReconnected: () =&gt; void): void;\n</code></pre> <p>Parameters:</p> <ul> <li><code>onWebsocketReconnected</code> - callback</li> </ul>"},{"location":"web/versions/0.6.2/sdk-methods/#unregister-desktop-agent-reconnected-callback","title":"Unregister Desktop Agent Reconnected Callback","text":"<p>Remove the callback in the SyncStage.</p> <pre><code>unregisterDesktopAgentReconnectedCallback(): void;\n</code></pre>"},{"location":"web/versions/0.6.2/sdk-methods/#get-uri-for-opening-syncstage-agent-on-macos-or-on-windows","title":"Get URI for opening SyncStage Agent on macOS or on Windows","text":"<pre><code>async getDesktopAgentProtocolHandler(): Promise&lt;string&gt;;\n</code></pre>"}]}